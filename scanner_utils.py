#!/usr/bin/env python3
"""
–£—Ç–∏–ª–∏—Ç—ã —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–æ–ø–∏–∫–æ–≤ –¥–ª—è Get ID Bot by Mister DMS
–û–ë–ù–û–í–õ–ï–ù–û v4.1.1: —É–ª—É—á—à–µ–Ω–Ω–∞—è –ª–æ–≥–∏–∫–∞ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è + –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å
"""

import asyncio
import logging
from datetime import datetime, timedelta
from typing import Optional, List, Dict, Any, Union
import json

from telethon import TelegramClient
from telethon.errors import (
    ChatAdminRequiredError, ChannelPrivateError, 
    FloodWaitError, ApiIdInvalidError
)
from telethon.tl.types import Channel, Chat, User, MessageMediaDocument
from telethon.tl.functions.channels import GetForumTopicsRequest
from telethon.tl.functions.messages import GetHistoryRequest

from utils import PerformanceUtils, ValidationUtils, EncryptionUtils
from database import DatabaseManager

logger = logging.getLogger(__name__)

class TopicScanner:
    """–°–∫–∞–Ω–µ—Ä —Ç–æ–ø–∏–∫–æ–≤ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π bot –∏ user —Ä–µ–∂–∏–º–æ–≤"""
    
    def __init__(self, db_manager: DatabaseManager):
        self.db_manager = db_manager
        self.active_scans = {}  # –ê–∫—Ç–∏–≤–Ω—ã–µ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –¥—É–±–ª–µ–π
        
    @PerformanceUtils.measure_time
    async def scan_topics(self, chat_id: int, user_id: int, mode: str = 'bot') -> Dict[str, Any]:
        """
        –û—Å–Ω–æ–≤–Ω–æ–π –º–µ—Ç–æ–¥ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–æ–ø–∏–∫–æ–≤
        
        Args:
            chat_id: ID —á–∞—Ç–∞ –¥–ª—è —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
            user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∏–Ω–∏—Ü–∏–∏—Ä–æ–≤–∞–≤—à–µ–≥–æ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ
            mode: –†–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã ('bot' –∏–ª–∏ 'user')
        
        Returns:
            –†–µ–∑—É–ª—å—Ç–∞—Ç —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è —Å —Ç–æ–ø–∏–∫–∞–º–∏ –∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π
        """
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–µ –∏–¥–µ—Ç –ª–∏ —É–∂–µ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —ç—Ç–æ–≥–æ —á–∞—Ç–∞
        scan_key = f"{chat_id}_{user_id}"
        if scan_key in self.active_scans:
            return {
                'success': False,
                'error': '–°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —É–∂–µ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è',
                'data': None
            }
        
        try:
            self.active_scans[scan_key] = datetime.now()
            
            if mode == 'user':
                return await self._scan_user_mode(chat_id, user_id)
            else:
                return await self._scan_bot_mode(chat_id, user_id)
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–æ–ø–∏–∫–æ–≤: {e}")
            return {
                'success': False,
                'error': str(e),
                'data': None
            }
        finally:
            # –£–±–∏—Ä–∞–µ–º –∏–∑ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–π
            self.active_scans.pop(scan_key, None)
    
    async def _scan_bot_mode(self, chat_id: int, user_id: int) -> Dict[str, Any]:
        """–°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –≤ —Ä–µ–∂–∏–º–µ –±–æ—Ç–∞ (–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω—ã–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª)"""
        from handlers import BotHandlers  # –ò–∑–±–µ–≥–∞–µ–º —Ü–∏–∫–ª–∏—á–µ—Å–∫–æ–≥–æ –∏–º–ø–æ—Ä—Ç–∞
        
        try:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –±–æ—Ç-–∫–ª–∏–µ–Ω—Ç–∞
            # –ó–¥–µ—Å—å –±—É–¥–µ—Ç –ª–æ–≥–∏–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–∞ –æ—Ç BotHandlers
            logger.debug(f"ü§ñ –°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –≤ —Ä–µ–∂–∏–º–µ –±–æ—Ç–∞: {chat_id}")
            
            # –ü–æ–∫–∞ –∑–∞–≥–ª—É—à–∫–∞ - –≤ —Ä–µ–∞–ª—å–Ω–æ–π —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ –ø–æ–ª—É—á–∏–º —Ç–æ–ø–∏–∫–∏ —á–µ—Ä–µ–∑ Bot API
            topics = await self._get_topics_bot_api(chat_id)
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ –ë–î
            await self._save_scan_results(chat_id, user_id, topics, 'bot')
            
            return {
                'success': True,
                'error': None,
                'data': {
                    'topics': topics,
                    'mode': 'bot',
                    'timestamp': datetime.now().isoformat(),
                    'chat_id': chat_id,
                    'user_id': user_id
                }
            }
            
        except ChatAdminRequiredError:
            return {
                'success': False,
                'error': '–ë–æ—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –≤ –≥—Ä—É–ø–ø–µ',
                'data': None
            }
        except ChannelPrivateError:
            return {
                'success': False,
                'error': '–ì—Ä—É–ø–ø–∞ –ø—Ä–∏–≤–∞—Ç–Ω–∞—è –∏–ª–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞',
                'data': None
            }
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –≤ —Ä–µ–∂–∏–º–µ –±–æ—Ç–∞: {e}")
            return {
                'success': False,
                'error': f'–û—à–∏–±–∫–∞ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è: {str(e)}',
                'data': None
            }
    
    async def _scan_user_mode(self, chat_id: int, user_id: int) -> Dict[str, Any]:
        """–°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –≤ —Ä–µ–∂–∏–º–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–ø–æ–ª–Ω—ã–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª)"""
        
        try:
            logger.debug(f"üë§ –°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –≤ —Ä–µ–∂–∏–º–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {chat_id}")
            
            # –ü–æ–ª—É—á–∞–µ–º credentials –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user_data = await self.db_manager.get_user(user_id)
            if not user_data or not user_data.get('api_id_encrypted'):
                return {
                    'success': False,
                    'error': 'API credentials –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /renew_my_api_hash',
                    'data': None
                }
            
            # –†–∞—Å—à–∏—Ñ—Ä–æ–≤—ã–≤–∞–µ–º credentials
            api_id = EncryptionUtils.decrypt(user_data['api_id_encrypted'])
            api_hash = EncryptionUtils.decrypt(user_data['api_hash_encrypted'])
            
            if not api_id or not api_hash:
                return {
                    'success': False,
                    'error': '–û—à–∏–±–∫–∞ —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∏ API credentials',
                    'data': None
                }
            
            # –°–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π –∫–ª–∏–µ–Ω—Ç
            user_client = TelegramClient(
                f'user_session_{user_id}',
                int(api_id),
                api_hash
            )
            
            try:
                await user_client.start()
                
                # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —á–∞—Ç–µ
                chat_entity = await user_client.get_entity(chat_id)
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —ç—Ç–æ —Å—É–ø–µ—Ä–≥—Ä—É–ø–ø–∞ —Å —Ç–æ–ø–∏–∫–∞–º–∏
                if not isinstance(chat_entity, Channel) or not chat_entity.forum:
                    return {
                        'success': False,
                        'error': '–ß–∞—Ç –Ω–µ —è–≤–ª—è–µ—Ç—Å—è —Å—É–ø–µ—Ä–≥—Ä—É–ø–ø–æ–π —Å —Ç–æ–ø–∏–∫–∞–º–∏',
                        'data': None
                    }
                
                # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–ø–∏–∫–∏
                topics = await self._get_topics_user_api(user_client, chat_id)
                
                # –ü–æ–ª—É—á–∞–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø–æ —Ç–æ–ø–∏–∫–∞–º
                enriched_topics = await self._enrich_topics_data(user_client, chat_id, topics)
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
                await self._save_scan_results(chat_id, user_id, enriched_topics, 'user')
                
                return {
                    'success': True,
                    'error': None,
                    'data': {
                        'topics': enriched_topics,
                        'mode': 'user',
                        'timestamp': datetime.now().isoformat(),
                        'chat_id': chat_id,
                        'user_id': user_id,
                        'chat_info': {
                            'title': getattr(chat_entity, 'title', 'Unknown'),
                            'username': getattr(chat_entity, 'username', None),
                            'participants_count': getattr(chat_entity, 'participants_count', 0)
                        }
                    }
                }
                
            finally:
                await user_client.disconnect()
                
        except ApiIdInvalidError:
            return {
                'success': False,
                'error': '–ù–µ–≤–µ—Ä–Ω—ã–µ API credentials. –û–±–Ω–æ–≤–∏—Ç–µ —á–µ—Ä–µ–∑ /renew_my_api_hash',
                'data': None
            }
        except FloodWaitError as e:
            return {
                'success': False,
                'error': f'Rate limit –æ—Ç Telegram. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —á–µ—Ä–µ–∑ {e.seconds} —Å–µ–∫—É–Ω–¥',
                'data': None
            }
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –≤ —Ä–µ–∂–∏–º–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
            return {
                'success': False,
                'error': f'–û—à–∏–±–∫–∞ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è: {str(e)}',
                'data': None
            }
    
    async def _get_topics_bot_api(self, chat_id: int) -> List[Dict[str, Any]]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–ø–∏–∫–æ–≤ —á–µ—Ä–µ–∑ Bot API (–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω—ã–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª)"""
        
        # –í —Ä–µ–∂–∏–º–µ –±–æ—Ç–∞ –ø–æ–ª—É—á–∞–µ–º —Ç–æ–ª—å–∫–æ –±–∞–∑–æ–≤—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
        # –†–µ–∞–ª—å–Ω–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å Bot API
        
        # –ü–æ–∫–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∑–∞–≥–ª—É—à–∫—É
        logger.debug(f"üîç –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–ø–∏–∫–æ–≤ —á–µ—Ä–µ–∑ Bot API –¥–ª—è —á–∞—Ç–∞ {chat_id}")
        
        # TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –ø–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–ø–∏–∫–æ–≤ —á–µ—Ä–µ–∑ Bot API
        # Telegram Bot API –ø–æ–∫–∞ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –ø–æ–ª–Ω–æ—Ü–µ–Ω–Ω—É—é —Ä–∞–±–æ—Ç—É —Å —Ç–æ–ø–∏–∫–∞–º–∏
        
        return [
            {
                'id': 1,
                'title': '–û–±—â–∏–π',
                'message_count': 0,
                'created_date': datetime.now().isoformat(),
                'last_message_date': None,
                'creator_id': None,
                'is_closed': False,
                'icon_emoji': 'üí¨',
                'mode': 'bot_api'
            }
        ]
    
    async def _get_topics_user_api(self, client: TelegramClient, chat_id: int) -> List[Dict[str, Any]]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–ø–∏–∫–æ–≤ —á–µ—Ä–µ–∑ User API (–ø–æ–ª–Ω—ã–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª)"""
        
        try:
            logger.debug(f"üîç –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–ø–∏–∫–æ–≤ —á–µ—Ä–µ–∑ User API –¥–ª—è —á–∞—Ç–∞ {chat_id}")
            
            # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ç–æ–ø–∏–∫–æ–≤
            result = await client(GetForumTopicsRequest(
                channel=chat_id,
                offset_date=None,
                offset_id=0,
                offset_topic=0,
                limit=100
            ))
            
            topics = []
            
            for topic in result.topics:
                topic_data = {
                    'id': topic.id,
                    'title': topic.title,
                    'created_date': topic.date.isoformat() if topic.date else None,
                    'creator_id': topic.from_id.user_id if hasattr(topic.from_id, 'user_id') else None,
                    'is_closed': getattr(topic, 'closed', False),
                    'is_pinned': getattr(topic, 'pinned', False),
                    'icon_emoji': getattr(topic, 'icon_emoji_id', None),
                    'message_count': 0,  # –ë—É–¥–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–æ –≤ _enrich_topics_data
                    'last_message_date': None,
                    'mode': 'user_api'
                }
                
                topics.append(topic_data)
            
            logger.debug(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ —Ç–æ–ø–∏–∫–æ–≤: {len(topics)}")
            return topics
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–ø–∏–∫–æ–≤ —á–µ—Ä–µ–∑ User API: {e}")
            return []
    
    async def _enrich_topics_data(self, client: TelegramClient, chat_id: int, 
                                topics: List[Dict[str, Any]]) -> List[Dict[str, Any]]:
        """–û–±–æ–≥–∞—â–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö —Ç–æ–ø–∏–∫–æ–≤ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π"""
        
        enriched_topics = []
        
        for topic in topics:
            try:
                # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Å–æ–æ–±—â–µ–Ω–∏–π –≤ —Ç–æ–ø–∏–∫–µ
                topic_stats = await self._get_topic_message_stats(client, chat_id, topic['id'])
                
                # –û–±–æ–≥–∞—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ
                enriched_topic = {
                    **topic,
                    'message_count': topic_stats.get('message_count', 0),
                    'last_message_date': topic_stats.get('last_message_date'),
                    'unique_users': topic_stats.get('unique_users', 0),
                    'avg_messages_per_day': topic_stats.get('avg_messages_per_day', 0),
                    'most_active_user': topic_stats.get('most_active_user'),
                    'recent_activity': topic_stats.get('recent_activity', False)
                }
                
                enriched_topics.append(enriched_topic)
                
                # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ —á—Ç–æ–±—ã –Ω–µ –Ω–∞—Ä–≤–∞—Ç—å—Å—è –Ω–∞ rate limit
                await asyncio.sleep(0.5)
                
            except Exception as e:
                logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ–±–æ–≥–∞—â–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö —Ç–æ–ø–∏–∫–∞ {topic['id']}: {e}")
                enriched_topics.append(topic)
        
        return enriched_topics
    
    async def _get_topic_message_stats(self, client: TelegramClient, chat_id: int, 
                                     topic_id: int) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ —Ç–æ–ø–∏–∫–µ"""
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ —Ç–æ–ø–∏–∫–∞
            history = await client(GetHistoryRequest(
                peer=chat_id,
                offset_id=0,
                offset_date=None,
                add_offset=0,
                limit=100,
                max_id=0,
                min_id=0,
                hash=0,
                reply_to_msg_id=topic_id  # –£–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ø–∏–∫
            ))
            
            stats = {
                'message_count': len(history.messages),
                'last_message_date': None,
                'unique_users': 0,
                'avg_messages_per_day': 0,
                'most_active_user': None,
                'recent_activity': False
            }
            
            if history.messages:
                # –ü–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                last_message = history.messages[0]
                stats['last_message_date'] = last_message.date.isoformat()
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 24 —á–∞—Å–∞
                recent_threshold = datetime.now() - timedelta(hours=24)
                stats['recent_activity'] = last_message.date > recent_threshold
                
                # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
                user_message_counts = {}
                for msg in history.messages:
                    if hasattr(msg, 'from_id') and msg.from_id:
                        user_id = msg.from_id.user_id if hasattr(msg.from_id, 'user_id') else str(msg.from_id)
                        user_message_counts[user_id] = user_message_counts.get(user_id, 0) + 1
                
                stats['unique_users'] = len(user_message_counts)
                
                # –°–∞–º—ã–π –∞–∫—Ç–∏–≤–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
                if user_message_counts:
                    most_active_user_id = max(user_message_counts.keys(), 
                                            key=lambda x: user_message_counts[x])
                    stats['most_active_user'] = {
                        'user_id': most_active_user_id,
                        'message_count': user_message_counts[most_active_user_id]
                    }
                
                # –°—Ä–µ–¥–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –¥–µ–Ω—å (–ø—Ä–∏–º–µ—Ä–Ω–∞—è –æ—Ü–µ–Ω–∫–∞)
                if len(history.messages) >= 2:
                    oldest_message = history.messages[-1]
                    time_span = (last_message.date - oldest_message.date).days
                    if time_span > 0:
                        stats['avg_messages_per_day'] = len(history.messages) / time_span
            
            return stats
            
        except Exception as e:
            logger.debug(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Ç–æ–ø–∏–∫–∞ {topic_id}: {e}")
            return {
                'message_count': 0,
                'last_message_date': None,
                'unique_users': 0,
                'avg_messages_per_day': 0,
                'most_active_user': None,
                'recent_activity': False
            }
    
    async def _save_scan_results(self, chat_id: int, user_id: int, 
                               topics: List[Dict[str, Any]], mode: str):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –≤ –ë–î"""
        
        try:
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
            await self.db_manager.save_activity_data(
                chat_id=chat_id,
                user_id=user_id,
                message_count=len(topics)
            )
            
            # –õ–æ–≥–∏—Ä—É–µ–º —É—Å–ø–µ—à–Ω–æ–µ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ
            await self.db_manager.log_command_usage(
                user_id=user_id,
                command='scan',
                success=True,
                chat_type='supergroup' if chat_id < 0 else 'private'
            )
            
            logger.debug(f"‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã: {len(topics)} —Ç–æ–ø–∏–∫–æ–≤")
            
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")
    
    async def get_active_users(self, chat_id: int, user_id: int, days: int = 7) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
        
        try:
            # –ü–æ–∫–∞ –∑–∞–≥–ª—É—à–∫–∞ - –≤ –±—É–¥—É—â–µ–º –±—É–¥–µ—Ç –ø–æ–ª–Ω–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è
            logger.debug(f"üë• –ü–æ–ª—É—á–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è —á–∞—Ç–∞ {chat_id}")
            
            # TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –ø–æ–ª—É—á–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            
            return {
                'success': True,
                'data': {
                    'active_users': [],
                    'total_users': 0,
                    'period_days': days,
                    'chat_id': chat_id
                }
            }
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {e}")
            return {
                'success': False,
                'error': str(e),
                'data': None
            }
    
    async def get_user_activity(self, chat_id: int, user_id: int, target_user_id: int) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        
        try:
            logger.debug(f"üìä –ü–æ–ª—É—á–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {target_user_id} –≤ —á–∞—Ç–µ {chat_id}")
            
            # TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –ø–æ–ª—É—á–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            
            return {
                'success': True,
                'data': {
                    'user_id': target_user_id,
                    'message_count': 0,
                    'topics_participated': [],
                    'last_activity': None,
                    'chat_id': chat_id
                }
            }
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
            return {
                'success': False,
                'error': str(e),
                'data': None
            }
    
    def cleanup_active_scans(self):
        """–û—á–∏—Å—Ç–∫–∞ –∑–∞–≤–∏—Å—à–∏—Ö —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–π"""
        try:
            current_time = datetime.now()
            timeout = timedelta(minutes=10)  # –¢–∞–π–º–∞—É—Ç 10 –º–∏–Ω—É—Ç
            
            expired_scans = [
                key for key, start_time in self.active_scans.items()
                if current_time - start_time > timeout
            ]
            
            for key in expired_scans:
                del self.active_scans[key]
                logger.warning(f"üßπ –£–¥–∞–ª–µ–Ω–æ –∑–∞–≤–∏—Å—à–µ–µ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ: {key}")
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–π: {e}")

# === –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò ===

def format_topic_info(topic: Dict[str, Any]) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç–æ–ø–∏–∫–µ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è"""
    
    title = topic.get('title', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')
    message_count = topic.get('message_count', 0)
    last_activity = topic.get('last_message_date')
    is_closed = topic.get('is_closed', False)
    unique_users = topic.get('unique_users', 0)
    
    status = "üîí –ó–∞–∫—Ä—ã—Ç" if is_closed else "üü¢ –ê–∫—Ç–∏–≤–µ–Ω"
    
    result = f"üìå **{title}**\n"
    result += f"   ID: `{topic.get('id', 'N/A')}`\n"
    result += f"   –°—Ç–∞—Ç—É—Å: {status}\n"
    result += f"   –°–æ–æ–±—â–µ–Ω–∏–π: {message_count}\n"
    
    if unique_users > 0:
        result += f"   –£—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {unique_users}\n"
    
    if last_activity:
        try:
            activity_date = datetime.fromisoformat(last_activity.replace('Z', '+00:00'))
            from utils import format_timespan
            result += f"   –ü–æ—Å–ª–µ–¥–Ω—è—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: {format_timespan(activity_date)}\n"
        except:
            pass
    
    return result

def validate_chat_for_scanning(chat_entity) -> tuple[bool, str]:
    """–í–∞–ª–∏–¥–∞—Ü–∏—è —á–∞—Ç–∞ –¥–ª—è —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–æ–ø–∏–∫–æ–≤"""
    
    if not isinstance(chat_entity, Channel):
        return False, "–ß–∞—Ç –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –∫–∞–Ω–∞–ª–æ–º –∏–ª–∏ —Å—É–ø–µ—Ä–≥—Ä—É–ø–ø–æ–π"
    
    if not getattr(chat_entity, 'forum', False):
        return False, "–°—É–ø–µ—Ä–≥—Ä—É–ø–ø–∞ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç —Ç–æ–ø–∏–∫–∏"
    
    if getattr(chat_entity, 'left', False):
        return False, "–í—ã –Ω–µ —è–≤–ª—è–µ—Ç–µ—Å—å —É—á–∞—Å—Ç–Ω–∏–∫–æ–º —ç—Ç–æ–π –≥—Ä—É–ø–ø—ã"
    
    return True, "–ß–∞—Ç –ø–æ–¥—Ö–æ–¥–∏—Ç –¥–ª—è —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è"

# === –≠–ö–°–ü–û–†–¢ ===

__all__ = [
    'TopicScanner',
    'format_topic_info',
    'validate_chat_for_scanning'
]