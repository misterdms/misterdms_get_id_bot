#!/usr/bin/env python3
"""
–£—Ç–∏–ª–∏—Ç—ã —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–æ–ø–∏–∫–æ–≤ –¥–ª—è Get ID Bot by Mister DMS
Wrapper –¥–ª—è topic_scanner.py —Å–æ–≥–ª–∞—Å–Ω–æ –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–µ
"""

import logging
from typing import List, Dict, Any, Optional
from telethon import TelegramClient

# –ò–º–ø–æ—Ä—Ç –æ—Å–Ω–æ–≤–Ω—ã—Ö –∫–ª–∞—Å—Å–æ–≤ –∏–∑ topic_scanner
from topic_scanner import (
    BaseTopicScanner,
    BotTopicScanner,
    UserTopicScanner,
    TopicScannerFactory,
    get_topic_link,
    is_forum_chat
)

# –ò–º–ø–æ—Ä—Ç —É—Ç–∏–ª–∏—Ç —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
from utils import (
    format_topics_table,
    send_long_message,
    MessageUtils,
    FormatUtils
)

logger = logging.getLogger(__name__)

class ScannerUtils:
    """–£—Ç–∏–ª–∏—Ç—ã –¥–ª—è —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–æ–ø–∏–∫–æ–≤"""
    
    @staticmethod
    async def scan_chat_topics(client: TelegramClient, chat, mode: str = 'bot') -> List[Dict[str, Any]]:
        """
        –°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–æ–ø–∏–∫–æ–≤ —á–∞—Ç–∞
        
        Args:
            client: Telegram –∫–ª–∏–µ–Ω—Ç
            chat: –û–±—ä–µ–∫—Ç —á–∞—Ç–∞
            mode: –†–µ–∂–∏–º —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è ('bot' –∏–ª–∏ 'user')
            
        Returns:
            –°–ø–∏—Å–æ–∫ —Ç–æ–ø–∏–∫–æ–≤
        """
        try:
            scanner = TopicScannerFactory.create_scanner(client, mode)
            topics = await scanner.scan_topics(chat)
            
            logger.info(f"‚úÖ –û—Ç—Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ {len(topics)} —Ç–æ–ø–∏–∫–æ–≤ –≤ —Ä–µ–∂–∏–º–µ {mode}")
            return topics
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–æ–ø–∏–∫–æ–≤: {e}")
            return []
    
    @staticmethod
    async def scan_with_fallback(bot_client: TelegramClient, user_client: Optional[TelegramClient], 
                                chat) -> List[Dict[str, Any]]:
        """
        –°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º fallback
        
        Args:
            bot_client: Bot –∫–ª–∏–µ–Ω—Ç
            user_client: User –∫–ª–∏–µ–Ω—Ç (–º–æ–∂–µ—Ç –±—ã—Ç—å None)
            chat: –û–±—ä–µ–∫—Ç —á–∞—Ç–∞
            
        Returns:
            –°–ø–∏—Å–æ–∫ —Ç–æ–ø–∏–∫–æ–≤
        """
        return await TopicScannerFactory.scan_with_fallback(bot_client, user_client, chat)
    
    @staticmethod
    def format_scan_results(topics: List[Dict[str, Any]], chat, mode: str = 'bot', 
                           show_details: bool = False) -> str:
        """
        –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
        
        Args:
            topics: –°–ø–∏—Å–æ–∫ —Ç–æ–ø–∏–∫–æ–≤
            chat: –û–±—ä–µ–∫—Ç —á–∞—Ç–∞
            mode: –†–µ–∂–∏–º —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
            show_details: –ü–æ–∫–∞–∑–∞—Ç—å –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
            
        Returns:
            –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å—Ç—Ä–æ–∫–∞ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏
        """
        try:
            if not topics:
                return "‚ùå **–¢–æ–ø–∏–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã**\n\n–í–æ–∑–º–æ–∂–Ω–æ, –≥—Ä—É–ø–ø–∞ –Ω–µ —è–≤–ª—è–µ—Ç—Å—è —Ñ–æ—Ä—É–º–æ–º."
            
            # –†–∞–∑–¥–µ–ª—è–µ–º –æ–±—ã—á–Ω—ã–µ —Ç–æ–ø–∏–∫–∏ –∏ —Å–∏—Å—Ç–µ–º–Ω—ã–µ
            regular_topics = [t for t in topics if t.get('id', 0) > 0]
            system_topics = [t for t in topics if t.get('id', 0) <= 0]
            
            # –ó–∞–≥–æ–ª–æ–≤–æ–∫
            mode_emoji = "ü§ñ" if mode == 'bot' else "üë§"
            mode_name = "–†–ï–ñ–ò–ú –ë–û–¢–ê" if mode == 'bot' else "–ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–¨–°–ö–ò–ô –†–ï–ñ–ò–ú"
            
            response = f"{mode_emoji} **–†–ï–ó–£–õ–¨–¢–ê–¢–´ –°–ö–ê–ù–ò–†–û–í–ê–ù–ò–Ø ({mode_name})**\n\n"
            response += f"üè¢ **–ì—Ä—É–ø–ø–∞:** {getattr(chat, 'title', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}\n"
            response += f"üÜî **ID –≥—Ä—É–ø–ø—ã:** `{getattr(chat, 'id', '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}`\n"
            response += f"üìä **–ù–∞–π–¥–µ–Ω–æ —Ç–æ–ø–∏–∫–æ–≤:** {len(regular_topics)}\n"
            response += f"üïí **–í—Ä–µ–º—è:** {FormatUtils.format_time(None)}\n\n"
            
            # –û–±—ã—á–Ω—ã–µ —Ç–æ–ø–∏–∫–∏
            if regular_topics:
                if show_details:
                    response += "üìã **–î–ï–¢–ê–õ–¨–ù–ê–Ø –ò–ù–§–û–†–ú–ê–¶–ò–Ø:**\n\n"
                    for topic in regular_topics:
                        response += f"‚Ä¢ **{topic['title']}** (ID: {topic['id']})\n"
                        response += f"  ‚îî –°–æ–∑–¥–∞—Ç–µ–ª—å: {topic['created_by']}\n"
                        response += f"  ‚îî –°–æ–æ–±—â–µ–Ω–∏–π: {topic.get('messages', '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}\n"
                        response += f"  ‚îî –°—Å—ã–ª–∫–∞: {topic['link']}\n\n"
                else:
                    response += format_topics_table(regular_topics)
            
            # –°–∏—Å—Ç–µ–º–Ω—ã–µ —Ç–æ–ø–∏–∫–∏ (–µ—Å–ª–∏ –µ—Å—Ç—å)
            if system_topics:
                response += "\nüîß **–°–ò–°–¢–ï–ú–ù–ê–Ø –ò–ù–§–û–†–ú–ê–¶–ò–Ø:**\n"
                for topic in system_topics:
                    if topic.get('id', 0) == 0:
                        response += f"‚ö†Ô∏è {topic['title']}\n"
                    elif topic.get('id', 0) == -1:
                        response += f"‚ùå {topic['title']}: {topic.get('error', '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')}\n"
                
                if mode == 'bot':
                    response += "\nüí° **–°–æ–≤–µ—Ç:** –î–ª—è –ø–æ–ª–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ `/switch_mode` ‚Üí –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π —Ä–µ–∂–∏–º"
            
            return response
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤: {e}")
            return f"‚ùå **–û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:** {str(e)}"
    
    @staticmethod
    def create_topics_summary(topics: List[Dict[str, Any]]) -> Dict[str, Any]:
        """
        –°–æ–∑–¥–∞–Ω–∏–µ —Å–≤–æ–¥–∫–∏ –ø–æ —Ç–æ–ø–∏–∫–∞–º
        
        Args:
            topics: –°–ø–∏—Å–æ–∫ —Ç–æ–ø–∏–∫–æ–≤
            
        Returns:
            –°–ª–æ–≤–∞—Ä—å —Å —Å–≤–æ–¥–∫–æ–π
        """
        try:
            regular_topics = [t for t in topics if t.get('id', 0) > 0]
            system_topics = [t for t in topics if t.get('id', 0) <= 0]
            
            # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è
            total_messages = 0
            for topic in regular_topics:
                messages = topic.get('messages', 0)
                if isinstance(messages, (int, float)):
                    total_messages += int(messages)
            
            # –°–æ–∑–¥–∞—Ç–µ–ª–∏
            creators = [t.get('created_by', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ') for t in regular_topics]
            unique_creators = len(set(creators))
            
            return {
                'total_topics': len(topics),
                'regular_topics': len(regular_topics),
                'system_topics': len(system_topics),
                'total_messages': total_messages,
                'unique_creators': unique_creators,
                'has_errors': any(t.get('id', 0) == -1 for t in topics)
            }
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å–≤–æ–¥–∫–∏: {e}")
            return {
                'total_topics': 0,
                'regular_topics': 0,
                'system_topics': 0,
                'total_messages': 0,
                'unique_creators': 0,
                'has_errors': True
            }
    
    @staticmethod
    def validate_chat_for_scanning(chat) -> tuple[bool, str]:
        """
        –í–∞–ª–∏–¥–∞—Ü–∏—è —á–∞—Ç–∞ –¥–ª—è —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
        
        Args:
            chat: –û–±—ä–µ–∫—Ç —á–∞—Ç–∞
            
        Returns:
            –ö–æ—Ä—Ç–µ–∂ (is_valid, error_message)
        """
        try:
            if not chat:
                return False, "‚ùå –ß–∞—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω"
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø —á–∞—Ç–∞
            if not hasattr(chat, 'megagroup') or not chat.megagroup:
                return False, "‚ö†Ô∏è **–†–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –≤ —Å—É–ø–µ—Ä–≥—Ä—É–ø–ø–∞—Ö!**"
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —á–∞—Ç —Ñ–æ—Ä—É–º–æ–º
            if not is_forum_chat(chat):
                return False, "‚ÑπÔ∏è **–ì—Ä—É–ø–ø–∞ –Ω–µ —è–≤–ª—è–µ—Ç—Å—è —Ñ–æ—Ä—É–º–æ–º**\n\n–¢–æ–ø–∏–∫–∏ –¥–æ—Å—Ç—É–ø–Ω—ã —Ç–æ–ª—å–∫–æ –≤ —Ñ–æ—Ä—É–º–∞—Ö."
            
            return True, "‚úÖ –ß–∞—Ç –≥–æ—Ç–æ–≤ –¥–ª—è —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è"
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —á–∞—Ç–∞: {e}")
            return False, f"‚ùå –û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏: {str(e)}"
    
    @staticmethod
    async def send_scan_results(event, topics: List[Dict[str, Any]], chat, mode: str = 'bot'):
        """
        –û—Ç–ø—Ä–∞–≤–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        
        Args:
            event: Telegram —Å–æ–±—ã—Ç–∏–µ
            topics: –°–ø–∏—Å–æ–∫ —Ç–æ–ø–∏–∫–æ–≤
            chat: –û–±—ä–µ–∫—Ç —á–∞—Ç–∞
            mode: –†–µ–∂–∏–º —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
        """
        try:
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
            formatted_results = ScannerUtils.format_scan_results(topics, chat, mode)
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
            await send_long_message(event, formatted_results, parse_mode='markdown')
            
            # –ü–æ–ª—É—á–∞–µ–º —Å–≤–æ–¥–∫—É
            summary = ScannerUtils.create_topics_summary(topics)
            
            # –õ–æ–≥–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            logger.info(f"üì§ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è: {summary['regular_topics']} —Ç–æ–ø–∏–∫–æ–≤")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤: {e}")
            await MessageUtils.smart_reply(event, 
                f"‚ùå **–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤:** {str(e)}")

# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
async def scan_chat_topics(client: TelegramClient, chat, mode: str = 'bot') -> List[Dict[str, Any]]:
    """–û–±—Ä–∞—Ç–Ω–∞—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å: —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–æ–ø–∏–∫–æ–≤"""
    return await ScannerUtils.scan_chat_topics(client, chat, mode)

def format_scan_results(topics: List[Dict[str, Any]], chat, mode: str = 'bot') -> str:
    """–û–±—Ä–∞—Ç–Ω–∞—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å: —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤"""
    return ScannerUtils.format_scan_results(topics, chat, mode)

async def send_scan_results(event, topics: List[Dict[str, Any]], chat, mode: str = 'bot'):
    """–û–±—Ä–∞—Ç–Ω–∞—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å: –æ—Ç–ø—Ä–∞–≤–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤"""
    await ScannerUtils.send_scan_results(event, topics, chat, mode)

# –≠–∫—Å–ø–æ—Ä—Ç
__all__ = [
    'ScannerUtils',
    'scan_chat_topics',
    'format_scan_results',
    'send_scan_results',
    # –†–µ—ç–∫—Å–ø–æ—Ä—Ç –∏–∑ topic_scanner
    'BaseTopicScanner',
    'BotTopicScanner',
    'UserTopicScanner',
    'TopicScannerFactory',
    'get_topic_link',
    'is_forum_chat'
]