#!/usr/bin/env python3
"""
–°–∏—Å—Ç–µ–º–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –∏ –ª–∏–º–∏—Ç–æ–≤ –¥–ª—è Get ID Bot by Mister DMS
–í–∫–ª—é—á–∞–µ—Ç: –ø—Ä–æ–≤–µ—Ä–∫—É –ª–∏–º–∏—Ç–æ–≤, blacklist/whitelist, –∑–∞—â–∏—Ç—É –æ—Ç –∑–ª–æ—É–ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–π
"""

import logging
import time
from datetime import datetime, timedelta
from typing import Dict, List, Optional, Tuple, Set
from dataclasses import dataclass
from collections import defaultdict

from config import (
    BLACKLIST_USERS, TRUSTED_USERS, WHITELIST_ONLY_MODE,
    MAX_REQUESTS_PER_USER_DAY, COOLDOWN_BETWEEN_USERS,
    MAX_USERS_PER_HOUR, MAX_DAILY_REQUESTS, 
    DEVELOPMENT_MODE, ALERT_ADMIN_IDS
)

logger = logging.getLogger(__name__)

@dataclass
class SecurityEvent:
    """–°–æ–±—ã—Ç–∏–µ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏"""
    user_id: int
    event_type: str
    timestamp: datetime
    details: str
    severity: str = 'info'  # info, warning, critical

@dataclass
class RateLimitInfo:
    """–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ª–∏–º–∏—Ç–∞—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    user_id: int
    requests_today: int
    last_request: datetime
    cooldown_until: Optional[datetime]
    daily_limit: int
    is_trusted: bool

class SecurityManager:
    """–ú–µ–Ω–µ–¥–∂–µ—Ä –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –∏ –ª–∏–º–∏—Ç–æ–≤"""
    
    def __init__(self):
        # –°—á–µ—Ç—á–∏–∫–∏ –∑–∞–ø—Ä–æ—Å–æ–≤ –ø–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
        self.user_requests: Dict[int, List[datetime]] = defaultdict(list)
        self.last_request_time: Dict[int, datetime] = {}
        
        # –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –∏ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è
        self.blocked_users: Set[int] = set()
        self.temporary_blocks: Dict[int, datetime] = {}
        
        # –°–æ–±—ã—Ç–∏—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
        self.security_events: List[SecurityEvent] = []
        self.max_events = 1000
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        self.stats = {
            'total_requests': 0,
            'blocked_requests': 0,
            'rate_limited_requests': 0,
            'security_violations': 0,
            'new_users_today': 0
        }
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è blacklist
        self._init_blacklist()
        
        logger.info("üõ°Ô∏è SecurityManager –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
    
    def _init_blacklist(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–ø–∏—Å–∫–∞ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
        try:
            for user_str in BLACKLIST_USERS:
                if user_str.strip().isdigit():
                    user_id = int(user_str.strip())
                    self.blocked_users.add(user_id)
                    logger.info(f"üö´ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –¥–æ–±–∞–≤–ª–µ–Ω –≤ blacklist")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ blacklist: {e}")
    
    def is_user_allowed(self, user_id: int) -> Tuple[bool, str]:
        """
        –ì–ª–∞–≤–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞: —Ä–∞–∑—Ä–µ—à–µ–Ω–æ –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –¥–µ–ª–∞—Ç—å –∑–∞–ø—Ä–æ—Å—ã
        
        Returns:
            (is_allowed: bool, reason: str)
        """
        try:
            self.stats['total_requests'] += 1
            
            # 1. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–∂–∏–º–∞ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
            if DEVELOPMENT_MODE and not self.is_trusted_user(user_id):
                self._log_security_event(user_id, 'dev_mode_block', 
                                        '–ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –≤ —Ä–µ–∂–∏–º–µ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏', 'info')
                return False, "üîß **–†–µ–∂–∏–º —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏**\n\n–ë–æ—Ç –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–æ–≤—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π."
            
            # 2. –ü—Ä–æ–≤–µ—Ä–∫–∞ blacklist
            if self._is_blacklisted(user_id):
                self.stats['blocked_requests'] += 1
                self._log_security_event(user_id, 'blacklist_hit', 
                                        '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ blacklist', 'warning')
                return False, "‚ùå **–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω**\n\n–í—ã –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã."
            
            # 3. –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω–æ–π –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏
            if self._is_temporarily_blocked(user_id):
                self.stats['rate_limited_requests'] += 1
                return False, "‚è∞ **–í—Ä–µ–º–µ–Ω–Ω–∞—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∞**\n\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
            
            # 4. –ü—Ä–æ–≤–µ—Ä–∫–∞ whitelist —Ä–µ–∂–∏–º–∞
            if WHITELIST_ONLY_MODE and not self.is_trusted_user(user_id):
                self._log_security_event(user_id, 'whitelist_mode_block', 
                                        '–ù–µ –≤ whitelist –ø—Ä–∏ whitelist —Ä–µ–∂–∏–º–µ', 'info')
                return False, "‚ö†Ô∏è **–û–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω—ã–π –¥–æ—Å—Ç—É–ø**\n\n–ë–æ—Ç –≤ —Ä–µ–∂–∏–º–µ whitelist."
            
            # 5. –ü—Ä–æ–≤–µ—Ä–∫–∞ –≥–ª–æ–±–∞–ª—å–Ω—ã—Ö –ª–∏–º–∏—Ç–æ–≤
            if not self._check_global_limits():
                self.stats['rate_limited_requests'] += 1
                return False, "‚è∞ **–í—ã—Å–æ–∫–∞—è –Ω–∞–≥—Ä—É–∑–∫–∞**\n\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —á–µ—Ä–µ–∑ –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç."
            
            # 6. –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–Ω–µ–≤–Ω–æ–≥–æ –ª–∏–º–∏—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            if not self._check_daily_limit(user_id):
                self.stats['rate_limited_requests'] += 1
                limit = self._get_user_daily_limit(user_id)
                return False, f"‚è∞ **–î–Ω–µ–≤–Ω–æ–π –ª–∏–º–∏—Ç**\n\n–í—ã –ø—Ä–µ–≤—ã—Å–∏–ª–∏ –ª–∏–º–∏—Ç ({limit} –∑–∞–ø—Ä–æ—Å–æ–≤/–¥–µ–Ω—å).\n–õ–∏–º–∏—Ç –æ–±–Ω–æ–≤–∏—Ç—Å—è –∑–∞–≤—Ç—Ä–∞ –≤ 00:00."
            
            # 7. –ü—Ä–æ–≤–µ—Ä–∫–∞ cooldown
            if not self._check_cooldown(user_id):
                self.stats['rate_limited_requests'] += 1
                remaining = self._get_cooldown_remaining(user_id)
                return False, f"üïê **–ü–∞—É–∑–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏**\n\n–ü–æ–¥–æ–∂–¥–∏—Ç–µ {remaining} —Å–µ–∫—É–Ω–¥."
            
            # –í—Å–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ–π–¥–µ–Ω—ã
            return True, "‚úÖ –î–æ—Å—Ç—É–ø —Ä–∞–∑—Ä–µ—à–µ–Ω"
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –¥–ª—è {user_id}: {e}")
            return False, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏"
    
    def record_request(self, user_id: int, command: str = "", chat_type: str = "private"):
        """–ó–∞–ø–∏—Å–∞—Ç—å –∑–∞–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        try:
            now = datetime.now()
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –≤ –∏—Å—Ç–æ—Ä–∏—é
            self.user_requests[user_id].append(now)
            self.last_request_time[user_id] = now
            
            # –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ –∑–∞–ø—Ä–æ—Å—ã (–±–æ–ª–µ–µ —Å—É—Ç–æ–∫)
            day_ago = now - timedelta(days=1)
            self.user_requests[user_id] = [
                req_time for req_time in self.user_requests[user_id] 
                if req_time >= day_ago
            ]
            
            # –õ–æ–≥–∏—Ä—É–µ–º –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—É—é –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
            requests_last_hour = len([
                req for req in self.user_requests[user_id] 
                if req >= now - timedelta(hours=1)
            ])
            
            if requests_last_hour > 50 and not self.is_trusted_user(user_id):
                self._log_security_event(user_id, 'suspicious_activity', 
                                        f'{requests_last_hour} –∑–∞–ø—Ä–æ—Å–æ–≤ –∑–∞ —á–∞—Å', 'warning')
                # –í—Ä–µ–º–µ–Ω–Ω–∞—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –Ω–∞ 1 —á–∞—Å
                self.temporary_blocks[user_id] = now + timedelta(hours=1)
            
            logger.debug(f"üìä –ó–∞–ø—Ä–æ—Å {command} –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –∑–∞–ø–∏—Å–∞–Ω ({chat_type})")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ –∑–∞–ø—Ä–æ—Å–∞ –¥–ª—è {user_id}: {e}")
    
    def is_trusted_user(self, user_id: int) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ–≤–µ—Ä–µ–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        try:
            return str(user_id) in TRUSTED_USERS
        except:
            return False
    
    def get_user_limits_info(self, user_id: int) -> RateLimitInfo:
        """–ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ª–∏–º–∏—Ç–∞—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        now = datetime.now()
        day_start = now.replace(hour=0, minute=0, second=0, microsecond=0)
        
        # –°—á–∏—Ç–∞–µ–º –∑–∞–ø—Ä–æ—Å—ã –∑–∞ —Å–µ–≥–æ–¥–Ω—è
        requests_today = len([
            req for req in self.user_requests.get(user_id, [])
            if req >= day_start
        ])
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –¥–Ω–µ–≤–Ω–æ–π –ª–∏–º–∏—Ç
        daily_limit = self._get_user_daily_limit(user_id)
        
        # –í—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
        last_request = self.last_request_time.get(user_id)
        
        # –í—Ä–µ–º—è –æ–∫–æ–Ω—á–∞–Ω–∏—è cooldown
        cooldown_until = None
        if last_request:
            cooldown_end = last_request + timedelta(seconds=COOLDOWN_BETWEEN_USERS)
            if cooldown_end > now:
                cooldown_until = cooldown_end
        
        return RateLimitInfo(
            user_id=user_id,
            requests_today=requests_today,
            last_request=last_request,
            cooldown_until=cooldown_until,
            daily_limit=daily_limit,
            is_trusted=self.is_trusted_user(user_id)
        )
    
    def get_security_status(self, user_id: Optional[int] = None) -> Dict:
        """–ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç—É—Å –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏"""
        status = {
            'timestamp': datetime.now().isoformat(),
            'global_stats': self.stats.copy(),
            'active_blocks': len(self.temporary_blocks),
            'blacklisted_users': len(self.blocked_users),
            'trusted_users': len(TRUSTED_USERS),
            'development_mode': DEVELOPMENT_MODE,
            'whitelist_only_mode': WHITELIST_ONLY_MODE
        }
        
        if user_id:
            user_limits = self.get_user_limits_info(user_id)
            status['user_limits'] = {
                'requests_today': user_limits.requests_today,
                'daily_limit': user_limits.daily_limit,
                'is_trusted': user_limits.is_trusted,
                'cooldown_remaining': (
                    (user_limits.cooldown_until - datetime.now()).total_seconds()
                    if user_limits.cooldown_until else 0
                ),
                'is_blocked': self._is_blacklisted(user_id),
                'is_temp_blocked': self._is_temporarily_blocked(user_id)
            }
        
        return status
    
    def get_recent_security_events(self, limit: int = 50, user_id: Optional[int] = None) -> List[Dict]:
        """–ü–æ–ª—É—á–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏"""
        events = self.security_events[-limit:] if not user_id else [
            event for event in self.security_events[-limit*2:] 
            if event.user_id == user_id
        ]
        
        return [
            {
                'user_id': event.user_id,
                'event_type': event.event_type,
                'timestamp': event.timestamp.isoformat(),
                'details': event.details,
                'severity': event.severity
            }
            for event in events[-limit:]
        ]
    
    # –ü—Ä–∏–≤–∞—Ç–Ω—ã–µ –º–µ—Ç–æ–¥—ã
    
    def _is_blacklisted(self, user_id: int) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ blacklist"""
        return user_id in self.blocked_users
    
    def _is_temporarily_blocked(self, user_id: int) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω–æ–π –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏"""
        if user_id in self.temporary_blocks:
            if datetime.now() >= self.temporary_blocks[user_id]:
                # –í—Ä–µ–º—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –∏—Å—Ç–µ–∫–ª–æ
                del self.temporary_blocks[user_id]
                return False
            return True
        return False
    
    def _check_global_limits(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –≥–ª–æ–±–∞–ª—å–Ω—ã—Ö –ª–∏–º–∏—Ç–æ–≤ —Å–∏—Å—Ç–µ–º—ã"""
        now = datetime.now()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø—Ä–æ—Å–æ–≤ –∑–∞ –¥–µ–Ω—å
        day_start = now.replace(hour=0, minute=0, second=0, microsecond=0)
        total_requests_today = sum(
            len([req for req in requests if req >= day_start])
            for requests in self.user_requests.values()
        )
        
        if total_requests_today > MAX_DAILY_REQUESTS:
            self._log_security_event(0, 'global_daily_limit', 
                                   f'{total_requests_today} –∑–∞–ø—Ä–æ—Å–æ–≤ –∑–∞ –¥–µ–Ω—å', 'warning')
            return False
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∑–∞ —á–∞—Å
        hour_ago = now - timedelta(hours=1)
        new_users_hour = len([
            user_id for user_id, requests in self.user_requests.items()
            if requests and requests[0] >= hour_ago  # –ü–µ—Ä–≤—ã–π –∑–∞–ø—Ä–æ—Å –≤ –ø–æ—Å–ª–µ–¥–Ω–∏–π —á–∞—Å
        ])
        
        if new_users_hour > MAX_USERS_PER_HOUR:
            self._log_security_event(0, 'new_users_limit', 
                                   f'{new_users_hour} –Ω–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∑–∞ —á–∞—Å', 'warning')
            return False
        
        return True
    
    def _check_daily_limit(self, user_id: int) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–Ω–µ–≤–Ω–æ–≥–æ –ª–∏–º–∏—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        if self.is_trusted_user(user_id):
            return True  # –î–æ–≤–µ—Ä–µ–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –±–µ–∑ –ª–∏–º–∏—Ç–æ–≤
        
        now = datetime.now()
        day_start = now.replace(hour=0, minute=0, second=0, microsecond=0)
        
        requests_today = len([
            req for req in self.user_requests.get(user_id, [])
            if req >= day_start
        ])
        
        daily_limit = self._get_user_daily_limit(user_id)
        return requests_today < daily_limit
    
    def _check_cooldown(self, user_id: int) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ cooldown –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏"""
        if self.is_trusted_user(user_id):
            return True  # –î–æ–≤–µ—Ä–µ–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –±–µ–∑ cooldown
        
        if user_id in self.last_request_time:
            time_diff = (datetime.now() - self.last_request_time[user_id]).total_seconds()
            return time_diff >= COOLDOWN_BETWEEN_USERS
        return True
    
    def _get_user_daily_limit(self, user_id: int) -> int:
        """–ü–æ–ª—É—á–∏—Ç—å –¥–Ω–µ–≤–Ω–æ–π –ª–∏–º–∏—Ç –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        if self.is_trusted_user(user_id):
            return 999999  # –ü—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏ –Ω–µ–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ
        
        # –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        # –ù–∞–ø—Ä–∏–º–µ—Ä, –Ω–æ–≤—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ - –º–µ–Ω—å—à–∏–π –ª–∏–º–∏—Ç
        return MAX_REQUESTS_PER_USER_DAY
    
    def _get_cooldown_remaining(self, user_id: int) -> int:
        """–ü–æ–ª—É—á–∏—Ç—å –æ—Å—Ç–∞–≤—à–µ–µ—Å—è –≤—Ä–µ–º—è cooldown –≤ —Å–µ–∫—É–Ω–¥–∞—Ö"""
        if user_id in self.last_request_time:
            elapsed = (datetime.now() - self.last_request_time[user_id]).total_seconds()
            remaining = max(0, COOLDOWN_BETWEEN_USERS - elapsed)
            return int(remaining)
        return 0
    
    def _log_security_event(self, user_id: int, event_type: str, details: str, severity: str = 'info'):
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏"""
        event = SecurityEvent(
            user_id=user_id,
            event_type=event_type,
            timestamp=datetime.now(),
            details=details,
            severity=severity
        )
        
        self.security_events.append(event)
        
        # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä —Å–ø–∏—Å–∫–∞ —Å–æ–±—ã—Ç–∏–π
        if len(self.security_events) > self.max_events:
            self.security_events = self.security_events[-self.max_events//2:]
        
        # –õ–æ–≥–∏—Ä—É–µ–º –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å–µ—Ä—å–µ–∑–Ω–æ—Å—Ç–∏
        if severity == 'critical':
            logger.error(f"üö® SECURITY: {event_type} | User {user_id} | {details}")
            self.stats['security_violations'] += 1
        elif severity == 'warning':
            logger.warning(f"‚ö†Ô∏è SECURITY: {event_type} | User {user_id} | {details}")
        else:
            logger.debug(f"üõ°Ô∏è SECURITY: {event_type} | User {user_id} | {details}")
    
    def add_to_blacklist(self, user_id: int, reason: str = "Manual block") -> bool:
        """–î–æ–±–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ blacklist"""
        try:
            self.blocked_users.add(user_id)
            self._log_security_event(user_id, 'manual_blacklist', reason, 'warning')
            logger.info(f"üö´ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –¥–æ–±–∞–≤–ª–µ–Ω –≤ blacklist: {reason}")
            return True
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ blacklist {user_id}: {e}")
            return False
    
    def remove_from_blacklist(self, user_id: int, reason: str = "Manual unblock") -> bool:
        """–£–¥–∞–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ blacklist"""
        try:
            if user_id in self.blocked_users:
                self.blocked_users.remove(user_id)
                self._log_security_event(user_id, 'manual_unblock', reason, 'info')
                logger.info(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} —É–¥–∞–ª–µ–Ω –∏–∑ blacklist: {reason}")
                return True
            return False
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∏–∑ blacklist {user_id}: {e}")
            return False
    
    def cleanup_old_data(self) -> int:
        """–û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –¥–∞–Ω–Ω—ã—Ö"""
        cleaned = 0
        now = datetime.now()
        
        try:
            # –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ –∑–∞–ø—Ä–æ—Å—ã (–±–æ–ª–µ–µ 7 –¥–Ω–µ–π)
            week_ago = now - timedelta(days=7)
            for user_id in list(self.user_requests.keys()):
                old_count = len(self.user_requests[user_id])
                self.user_requests[user_id] = [
                    req for req in self.user_requests[user_id] 
                    if req >= week_ago
                ]
                cleaned += old_count - len(self.user_requests[user_id])
                
                # –£–¥–∞–ª—è–µ–º –ø—É—Å—Ç—ã–µ –∑–∞–ø–∏—Å–∏
                if not self.user_requests[user_id]:
                    del self.user_requests[user_id]
            
            # –û—á–∏—â–∞–µ–º –∏—Å—Ç–µ–∫—à–∏–µ –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏
            expired_blocks = [
                user_id for user_id, block_until in self.temporary_blocks.items()
                if now >= block_until
            ]
            for user_id in expired_blocks:
                del self.temporary_blocks[user_id]
                cleaned += 1
            
            # –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ —Å–æ–±—ã—Ç–∏—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ (–±–æ–ª–µ–µ 30 –¥–Ω–µ–π)
            month_ago = now - timedelta(days=30)
            old_events_count = len(self.security_events)
            self.security_events = [
                event for event in self.security_events
                if event.timestamp >= month_ago
            ]
            cleaned += old_events_count - len(self.security_events)
            
            if cleaned > 0:
                logger.info(f"üßπ –û—á–∏—â–µ–Ω–æ {cleaned} —Å—Ç–∞—Ä—ã—Ö –∑–∞–ø–∏—Å–µ–π –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏")
            
            return cleaned
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏: {e}")
            return 0

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
security_manager = SecurityManager()

# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞
def is_user_allowed(user_id: int) -> Tuple[bool, str]:
    """–ë—ã—Å—Ç—Ä–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    return security_manager.is_user_allowed(user_id)

def record_user_request(user_id: int, command: str = "", chat_type: str = "private"):
    """–ë—ã—Å—Ç—Ä–∞—è –∑–∞–ø–∏—Å—å –∑–∞–ø—Ä–æ—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    security_manager.record_request(user_id, command, chat_type)

def is_trusted_user(user_id: int) -> bool:
    """–ë—ã—Å—Ç—Ä–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ–≤–µ—Ä–µ–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    return security_manager.is_trusted_user(user_id)

def get_user_limits(user_id: int) -> RateLimitInfo:
    """–ë—ã—Å—Ç—Ä–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ª–∏–º–∏—Ç–∞—Ö"""
    return security_manager.get_user_limits_info(user_id)