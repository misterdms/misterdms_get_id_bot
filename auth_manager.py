#!/usr/bin/env python3
"""
–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–µ–π –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–º–∏ —Å–µ—Å—Å–∏—è–º–∏
–í–∫–ª—é—á–∞–µ—Ç —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏–µ credentials –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ Telethon —Å–µ—Å—Å–∏—è–º–∏
–ò–°–ü–†–ê–í–õ–ï–ù–û: –£–ª—É—á—à–µ–Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫, –∏—Å–ø—Ä–∞–≤–ª–µ–Ω—ã –∏–º–ø–æ—Ä—Ç—ã, –¥–æ–±–∞–≤–ª–µ–Ω–∞ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å database
"""

import re
import os
import asyncio
import logging
from typing import Dict, Optional, Tuple, Any
from datetime import datetime, timedelta
from telethon import TelegramClient
from telethon.errors import AuthKeyError, ApiIdInvalidError, PhoneNumberInvalidError, FloodWaitError
from cryptography.fernet import Fernet
import base64
import hashlib

from config import (
    ENCRYPTION_KEY, SALT, MAX_CONCURRENT_SESSIONS, 
    SESSION_TIMEOUT_DAYS
)

logger = logging.getLogger(__name__)

# –ü–∞—Ç—Ç–µ—Ä–Ω—ã –≤–∞–ª–∏–¥–∞—Ü–∏–∏ (–≤—ã–Ω–µ—Å–µ–Ω—ã –∏–∑ config.py –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏)
API_ID_PATTERN = r'^\d{7,8}$'  # 7-8 —Ü–∏—Ñ—Ä
API_HASH_PATTERN = r'^[a-f0-9]{32}$'  # 32 —Å–∏–º–≤–æ–ª–∞ hex

class AuthenticationManager:
    """–ú–µ–Ω–µ–¥–∂–µ—Ä –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö —Å–µ—Å—Å–∏–π"""
    
    def __init__(self):
        self.active_sessions: Dict[int, TelegramClient] = {}
        self.session_locks: Dict[int, asyncio.Lock] = {}
        self.cipher = self._init_cipher()
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥
        self.session_stats = {
            'created': 0,
            'failed': 0,
            'expired': 0,
            'active': 0
        }
        
    def _init_cipher(self) -> Fernet:
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å—é"""
        try:
            # –°–æ–∑–¥–∞–µ–º –∫–ª—é—á –Ω–∞ –æ—Å–Ω–æ–≤–µ ENCRYPTION_KEY –∏ SALT
            key_material = (ENCRYPTION_KEY + SALT).encode()
            key = base64.urlsafe_b64encode(hashlib.sha256(key_material).digest())
            return Fernet(key)
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è: {e}")
            raise
    
    def encrypt_data(self, data: str) -> str:
        """–ó–∞—à–∏—Ñ—Ä–æ–≤–∞—Ç—å –¥–∞–Ω–Ω—ã–µ —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫"""
        try:
            if not data:
                raise ValueError("–î–∞–Ω–Ω—ã–µ –¥–ª—è —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è –Ω–µ –º–æ–≥—É—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º–∏")
            return self.cipher.encrypt(data.encode()).decode()
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö: {e}")
            raise
    
    def decrypt_data(self, encrypted_data: str) -> str:
        """–†–∞—Å—à–∏—Ñ—Ä–æ–≤–∞—Ç—å –¥–∞–Ω–Ω—ã–µ —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫"""
        try:
            if not encrypted_data:
                raise ValueError("–ó–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –Ω–µ –º–æ–≥—É—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º–∏")
            return self.cipher.decrypt(encrypted_data.encode()).decode()
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∏ –¥–∞–Ω–Ω—ã—Ö: {e}")
            raise
    
    def validate_api_credentials(self, api_id: str, api_hash: str) -> Tuple[bool, str]:
        """–í–∞–ª–∏–¥–∞—Ü–∏—è API credentials —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–æ–π"""
        try:
            # –û—á–∏—Å—Ç–∫–∞ –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
            api_id = api_id.strip()
            api_hash = api_hash.strip().lower()
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ API_ID
            if not re.match(API_ID_PATTERN, api_id):
                return False, "‚ùå API_ID –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å 7-8 —Ü–∏—Ñ—Ä"
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ API_HASH
            if not re.match(API_HASH_PATTERN, api_hash):
                return False, "‚ùå API_HASH –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å 32 —Å–∏–º–≤–æ–ª–∞ (hex)"
            
            # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏
            try:
                api_id_int = int(api_id)
                if api_id_int <= 0:
                    return False, "‚ùå API_ID –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º"
            except ValueError:
                return False, "‚ùå API_ID –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º"
            
            return True, "‚úÖ Credentials –≤–∞–ª–∏–¥–Ω—ã"
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ credentials: {e}")
            return False, f"‚ùå –û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏: {str(e)}"
    
    async def save_user_credentials(self, user_id: int, api_id: str, api_hash: str) -> Tuple[bool, str]:
        """–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω—ã–µ credentials –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        try:
            logger.info(f"üîê –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ credentials –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
            
            # –í–∞–ª–∏–¥–∞—Ü–∏—è
            is_valid, message = self.validate_api_credentials(api_id, api_hash)
            if not is_valid:
                return False, message
            
            # –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è —Å —Ç–∞–π–º–∞—É—Ç–æ–º
            is_connected, test_message = await self.test_connection(api_id, api_hash)
            if not is_connected:
                return False, f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è: {test_message}"
            
            # –®–∏—Ñ—Ä–æ–≤–∞–Ω–∏–µ
            api_id_encrypted = self.encrypt_data(api_id.strip())
            api_hash_encrypted = self.encrypt_data(api_hash.strip())
            session_file = f"user_session_{user_id}"
            
            # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –ë–î (–∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä—è–º–æ–π –∏–º–ø–æ—Ä—Ç –∑–¥–µ—Å—å –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è —Ü–∏–∫–ª–∏—á–µ—Å–∫–∏—Ö –∏–º–ø–æ—Ä—Ç–æ–≤)
            try:
                from database import db_manager
                await db_manager.save_user_credentials(
                    user_id, api_id_encrypted, api_hash_encrypted, session_file
                )
            except ImportError:
                logger.warning("‚ö†Ô∏è database module –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, credentials –Ω–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ –ë–î")
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ –ë–î: {e}")
                return False, f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö: {str(e)}"
            
            self.session_stats['created'] += 1
            logger.info(f"‚úÖ Credentials —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
            return True, "‚úÖ Credentials —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –∏ –ø—Ä–æ–≤–µ—Ä–µ–Ω—ã!"
            
        except Exception as e:
            self.session_stats['failed'] += 1
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è credentials –¥–ª—è {user_id}: {e}")
            return False, f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: {str(e)}"
    
    async def test_connection(self, api_id: str, api_hash: str, timeout: int = 15) -> Tuple[bool, str]:
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è —Å credentials —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫"""
        temp_session = f"temp_test_{datetime.now().timestamp()}"
        client = None
        
        try:
            logger.debug(f"üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è —Å API_ID: {api_id}")
            
            # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π –∫–ª–∏–µ–Ω—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
            client = TelegramClient(
                temp_session, 
                int(api_id), 
                api_hash,
                device_model="Topics Scanner Bot Test",
                system_version="1.0",
                app_version="4.1.0",
                timeout=timeout
            )
            
            # –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è —Å —Ç–∞–π–º–∞—É—Ç–æ–º
            try:
                await asyncio.wait_for(client.connect(), timeout=timeout)
            except asyncio.TimeoutError:
                return False, "–¢–∞–π–º–∞—É—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è"
            
            if not await client.is_user_authorized():
                # –î–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è credentials —ç—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ - –≥–ª–∞–≤–Ω–æ–µ —á—Ç–æ API credentials –≤–∞–ª–∏–¥–Ω—ã
                logger.debug("‚úÖ API credentials –≤–∞–ª–∏–¥–Ω—ã (–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω)")
                return True, "‚úÖ API credentials –≤–∞–ª–∏–¥–Ω—ã"
            else:
                # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω - –æ—Ç–ª–∏—á–Ω–æ!
                logger.debug("‚úÖ API credentials –≤–∞–ª–∏–¥–Ω—ã (–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω)")
                return True, "‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ"
                
        except ApiIdInvalidError:
            return False, "–ù–µ–≤–µ—Ä–Ω—ã–π API_ID"
        except FloodWaitError as e:
            return False, f"–°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –ø–æ–ø—ã—Ç–æ–∫, –ø–æ–¥–æ–∂–¥–∏—Ç–µ {e.seconds} —Å–µ–∫—É–Ω–¥"
        except Exception as e:
            logger.debug(f"–û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {e}")
            return False, f"–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {str(e)}"
        finally:
            # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤
            if client:
                try:
                    if client.is_connected():
                        await asyncio.wait_for(client.disconnect(), timeout=5)
                except Exception as e:
                    logger.debug(f"–û—à–∏–±–∫–∞ –æ—Ç–∫–ª—é—á–µ–Ω–∏—è —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞: {e}")
            
            # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π session —Ñ–∞–π–ª
            try:
                session_files = [
                    f"{temp_session}.session",
                    f"{temp_session}.session-journal"
                ]
                for session_file in session_files:
                    if os.path.exists(session_file):
                        os.remove(session_file)
            except Exception as e:
                logger.debug(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞ —Å–µ—Å—Å–∏–∏: {e}")
    
    async def get_user_session(self, user_id: int) -> Optional[TelegramClient]:
        """–ü–æ–ª—É—á–∏—Ç—å –∞–∫—Ç–∏–≤–Ω—É—é —Å–µ—Å—Å–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π"""
        try:
            # –ï—Å–ª–∏ —Å–µ—Å—Å–∏—è —É–∂–µ –∞–∫—Ç–∏–≤–Ω–∞, –ø—Ä–æ–≤–µ—Ä—è–µ–º –µ—ë —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            if user_id in self.active_sessions:
                client = self.active_sessions[user_id]
                try:
                    if client.is_connected():
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–µ—Å—Å–∏—è –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Ä–∞–±–æ—Ç–∞–µ—Ç
                        await asyncio.wait_for(client.get_me(), timeout=5)
                        return client
                    else:
                        logger.warning(f"‚ö†Ô∏è –°–µ—Å—Å–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –æ—Ç–∫–ª—é—á–µ–Ω–∞")
                        await self.close_user_session(user_id)
                except Exception as e:
                    logger.warning(f"‚ö†Ô∏è –ü—Ä–æ–±–ª–µ–º–∞ —Å —Å–µ—Å—Å–∏–µ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
                    await self.close_user_session(user_id)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–µ—Å—Å–∏–π
            if len(self.active_sessions) >= MAX_CONCURRENT_SESSIONS:
                logger.warning(f"‚ö†Ô∏è –ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç —Å–µ—Å—Å–∏–π ({MAX_CONCURRENT_SESSIONS})")
                return None
            
            # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é —Å–µ—Å—Å–∏—é
            return await self.create_user_session(user_id)
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–µ—Å—Å–∏–∏ –¥–ª—è {user_id}: {e}")
            return None
    
    async def create_user_session(self, user_id: int) -> Optional[TelegramClient]:
        """–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫—É—é —Å–µ—Å—Å–∏—é —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å—é"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º –±–ª–æ–∫–∏—Ä–æ–≤–∫—É –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            if user_id not in self.session_locks:
                self.session_locks[user_id] = asyncio.Lock()
            
            async with self.session_locks[user_id]:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —Å–æ–∑–¥–∞–Ω–∞ –ª–∏ —Å–µ—Å—Å–∏—è —É–∂–µ (double-check)
                if user_id in self.active_sessions:
                    return self.active_sessions[user_id]
                
                logger.info(f"üîÑ –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π —Å–µ—Å—Å–∏–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
                
                # –ü–æ–ª—É—á–∞–µ–º credentials –∏–∑ –ë–î
                try:
                    from database import db_manager
                    user_data = await db_manager.get_user(user_id)
                except ImportError:
                    logger.error("‚ùå database module –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
                    return None
                except Exception as e:
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –ë–î: {e}")
                    return None
                
                if not user_data or user_data['mode'] != 'user':
                    logger.warning(f"‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –Ω–µ –≤ user —Ä–µ–∂–∏–º–µ")
                    return None
                
                if not user_data['api_id_encrypted'] or not user_data['api_hash_encrypted']:
                    logger.warning(f"‚ö†Ô∏è –ù–µ—Ç credentials –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
                    return None
                
                # –†–∞—Å—à–∏—Ñ—Ä–æ–≤—ã–≤–∞–µ–º credentials
                try:
                    api_id = int(self.decrypt_data(user_data['api_id_encrypted']))
                    api_hash = self.decrypt_data(user_data['api_hash_encrypted'])
                    session_file = user_data['session_file'] or f"user_session_{user_id}"
                except Exception as e:
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∏ credentials –¥–ª—è {user_id}: {e}")
                    try:
                        await db_manager.update_user_status(user_id, 'error')
                    except:
                        pass
                    return None
                
                # –°–æ–∑–¥–∞–µ–º –∫–ª–∏–µ–Ω—Ç
                client = TelegramClient(
                    session_file,
                    api_id,
                    api_hash,
                    device_model="Topics Scanner Bot",
                    system_version="1.0",
                    app_version="4.1.0",
                    timeout=30
                )
                
                # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è —Å —Ç–∞–π–º–∞—É—Ç–æ–º
                try:
                    await asyncio.wait_for(client.connect(), timeout=30)
                except asyncio.TimeoutError:
                    logger.error(f"‚ùå –¢–∞–π–º–∞—É—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
                    await client.disconnect()
                    return None
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é
                if not await client.is_user_authorized():
                    logger.error(f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω")
                    await client.disconnect()
                    try:
                        await db_manager.update_user_status(user_id, 'error')
                    except:
                        pass
                    return None
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∞–∫—Ç–∏–≤–Ω—É—é —Å–µ—Å—Å–∏—é
                self.active_sessions[user_id] = client
                self.session_stats['active'] = len(self.active_sessions)
                
                try:
                    await db_manager.update_user_status(user_id, 'active')
                except:
                    pass
                
                logger.info(f"‚úÖ –°–æ–∑–¥–∞–Ω–∞ —Å–µ—Å—Å–∏—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
                return client
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å–µ—Å—Å–∏–∏ –¥–ª—è {user_id}: {e}")
            try:
                from database import db_manager
                await db_manager.update_user_status(user_id, 'error')
            except:
                pass
            return None
    
    async def close_user_session(self, user_id: int) -> bool:
        """–ó–∞–∫—Ä—ã—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫—É—é —Å–µ—Å—Å–∏—é —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –æ—á–∏—Å—Ç–∫–æ–π"""
        try:
            logger.info(f"üîÑ –ó–∞–∫—Ä—ã—Ç–∏–µ —Å–µ—Å—Å–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
            
            if user_id in self.active_sessions:
                client = self.active_sessions[user_id]
                try:
                    if client.is_connected():
                        await asyncio.wait_for(client.disconnect(), timeout=10)
                except Exception as e:
                    logger.debug(f"–û—à–∏–±–∫–∞ –æ—Ç–∫–ª—é—á–µ–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–∞ {user_id}: {e}")
                
                del self.active_sessions[user_id]
                self.session_stats['active'] = len(self.active_sessions)
            
            if user_id in self.session_locks:
                del self.session_locks[user_id]
                
            logger.info(f"‚úÖ –°–µ—Å—Å–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –∑–∞–∫—Ä—ã—Ç–∞")
            return True
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è —Å–µ—Å—Å–∏–∏ {user_id}: {e}")
            return False
    
    async def close_all_sessions(self):
        """–ó–∞–∫—Ä—ã—Ç—å –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ —Å–µ—Å—Å–∏–∏ —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π"""
        logger.info("üîÑ –ó–∞–∫—Ä—ã—Ç–∏–µ –≤—Å–µ—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–µ—Å—Å–∏–π...")
        
        # –°–æ–∑–¥–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ –∏—Ç–µ—Ä–∏—Ä–æ–≤–∞–Ω–∏—è
        user_ids = list(self.active_sessions.keys())
        
        # –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–µ—Å—Å–∏–∏ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ —Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ–º –≤—Ä–µ–º–µ–Ω–∏
        close_tasks = []
        for user_id in user_ids:
            task = asyncio.create_task(self.close_user_session(user_id))
            close_tasks.append(task)
        
        if close_tasks:
            try:
                await asyncio.wait_for(
                    asyncio.gather(*close_tasks, return_exceptions=True),
                    timeout=30
                )
            except asyncio.TimeoutError:
                logger.warning("‚ö†Ô∏è –¢–∞–π–º–∞—É—Ç –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ —Å–µ—Å—Å–∏–π")
        
        # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞
        self.active_sessions.clear()
        self.session_locks.clear()
        self.session_stats['active'] = 0
        
        logger.info("‚úÖ –í—Å–µ —Å–µ—Å—Å–∏–∏ –∑–∞–∫—Ä—ã—Ç—ã")
    
    async def cleanup_expired_sessions(self) -> int:
        """–û—á–∏—Å—Ç–∫–∞ –∏—Å—Ç–µ–∫—à–∏—Ö —Å–µ—Å—Å–∏–π —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –ª–æ–≥–∏–∫–æ–π"""
        cleaned = 0
        
        try:
            logger.info("üßπ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏—Å—Ç–µ–∫—à–∏—Ö —Å–µ—Å—Å–∏–π...")
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å—ã –≤ –ë–î
            try:
                from database import db_manager
                expired_count = await db_manager.cleanup_expired_users()
                logger.info(f"üìä –ù–∞–π–¥–µ–Ω–æ {expired_count} –∏—Å—Ç–µ–∫—à–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –ë–î")
            except ImportError:
                logger.warning("‚ö†Ô∏è database module –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è –æ—á–∏—Å—Ç–∫–∏")
                return 0
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –ë–î: {e}")
                return 0
            
            # –ó–∞–∫—Ä—ã–≤–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ —Å–µ—Å—Å–∏–∏ –∏—Å—Ç–µ–∫—à–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            try:
                expired_users = await db_manager.get_users_by_mode('user')
                for user_data in expired_users:
                    if user_data['status'] == 'expired':
                        user_id = user_data['user_id']
                        if user_id in self.active_sessions:
                            await self.close_user_session(user_id)
                            cleaned += 1
                            self.session_stats['expired'] += 1
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è –∏—Å—Ç–µ–∫—à–∏—Ö —Å–µ—Å—Å–∏–π: {e}")
            
            if cleaned > 0:
                logger.info(f"üßπ –û—á–∏—â–µ–Ω–æ {cleaned} –∏—Å—Ç–µ–∫—à–∏—Ö —Å–µ—Å—Å–∏–π")
                self.session_stats['active'] = len(self.active_sessions)
            
            return cleaned
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ —Å–µ—Å—Å–∏–π: {e}")
            return 0
    
    async def get_session_info(self, user_id: int) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–µ—Å—Å–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏"""
        try:
            from database import db_manager
            user_data = await db_manager.get_user(user_id)
        except ImportError:
            user_data = None
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
            user_data = None
        
        if not user_data:
            return {'status': 'not_found'}
        
        info = {
            'user_id': user_id,
            'mode': user_data['mode'],
            'status': user_data['status'],
            'created_at': user_data['created_at'],
            'last_active': user_data['last_active'],
            'has_credentials': bool(user_data.get('api_id_encrypted')),
            'is_session_active': user_id in self.active_sessions,
            'session_file': user_data.get('session_file'),
            'telegram_user': None
        }
        
        if user_id in self.active_sessions:
            client = self.active_sessions[user_id]
            info['is_connected'] = client.is_connected()
            
            try:
                # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ–∫—É—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ —Å —Ç–∞–π–º–∞—É—Ç–æ–º
                me = await asyncio.wait_for(client.get_me(), timeout=10)
                info['telegram_user'] = {
                    'id': me.id,
                    'username': me.username,
                    'first_name': me.first_name,
                    'phone': me.phone
                }
            except Exception as e:
                logger.debug(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ {user_id}: {e}")
                info['telegram_user'] = None
        
        return info
    
    async def logout_user(self, user_id: int) -> Tuple[bool, str]:
        """–í—ã–π—Ç–∏ –∏–∑ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ —Ä–µ–∂–∏–º–∞ —Å –ø–æ–ª–Ω–æ–π –æ—á–∏—Å—Ç–∫–æ–π"""
        try:
            logger.info(f"üîÑ Logout –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
            
            # –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–µ—Å—Å–∏—é
            await self.close_user_session(user_id)
            
            # –£–¥–∞–ª—è–µ–º credentials –∏–∑ –ë–î
            try:
                from database import db_manager
                user_data = await db_manager.get_user(user_id)
                if user_data:
                    await db_manager.create_or_update_user(
                        user_id, 
                        user_data['telegram_username'],
                        user_data['first_name'],
                        'bot'  # –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º –≤ —Ä–µ–∂–∏–º –±–æ—Ç–∞
                    )
            except ImportError:
                logger.warning("‚ö†Ô∏è database module –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è logout")
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ë–î –ø—Ä–∏ logout: {e}")
            
            # –£–¥–∞–ª—è–µ–º session —Ñ–∞–π–ª—ã
            try:
                session_files = [
                    f"user_session_{user_id}.session",
                    f"user_session_{user_id}.session-journal"
                ]
                for session_file in session_files:
                    if os.path.exists(session_file):
                        os.remove(session_file)
                        logger.debug(f"üóëÔ∏è –£–¥–∞–ª–µ–Ω —Ñ–∞–π–ª {session_file}")
            except Exception as e:
                logger.debug(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è session —Ñ–∞–π–ª–æ–≤: {e}")
            
            logger.info(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –≤—ã—à–µ–ª –∏–∑ user —Ä–µ–∂–∏–º–∞")
            return True, "‚úÖ –í—ã—Ö–æ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω. –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω –≤ —Ä–µ–∂–∏–º –±–æ—Ç–∞."
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ logout –¥–ª—è {user_id}: {e}")
            return False, f"‚ùå –û—à–∏–±–∫–∞ –≤—ã—Ö–æ–¥–∞: {str(e)}"
    
    async def get_active_sessions_count(self) -> Dict[str, int]:
        """–ü–æ–ª—É—á–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–µ—Å—Å–∏–π"""
        return {
            'total_sessions': len(self.active_sessions),
            'max_sessions': MAX_CONCURRENT_SESSIONS,
            'available_slots': MAX_CONCURRENT_SESSIONS - len(self.active_sessions)
        }
    
    async def health_check(self) -> Dict[str, Any]:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è –≤—Å–µ—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–µ—Å—Å–∏–π"""
        health_info = {
            'total_sessions': len(self.active_sessions),
            'healthy_sessions': 0,
            'unhealthy_sessions': 0,
            'session_details': {},
            'stats': self.session_stats.copy()
        }
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—É—é –∞–∫—Ç–∏–≤–Ω—É—é —Å–µ—Å—Å–∏—é
        check_tasks = []
        for user_id, client in list(self.active_sessions.items()):
            task = asyncio.create_task(self._check_session_health(user_id, client))
            check_tasks.append(task)
        
        if check_tasks:
            try:
                results = await asyncio.wait_for(
                    asyncio.gather(*check_tasks, return_exceptions=True),
                    timeout=30
                )
                
                for result in results:
                    if isinstance(result, dict):
                        user_id = result['user_id']
                        is_healthy = result['is_healthy']
                        status = result['status']
                        
                        if is_healthy:
                            health_info['healthy_sessions'] += 1
                        else:
                            health_info['unhealthy_sessions'] += 1
                        
                        health_info['session_details'][user_id] = status
                    elif isinstance(result, Exception):
                        logger.debug(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–µ—Å—Å–∏–∏: {result}")
                        health_info['unhealthy_sessions'] += 1
                        
            except asyncio.TimeoutError:
                logger.warning("‚ö†Ô∏è –¢–∞–π–º–∞—É—Ç –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –∑–¥–æ—Ä–æ–≤—å—è —Å–µ—Å—Å–∏–π")
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        self.session_stats['active'] = len(self.active_sessions)
        
        return health_info
    
    async def _check_session_health(self, user_id: int, client: TelegramClient) -> Dict[str, Any]:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è –æ—Ç–¥–µ–ª—å–Ω–æ–π —Å–µ—Å—Å–∏–∏"""
        try:
            is_connected = client.is_connected()
            if is_connected:
                # –ü–æ–ø—Ä–æ–±—É–µ–º –≤—ã–ø–æ–ª–Ω–∏—Ç—å –ø—Ä–æ—Å—Ç–æ–π –∑–∞–ø—Ä–æ—Å
                await asyncio.wait_for(client.get_me(), timeout=10)
                return {
                    'user_id': user_id,
                    'is_healthy': True,
                    'status': 'healthy'
                }
            else:
                # –°–µ—Å—Å–∏—è –æ—Ç–∫–ª—é—á–µ–Ω–∞
                await self.close_user_session(user_id)
                return {
                    'user_id': user_id,
                    'is_healthy': False,
                    'status': 'disconnected'
                }
                
        except Exception as e:
            # –ü—Ä–æ–±–ª–µ–º–Ω–∞—è —Å–µ—Å—Å–∏—è
            await self.close_user_session(user_id)
            return {
                'user_id': user_id,
                'is_healthy': False,
                'status': f'error: {str(e)[:50]}'
            }
    
    def get_encryption_info(self) -> Dict[str, str]:
        """–ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏–∏ (–¥–ª—è –æ—Ç–ª–∞–¥–∫–∏)"""
        return {
            'cipher_available': bool(self.cipher),
            'key_length': len(ENCRYPTION_KEY),
            'salt_length': len(SALT),
            'algorithm': 'Fernet (AES 128 + HMAC SHA256)',
            'session_timeout_days': SESSION_TIMEOUT_DAYS
        }
    
    def get_stats(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Ä–∞–±–æ—Ç—ã auth manager"""
        return {
            'session_stats': self.session_stats.copy(),
            'active_sessions': len(self.active_sessions),
            'max_sessions': MAX_CONCURRENT_SESSIONS,
            'session_locks': len(self.session_locks)
        }

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
auth_manager = AuthenticationManager()

# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞
async def get_auth_manager():
    """–ü–æ–ª—É—á–∏—Ç—å –º–µ–Ω–µ–¥–∂–µ—Ä –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏"""
    return auth_manager

async def cleanup_auth():
    """–û—á–∏—Å—Ç–∫–∞ –≤—Å–µ—Ö —Å–µ—Å—Å–∏–π –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏"""
    await auth_manager.close_all_sessions()