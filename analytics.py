#!/usr/bin/env python3
"""
–ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –¥–ª—è Get ID Bot by Mister DMS
–í–∫–ª—é—á–∞–µ—Ç: –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏–π, –º–µ—Ç—Ä–∏–∫–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏, correlation ID
"""

import uuid
import time
import logging
from datetime import datetime, timedelta
from typing import Dict, Any, List, Optional
from dataclasses import dataclass, asdict
from collections import defaultdict, Counter

from config import ENABLE_USAGE_ANALYTICS, CORRELATION_ID_HEADER

logger = logging.getLogger(__name__)

@dataclass
class AnalyticsEvent:
    """–°–æ–±—ã—Ç–∏–µ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏"""
    correlation_id: str
    timestamp: datetime
    event_type: str
    user_id: int
    properties: Dict[str, Any]
    duration_ms: Optional[float] = None
    success: bool = True
    error_message: Optional[str] = None

@dataclass
class PerformanceMetric:
    """–ú–µ—Ç—Ä–∏–∫–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏"""
    operation: str
    timestamp: datetime
    duration_ms: float
    success: bool
    details: Dict[str, Any]

class AnalyticsManager:
    """–ú–µ–Ω–µ–¥–∂–µ—Ä –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è"""
    
    def __init__(self):
        self.enabled = ENABLE_USAGE_ANALYTICS
        self.events: List[AnalyticsEvent] = []
        self.performance_metrics: List[PerformanceMetric] = []
        self.max_events = 10000  # –õ–∏–º–∏—Ç —Å–æ–±—ã—Ç–∏–π –≤ –ø–∞–º—è—Ç–∏
        self.max_metrics = 5000  # –õ–∏–º–∏—Ç –º–µ—Ç—Ä–∏–∫ –≤ –ø–∞–º—è—Ç–∏
        
        # –ö–µ—à–∏ –¥–ª—è –±—ã—Å—Ç—Ä–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        self.command_stats = Counter()
        self.user_stats = defaultdict(lambda: {
            'commands_used': Counter(),
            'total_requests': 0,
            'first_seen': None,
            'last_seen': None,
            'errors_count': 0
        })
        
        # –ú–µ—Ç—Ä–∏–∫–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
        self.performance_stats = {
            'avg_response_time': 0.0,
            'total_operations': 0,
            'error_rate': 0.0,
            'slowest_operations': []
        }
        
        if self.enabled:
            logger.info("üìä AnalyticsManager –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        else:
            logger.info("üìä AnalyticsManager –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω (–æ—Ç–∫–ª—é—á–µ–Ω)")
    
    def track_event(self, event_type: str, user_id: int, 
                   properties: Dict[str, Any] = None, 
                   correlation_id: str = None) -> str:
        """
        –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è
        
        Args:
            event_type: –¢–∏–ø —Å–æ–±—ã—Ç–∏—è (command_used, error_occurred, etc.)
            user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            properties: –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Å–≤–æ–π—Å—Ç–≤–∞ —Å–æ–±—ã—Ç–∏—è
            correlation_id: ID –¥–ª—è —Ç—Ä–µ–π—Å–∏–Ω–≥–∞ (—Å–æ–∑–¥–∞–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –µ—Å–ª–∏ –Ω–µ —É–∫–∞–∑–∞–Ω)
        
        Returns:
            correlation_id: ID –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Å–≤—è–∑–∞–Ω–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π
        """
        if not self.enabled:
            return ""
        
        try:
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º correlation_id –µ—Å–ª–∏ –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω
            if not correlation_id:
                correlation_id = str(uuid.uuid4())[:8]  # –ö–æ—Ä–æ—Ç–∫–∏–π ID –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞
            
            event_data = AnalyticsEvent(
                correlation_id=correlation_id,
                timestamp=datetime.now(),
                event_type=event_type,
                user_id=user_id,
                properties=properties or {}
            )
            
            self.events.append(event_data)
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –∫–µ—à–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
            self._update_stats_cache(event_data)
            
            # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä –≤ –ø–∞–º—è—Ç–∏
            if len(self.events) > self.max_events:
                self.events = self.events[-self.max_events//2:]
            
            logger.debug(f"üìä –°–æ–±—ã—Ç–∏–µ {event_type} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} (ID: {correlation_id})")
            return correlation_id
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ —Å–æ–±—ã—Ç–∏—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∏: {e}")
            return ""
    
    def track_command(self, user_id: int, command: str, chat_type: str = 'private', 
                     chat_id: Optional[int] = None, success: bool = True,
                     correlation_id: str = None) -> str:
        """–û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã"""
        return self.track_event('command_used', user_id, {
            'command': command,
            'chat_type': chat_type,
            'chat_id': chat_id,
            'success': success
        }, correlation_id)
    
    def track_error(self, user_id: int, error_type: str, error_message: str = "",
                   command: str = "", correlation_id: str = None) -> str:
        """–û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –æ—à–∏–±–∫–∏"""
        # –û–±—Ä–µ–∑–∞–µ–º –¥–ª–∏–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–∞—Ö
        error_message = error_message[:200] if error_message else ""
        
        return self.track_event('error_occurred', user_id, {
            'error_type': error_type,
            'error_message': error_message,
            'command': command
        }, correlation_id)
    
    def track_performance(self, operation: str, duration_ms: float, 
                         success: bool = True, details: Dict[str, Any] = None,
                         correlation_id: str = None) -> str:
        """–û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –æ–ø–µ—Ä–∞—Ü–∏–∏"""
        try:
            metric = PerformanceMetric(
                operation=operation,
                timestamp=datetime.now(),
                duration_ms=duration_ms,
                success=success,
                details=details or {}
            )
            
            self.performance_metrics.append(metric)
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
            self._update_performance_stats(metric)
            
            # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä
            if len(self.performance_metrics) > self.max_metrics:
                self.performance_metrics = self.performance_metrics[-self.max_metrics//2:]
            
            # –°–æ–∑–¥–∞–µ–º —Å–æ–±—ã—Ç–∏–µ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
            if self.enabled:
                correlation_id = self.track_event('performance_metric', 0, {
                    'operation': operation,
                    'duration_ms': duration_ms,
                    'success': success
                }, correlation_id)
            
            logger.debug(f"‚ö° {operation}: {duration_ms:.1f}ms")
            return correlation_id or ""
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ –º–µ—Ç—Ä–∏–∫–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏: {e}")
            return ""
    
    def start_operation(self, operation_name: str) -> 'OperationTracker':
        """–ù–∞—á–∞—Ç—å –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ (context manager)"""
        return OperationTracker(self, operation_name)
    
    def get_user_analytics(self, user_id: int, days: int = 7) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–∏—Ç—å –∞–Ω–∞–ª–∏—Ç–∏–∫—É –ø–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é"""
        try:
            cutoff_date = datetime.now() - timedelta(days=days)
            
            # –§–∏–ª—å—Ç—Ä—É–µ–º —Å–æ–±—ã—Ç–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user_events = [
                event for event in self.events
                if event.user_id == user_id and event.timestamp >= cutoff_date
            ]
            
            if not user_events:
                return {
                    'user_id': user_id,
                    'period_days': days,
                    'total_events': 0,
                    'commands_used': {},
                    'errors': [],
                    'first_activity': None,
                    'last_activity': None
                }
            
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–æ–º–∞–Ω–¥—ã
            commands_counter = Counter()
            errors = []
            
            for event in user_events:
                if event.event_type == 'command_used':
                    command = event.properties.get('command', 'unknown')
                    commands_counter[command] += 1
                elif event.event_type == 'error_occurred':
                    errors.append({
                        'timestamp': event.timestamp.isoformat(),
                        'error_type': event.properties.get('error_type'),
                        'message': event.properties.get('error_message', '')[:100]
                    })
            
            return {
                'user_id': user_id,
                'period_days': days,
                'total_events': len(user_events),
                'commands_used': dict(commands_counter.most_common()),
                'errors': errors[-10:],  # –ü–æ—Å–ª–µ–¥–Ω–∏–µ 10 –æ—à–∏–±–æ–∫
                'first_activity': user_events[0].timestamp.isoformat(),
                'last_activity': user_events[-1].timestamp.isoformat(),
                'activity_by_day': self._get_daily_activity(user_events)
            }
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
            return {'error': str(e)}
    
    def get_global_analytics(self, hours: int = 24) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–∏—Ç—å –≥–ª–æ–±–∞–ª—å–Ω—É—é –∞–Ω–∞–ª–∏—Ç–∏–∫—É"""
        try:
            cutoff_date = datetime.now() - timedelta(hours=hours)
            
            # –§–∏–ª—å—Ç—Ä—É–µ–º —Å–æ–±—ã—Ç–∏—è
            recent_events = [
                event for event in self.events
                if event.timestamp >= cutoff_date
            ]
            
            recent_metrics = [
                metric for metric in self.performance_metrics
                if metric.timestamp >= cutoff_date
            ]
            
            # –£–Ω–∏–∫–∞–ª—å–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏
            unique_users = len(set(event.user_id for event in recent_events))
            
            # –ö–æ–º–∞–Ω–¥—ã
            command_stats = Counter()
            error_stats = Counter()
            
            for event in recent_events:
                if event.event_type == 'command_used':
                    command = event.properties.get('command', 'unknown')
                    command_stats[command] += 1
                elif event.event_type == 'error_occurred':
                    error_type = event.properties.get('error_type', 'unknown')
                    error_stats[error_type] += 1
            
            # –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å
            if recent_metrics:
                avg_response_time = sum(m.duration_ms for m in recent_metrics) / len(recent_metrics)
                success_rate = len([m for m in recent_metrics if m.success]) / len(recent_metrics)
            else:
                avg_response_time = 0
                success_rate = 1.0
            
            return {
                'period_hours': hours,
                'timestamp': datetime.now().isoformat(),
                'total_events': len(recent_events),
                'unique_users': unique_users,
                'most_used_commands': dict(command_stats.most_common(10)),
                'error_types': dict(error_stats.most_common(5)),
                'performance': {
                    'avg_response_time_ms': round(avg_response_time, 2),
                    'success_rate': round(success_rate, 3),
                    'total_operations': len(recent_metrics)
                },
                'hourly_activity': self._get_hourly_activity(recent_events)
            }
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –≥–ª–æ–±–∞–ª—å–Ω–æ–π –∞–Ω–∞–ª–∏—Ç–∏–∫–∏: {e}")
            return {'error': str(e)}
    
    def get_top_users(self, limit: int = 10, days: int = 7) -> List[Dict[str, Any]]:
        """–ü–æ–ª—É—á–∏—Ç—å —Ç–æ–ø –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
        try:
            cutoff_date = datetime.now() - timedelta(days=days)
            
            user_activity = defaultdict(int)
            
            for event in self.events:
                if event.timestamp >= cutoff_date:
                    user_activity[event.user_id] += 1
            
            # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
            sorted_users = sorted(user_activity.items(), key=lambda x: x[1], reverse=True)
            
            result = []
            for user_id, activity_count in sorted_users[:limit]:
                user_data = self.user_stats.get(user_id, {})
                result.append({
                    'user_id': user_id,
                    'activity_count': activity_count,
                    'first_seen': user_data.get('first_seen'),
                    'last_seen': user_data.get('last_seen'),
                    'total_requests': user_data.get('total_requests', 0),
                    'errors_count': user_data.get('errors_count', 0)
                })
            
            return result
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {e}")
            return []
    
    def get_correlation_events(self, correlation_id: str) -> List[Dict[str, Any]]:
        """–ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ —Å–æ–±—ã—Ç–∏—è —Å –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–º correlation_id"""
        try:
            related_events = [
                event for event in self.events
                if event.correlation_id == correlation_id
            ]
            
            return [
                {
                    'timestamp': event.timestamp.isoformat(),
                    'event_type': event.event_type,
                    'user_id': event.user_id,
                    'properties': event.properties,
                    'success': event.success,
                    'error_message': event.error_message
                }
                for event in sorted(related_events, key=lambda x: x.timestamp)
            ]
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ–±—ã—Ç–∏–π correlation {correlation_id}: {e}")
            return []
    
    def cleanup_old_data(self, days_to_keep: int = 30) -> int:
        """–û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –¥–∞–Ω–Ω—ã—Ö –∞–Ω–∞–ª–∏—Ç–∏–∫–∏"""
        try:
            cutoff_date = datetime.now() - timedelta(days=days_to_keep)
            
            # –û—á–∏—â–∞–µ–º —Å–æ–±—ã—Ç–∏—è
            old_events_count = len(self.events)
            self.events = [
                event for event in self.events
                if event.timestamp >= cutoff_date
            ]
            events_cleaned = old_events_count - len(self.events)
            
            # –û—á–∏—â–∞–µ–º –º–µ—Ç—Ä–∏–∫–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
            old_metrics_count = len(self.performance_metrics)
            self.performance_metrics = [
                metric for metric in self.performance_metrics
                if metric.timestamp >= cutoff_date
            ]
            metrics_cleaned = old_metrics_count - len(self.performance_metrics)
            
            total_cleaned = events_cleaned + metrics_cleaned
            
            if total_cleaned > 0:
                logger.info(f"üßπ –û—á–∏—â–µ–Ω–æ {total_cleaned} —Å—Ç–∞—Ä—ã—Ö –∑–∞–ø–∏—Å–µ–π –∞–Ω–∞–ª–∏—Ç–∏–∫–∏")
            
            return total_cleaned
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö –∞–Ω–∞–ª–∏—Ç–∏–∫–∏: {e}")
            return 0
    
    def export_analytics_data(self, format: str = 'dict') -> Any:
        """–≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö –∞–Ω–∞–ª–∏—Ç–∏–∫–∏"""
        try:
            if format == 'dict':
                return {
                    'events': [asdict(event) for event in self.events[-1000:]],  # –ü–æ—Å–ª–µ–¥–Ω–∏–µ 1000
                    'performance_metrics': [asdict(metric) for metric in self.performance_metrics[-500:]],
                    'global_stats': self.get_global_analytics(24),
                    'export_timestamp': datetime.now().isoformat()
                }
            # –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –¥—Ä—É–≥–∏–µ —Ñ–æ—Ä–º–∞—Ç—ã (JSON, CSV)
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞ –¥–∞–Ω–Ω—ã—Ö –∞–Ω–∞–ª–∏—Ç–∏–∫–∏: {e}")
            return {}
    
    # –ü—Ä–∏–≤–∞—Ç–Ω—ã–µ –º–µ—Ç–æ–¥—ã
    
    def _update_stats_cache(self, event: AnalyticsEvent):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–µ—à–µ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
        try:
            user_id = event.user_id
            now = datetime.now()
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            if user_id not in self.user_stats:
                self.user_stats[user_id]['first_seen'] = now.isoformat()
            
            self.user_stats[user_id]['last_seen'] = now.isoformat()
            self.user_stats[user_id]['total_requests'] += 1
            
            if event.event_type == 'command_used':
                command = event.properties.get('command', 'unknown')
                self.command_stats[command] += 1
                self.user_stats[user_id]['commands_used'][command] += 1
            elif event.event_type == 'error_occurred':
                self.user_stats[user_id]['errors_count'] += 1
                
        except Exception as e:
            logger.debug(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–µ—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
    
    def _update_performance_stats(self, metric: PerformanceMetric):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏"""
        try:
            self.performance_stats['total_operations'] += 1
            
            # –°–∫–æ–ª—å–∑—è—â–µ–µ —Å—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º–µ–Ω–∏ –æ—Ç–∫–ª–∏–∫–∞
            current_avg = self.performance_stats['avg_response_time']
            total_ops = self.performance_stats['total_operations']
            
            new_avg = ((current_avg * (total_ops - 1)) + metric.duration_ms) / total_ops
            self.performance_stats['avg_response_time'] = new_avg
            
            # –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –æ—à–∏–±–æ–∫
            if not metric.success:
                error_count = self.performance_stats.get('error_count', 0) + 1
                self.performance_stats['error_count'] = error_count
                self.performance_stats['error_rate'] = error_count / total_ops
            
            # –¢–æ–ø –º–µ–¥–ª–µ–Ω–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π
            if metric.duration_ms > 1000:  # –ë–æ–ª–µ–µ 1 —Å–µ–∫—É–Ω–¥—ã
                slow_ops = self.performance_stats.setdefault('slowest_operations', [])
                slow_ops.append({
                    'operation': metric.operation,
                    'duration_ms': metric.duration_ms,
                    'timestamp': metric.timestamp.isoformat()
                })
                
                # –û—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ 20 —Å–∞–º—ã—Ö –º–µ–¥–ª–µ–Ω–Ω—ã—Ö
                slow_ops.sort(key=lambda x: x['duration_ms'], reverse=True)
                self.performance_stats['slowest_operations'] = slow_ops[:20]
                
        except Exception as e:
            logger.debug(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏: {e}")
    
    def _get_daily_activity(self, events: List[AnalyticsEvent]) -> Dict[str, int]:
        """–ü–æ–ª—É—á–∏—Ç—å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø–æ –¥–Ω—è–º"""
        daily_activity = defaultdict(int)
        for event in events:
            day = event.timestamp.strftime('%Y-%m-%d')
            daily_activity[day] += 1
        return dict(daily_activity)
    
    def _get_hourly_activity(self, events: List[AnalyticsEvent]) -> Dict[str, int]:
        """–ü–æ–ª—É—á–∏—Ç—å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø–æ —á–∞—Å–∞–º"""
        hourly_activity = defaultdict(int)
        for event in events:
            hour = event.timestamp.strftime('%H:00')
            hourly_activity[hour] += 1
        return dict(hourly_activity)

class OperationTracker:
    """Context manager –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –æ–ø–µ—Ä–∞—Ü–∏–π"""
    
    def __init__(self, analytics_manager: AnalyticsManager, operation_name: str):
        self.analytics = analytics_manager
        self.operation_name = operation_name
        self.start_time = None
        self.correlation_id = str(uuid.uuid4())[:8]
    
    def __enter__(self):
        self.start_time = time.time()
        return self
    
    def __exit__(self, exc_type, exc_val, exc_tb):
        if self.start_time:
            duration_ms = (time.time() - self.start_time) * 1000
            success = exc_type is None
            
            details = {}
            if exc_type:
                details['error_type'] = exc_type.__name__
                details['error_message'] = str(exc_val)[:200]
            
            self.analytics.track_performance(
                self.operation_name,
                duration_ms,
                success,
                details,
                self.correlation_id
            )

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏
analytics = AnalyticsManager()

# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞
def track_event(event_type: str, user_id: int, properties: Dict[str, Any] = None) -> str:
    """–ë—ã—Å—Ç—Ä–æ–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è"""
    return analytics.track_event(event_type, user_id, properties)

def track_command(user_id: int, command: str, **kwargs) -> str:
    """–ë—ã—Å—Ç—Ä–æ–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã"""
    return analytics.track_command(user_id, command, **kwargs)

def track_error(user_id: int, error_type: str, error_message: str = "") -> str:
    """–ë—ã—Å—Ç—Ä–æ–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –æ—à–∏–±–∫–∏"""
    return analytics.track_error(user_id, error_type, error_message)

def track_performance(operation: str, duration_ms: float, success: bool = True) -> str:
    """–ë—ã—Å—Ç—Ä–æ–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏"""
    return analytics.track_performance(operation, duration_ms, success)

def start_operation(operation_name: str) -> OperationTracker:
    """–ù–∞—á–∞—Ç—å –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏"""
    return analytics.start_operation(operation_name)