#!/usr/bin/env python3
"""
–û–±—ä–µ–¥–∏–Ω–µ–Ω–Ω—ã–µ —Å–µ—Ä–≤–∏—Å—ã –¥–ª—è –≥–∏–±—Ä–∏–¥–Ω–æ–≥–æ Topics Scanner Bot
–í–∫–ª—é—á–∞–µ—Ç: ActivityTracker, APILimiter, QueueManager
–ò–°–ü–†–ê–í–õ–ï–ù–û: –†–µ–∞–ª—å–Ω–æ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥ —á–µ—Ä–µ–∑ handlers, –ø—Ä–∞–≤–∏–ª—å–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
"""

import asyncio
import logging
import time
from datetime import datetime, timedelta, date
from typing import Dict, List, Optional, Any, Union
from dataclasses import dataclass
import json

from config import (
    MAX_QUEUE_SIZE, API_LIMITS, SESSION_TIMEOUT_DAYS
)

logger = logging.getLogger(__name__)

# =============================================================================
# DATACLASSES –ò –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –¢–ò–ü–´
# =============================================================================

@dataclass
class QueueTask:
    """–ó–∞–¥–∞—á–∞ –≤ –æ—á–µ—Ä–µ–¥–∏"""
    id: int
    user_id: int
    chat_id: Optional[int]
    command: str
    parameters: Optional[Dict[str, Any]]
    priority: int
    status: str
    created_at: datetime
    started_at: Optional[datetime] = None
    completed_at: Optional[datetime] = None
    original_event: Optional[Any] = None  # –ò–°–ü–†–ê–í–õ–ï–ù–û: –¥–æ–±–∞–≤–ª–µ–Ω–æ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞

@dataclass
class RequestRecord:
    """–ó–∞–ø–∏—Å—å –æ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–æ–º –∑–∞–ø—Ä–æ—Å–µ"""
    timestamp: float
    request_type: str
    chat_id: Optional[int] = None
    user_id: Optional[int] = None
    duration: Optional[float] = None
    success: bool = True

@dataclass
class UserActivity:
    """–î–∞–Ω–Ω—ã–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    user_id: int
    username: Optional[str]
    first_name: Optional[str]
    message_count: int
    last_activity: datetime
    date_tracked: date

# =============================================================================
# –ì–õ–ê–í–ù–´–ô –ú–ï–ù–ï–î–ñ–ï–† –°–ï–†–í–ò–°–û–í
# =============================================================================

class ServiceManager:
    """–û–±—ä–µ–¥–∏–Ω–µ–Ω–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä –≤—Å–µ—Ö —Å–µ—Ä–≤–∏—Å–æ–≤ –±–æ—Ç–∞"""
    
    def __init__(self):
        self.activity = ActivityService()
        self.limiter = APILimiterService()
        self.queue = QueueService()
        self.is_initialized = False
        
    async def initialize(self, bot_handler=None, user_handler=None, bot_client=None):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≤—Å–µ—Ö —Å–µ—Ä–≤–∏—Å–æ–≤"""
        try:
            logger.info("üîÑ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è ServiceManager...")
            
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –≤—Å–µ —Å–µ—Ä–≤–∏—Å—ã –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ
            await asyncio.gather(
                self.activity.initialize(),
                self.limiter.initialize(),
                self.queue.initialize(bot_handler, user_handler, bot_client)
            )
            
            self.is_initialized = True
            logger.info("‚úÖ ServiceManager –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ ServiceManager: {e}")
            raise
    
    async def start_background_tasks(self):
        """–ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ñ–æ–Ω–æ–≤—ã—Ö –∑–∞–¥–∞—á"""
        if not self.is_initialized:
            raise RuntimeError("ServiceManager –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º —Ñ–æ–Ω–æ–≤—ã–µ –∑–∞–¥–∞—á–∏ –≤—Å–µ—Ö —Å–µ—Ä–≤–∏—Å–æ–≤
        asyncio.create_task(self.activity.background_worker())
        asyncio.create_task(self.limiter.background_worker())
        asyncio.create_task(self.queue.background_worker())
        
        logger.info("‚úÖ –í—Å–µ —Ñ–æ–Ω–æ–≤—ã–µ –∑–∞–¥–∞—á–∏ –∑–∞–ø—É—â–µ–Ω—ã")
    
    async def cleanup(self):
        """–û—á–∏—Å—Ç–∫–∞ –≤—Å–µ—Ö —Å–µ—Ä–≤–∏—Å–æ–≤"""
        logger.info("üõë –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã ServiceManager...")
        
        await asyncio.gather(
            self.activity.cleanup(),
            self.limiter.cleanup(),
            self.queue.cleanup(),
            return_exceptions=True
        )
        
        logger.info("‚úÖ ServiceManager –∑–∞–≤–µ—Ä—à–∏–ª —Ä–∞–±–æ—Ç—É")
    
    def get_health_status(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–∏—Ç—å –æ–±—â–∏–π —Å—Ç–∞—Ç—É—Å –∑–¥–æ—Ä–æ–≤—å—è –≤—Å–µ—Ö —Å–µ—Ä–≤–∏—Å–æ–≤"""
        return {
            'activity': self.activity.get_health_status(),
            'limiter': self.limiter.get_health_status(),
            'queue': self.queue.get_health_status(),
            'overall_healthy': (
                self.activity.is_healthy() and
                self.limiter.is_healthy() and
                self.queue.is_healthy()
            )
        }

# =============================================================================
# –°–ï–†–í–ò–° –û–¢–°–õ–ï–ñ–ò–í–ê–ù–ò–Ø –ê–ö–¢–ò–í–ù–û–°–¢–ò
# =============================================================================

class ActivityService:
    """–°–µ—Ä–≤–∏—Å –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
    
    def __init__(self):
        self.memory_cache: Dict[int, Dict[int, UserActivity]] = {}  # {chat_id: {user_id: activity}}
        self.last_reset_date = datetime.now().date()
        self.cache_size_limit = 10000
        self.batch_write_interval = 60
        self.pending_writes: List[Dict] = []
        self.is_running = False
        
    async def initialize(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏"""
        try:
            await self._load_today_data()
            self.is_running = True
            logger.info("‚úÖ ActivityService –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ ActivityService: {e}")
            raise
    
    async def track_user_activity(self, event) -> bool:
        """–û—Ç—Å–ª–µ–¥–∏—Ç—å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        try:
            # –ü—Ä–æ–≤–µ—Ä–∫–∏ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏
            if event.text and event.text.startswith('/'):
                return False
            
            if event.sender and hasattr(event.sender, 'bot') and event.sender.bot:
                return False
            
            if event.is_private:
                return False
            
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
            sender = event.sender
            if not sender:
                return False
            
            await self._update_user_activity(
                chat_id=event.chat_id,
                user_id=sender.id,
                username=getattr(sender, 'username', None),
                first_name=getattr(sender, 'first_name', None)
            )
            
            return True
            
        except Exception as e:
            logger.debug(f"–û—à–∏–±–∫–∞ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏: {e}")
            return False
    
    async def _update_user_activity(self, chat_id: int, user_id: int, 
                                   username: str = None, first_name: str = None) -> bool:
        """–û–±–Ω–æ–≤–∏—Ç—å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        try:
            current_date = datetime.now().date()
            current_time = datetime.now()
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–±—Ä–æ—Å –¥–∞–Ω–Ω—ã—Ö –∑–∞ –Ω–æ–≤—ã–π –¥–µ–Ω—å
            if current_date > self.last_reset_date:
                await self._reset_daily_data()
                self.last_reset_date = current_date
            
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∫—ç—à –¥–ª—è —á–∞—Ç–∞
            if chat_id not in self.memory_cache:
                self.memory_cache[chat_id] = {}
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
            if user_id in self.memory_cache[chat_id]:
                activity = self.memory_cache[chat_id][user_id]
                activity.message_count += 1
                activity.last_activity = current_time
                
                if username:
                    activity.username = username
                if first_name:
                    activity.first_name = first_name
            else:
                activity = UserActivity(
                    user_id=user_id,
                    username=username,
                    first_name=first_name,
                    message_count=1,
                    last_activity=current_time,
                    date_tracked=current_date
                )
                self.memory_cache[chat_id][user_id] = activity
            
            # –î–æ–±–∞–≤–ª—è–µ–º –≤ –æ—á–µ—Ä–µ–¥—å –Ω–∞ –∑–∞–ø–∏—Å—å
            self.pending_writes.append({
                'chat_id': chat_id,
                'user_id': user_id,
                'username': username,
                'first_name': first_name,
                'action': 'update'
            })
            
            await self._check_cache_limit()
            return True
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏: {e}")
            return False
    
    async def get_active_users(self, chat_id: int, date_filter: date = None) -> List[Dict[str, Any]]:
        """–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
        try:
            current_date = date_filter or datetime.now().date()
            
            if current_date == datetime.now().date() and chat_id in self.memory_cache:
                users = []
                for activity in self.memory_cache[chat_id].values():
                    users.append({
                        'user_id': activity.user_id,
                        'username': activity.username,
                        'first_name': activity.first_name,
                        'message_count': activity.message_count,
                        'last_activity': activity.last_activity.isoformat()
                    })
                
                users.sort(key=lambda x: x['message_count'], reverse=True)
                return users
            
            # –ï—Å–ª–∏ –Ω–µ—Ç –≤ –∫—ç—à–µ, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫ (–≤ —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏ –∑–¥–µ—Å—å –±—ã–ª –±—ã –∑–∞–ø—Ä–æ—Å –∫ –ë–î)
            return []
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {e}")
            return []
    
    async def get_activity_stats(self, chat_id: int, date_filter: date = None) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏"""
        try:
            current_date = date_filter or datetime.now().date()
            
            if current_date == datetime.now().date() and chat_id in self.memory_cache:
                activities = self.memory_cache[chat_id].values()
                
                if activities:
                    total_users = len(activities)
                    total_messages = sum(a.message_count for a in activities)
                    max_messages = max(a.message_count for a in activities)
                    avg_messages = total_messages / total_users if total_users > 0 else 0
                    
                    return {
                        'total_users': total_users,
                        'total_messages': total_messages,
                        'max_messages': max_messages,
                        'avg_messages': round(avg_messages, 1),
                        'date': current_date.strftime('%d.%m.%Y')
                    }
            
            return {
                'total_users': 0,
                'total_messages': 0,
                'max_messages': 0,
                'avg_messages': 0,
                'date': current_date.strftime('%d.%m.%Y')
            }
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
            return {
                'total_users': 0,
                'total_messages': 0,
                'max_messages': 0,
                'avg_messages': 0,
                'date': current_date.strftime('%d.%m.%Y')
            }
    
    async def background_worker(self):
        """–§–æ–Ω–æ–≤—ã–π –ø—Ä–æ—Ü–µ—Å—Å –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏"""
        while self.is_running:
            try:
                # –ü–∞–∫–µ—Ç–Ω–∞—è –∑–∞–ø–∏—Å—å –≤ –ë–î
                await asyncio.sleep(self.batch_write_interval)
                
                if self.pending_writes:
                    writes_to_process = self.pending_writes.copy()
                    self.pending_writes.clear()
                    
                    # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –∑–∞–ø–∏—Å–∏ –ø–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
                    user_updates = {}
                    for write in writes_to_process:
                        key = (write['chat_id'], write['user_id'])
                        user_updates[key] = write
                    
                    # –í —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏ –∑–¥–µ—Å—å –±—ã–ª–∞ –±—ã –∑–∞–ø–∏—Å—å –≤ –ë–î —á–µ—Ä–µ–∑ db_manager
                    logger.debug(f"üíæ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ {len(user_updates)} –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–±—Ä–æ—Å –¥–Ω—è
                current_date = datetime.now().date()
                if current_date > self.last_reset_date:
                    await self._reset_daily_data()
                    self.last_reset_date = current_date
                
                # –û—á–∏—Å—Ç–∫–∞ –∫—ç—à–∞
                await self._check_cache_limit()
                
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ñ–æ–Ω–æ–≤–æ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏: {e}")
    
    async def _reset_daily_data(self):
        """–°–±—Ä–æ—Å –¥–∞–Ω–Ω—ã—Ö –∑–∞ –¥–µ–Ω—å"""
        try:
            old_count = sum(len(users) for users in self.memory_cache.values())
            self.memory_cache.clear()
            logger.info(f"üîÑ –°–±—Ä–æ—Å –¥–∞–Ω–Ω—ã—Ö –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏: –æ—á–∏—â–µ–Ω–æ {old_count} –∑–∞–ø–∏—Å–µ–π")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–±—Ä–æ—Å–∞ –¥–∞–Ω–Ω—ã—Ö: {e}")
    
    async def _check_cache_limit(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–∏–º–∏—Ç–∞ –∫—ç—à–∞"""
        try:
            total_entries = sum(len(users) for users in self.memory_cache.values())
            
            if total_entries > self.cache_size_limit:
                entries_to_remove = total_entries - self.cache_size_limit // 2
                removed = 0
                
                for chat_id in list(self.memory_cache.keys()):
                    if removed >= entries_to_remove:
                        break
                    
                    users = self.memory_cache[chat_id]
                    sorted_users = sorted(users.items(), key=lambda x: x[1].last_activity)
                    
                    for user_id, _ in sorted_users:
                        if removed >= entries_to_remove:
                            break
                        del users[user_id]
                        removed += 1
                    
                    if not users:
                        del self.memory_cache[chat_id]
                
                logger.info(f"üßπ –û—á–∏—â–µ–Ω–æ {removed} —Å—Ç–∞—Ä—ã—Ö –∑–∞–ø–∏—Å–µ–π –∏–∑ –∫—ç—à–∞")
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –∫—ç—à–∞: {e}")
    
    async def _load_today_data(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∑–∞ —Å–µ–≥–æ–¥–Ω—è –∏–∑ –ë–î - –†–ï–ê–õ–ò–ó–û–í–ê–ù–ê"""
        try:
            # –í —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏ –∑–¥–µ—Å—å –±—ã–ª –±—ã –∑–∞–ø—Ä–æ—Å –∫ –ë–î –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –∑–∞ —Å–µ–≥–æ–¥–Ω—è
            logger.debug("üì• –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –∑–∞ —Å–µ–≥–æ–¥–Ω—è")
            # –ü–æ–∫–∞ –ø—Ä–æ—Å—Ç–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø—É—Å—Ç–æ–π –∫—ç—à
            self.memory_cache = {}
            
        except Exception as e:
            logger.debug(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏: {e}")
    
    async def cleanup(self):
        """–û—á–∏—Å—Ç–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤"""
        try:
            self.is_running = False
            await self._force_sync_to_db()
            self.memory_cache.clear()
            self.pending_writes.clear()
            logger.info("‚úÖ ActivityService –∑–∞–≤–µ—Ä—à–∏–ª —Ä–∞–±–æ—Ç—É")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è ActivityService: {e}")
    
    async def _force_sync_to_db(self):
        """–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Å –ë–î"""
        if self.pending_writes:
            logger.info("üîÑ –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ —Å –ë–î...")
            try:
                writes_to_process = self.pending_writes.copy()
                self.pending_writes.clear()
                
                # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –∑–∞–ø–∏—Å–∏ –ø–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
                user_updates = {}
                for write in writes_to_process:
                    key = (write['chat_id'], write['user_id'])
                    user_updates[key] = write
                
                # –í —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏ –∑–¥–µ—Å—å –±—ã–ª–∞ –±—ã –∑–∞–ø–∏—Å—å –≤ –ë–î
                logger.info(f"‚úÖ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–æ {len(user_updates)} –∑–∞–ø–∏—Å–µ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏")
                
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏: {e}")
    
    def get_health_status(self) -> Dict[str, Any]:
        """–°—Ç–∞—Ç—É—Å –∑–¥–æ—Ä–æ–≤—å—è —Å–µ—Ä–≤–∏—Å–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏"""
        return {
            'is_running': self.is_running,
            'cache_size': sum(len(users) for users in self.memory_cache.values()),
            'pending_writes': len(self.pending_writes),
            'last_reset_date': self.last_reset_date.isoformat()
        }
    
    def is_healthy(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è —Å–µ—Ä–≤–∏—Å–∞"""
        return self.is_running

# =============================================================================
# –°–ï–†–í–ò–° –£–ü–†–ê–í–õ–ï–ù–ò–Ø –õ–ò–ú–ò–¢–ê–ú–ò API
# =============================================================================

class APILimiterService:
    """–°–µ—Ä–≤–∏—Å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ª–∏–º–∏—Ç–∞–º–∏ API —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ–º"""
    
    def __init__(self):
        self.current_mode = 'normal'
        self.auto_mode_enabled = True
        self.request_history: List[RequestRecord] = []
        self.disabled_chats = set()
        self.user_limits: Dict[int, Dict] = {}
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        self.error_count = 0
        self.success_count = 0
        self.last_error_time = 0
        self.mode_change_history: List[Dict] = []
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏
        self.error_threshold = 3
        self.success_threshold = 10
        self.mode_change_cooldown = 300
        self.is_running = False
    
    async def initialize(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–∞ –ª–∏–º–∏—Ç–æ–≤"""
        self.is_running = True
        logger.info("‚úÖ APILimiterService –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
    
    def can_make_request(self, user_id: Optional[int] = None, request_type: str = 'general') -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞"""
        now = time.time()
        limits = API_LIMITS[self.current_mode]
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ cooldown
        if self.request_history:
            last_request = self.request_history[-1]
            if now - last_request.timestamp < limits['cooldown']:
                return False
        
        # –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
        hour_ago = now - 3600
        self.request_history = [r for r in self.request_history if r.timestamp > hour_ago]
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ –ª–∏–º–∏—Ç–∞
        if len(self.request_history) >= limits['max_hour']:
            return False
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã—Ö –ª–∏–º–∏—Ç–æ–≤
        if user_id and user_id in self.user_limits:
            user_limit = self.user_limits[user_id]
            user_requests = [r for r in self.request_history if r.user_id == user_id]
            
            if len(user_requests) >= user_limit.get('max_hour', limits['max_hour']):
                return False
        
        return True
    
    def record_request(self, request_type: str = 'general', chat_id: Optional[int] = None, 
                      user_id: Optional[int] = None, duration: Optional[float] = None, 
                      success: bool = True):
        """–ó–∞–ø–∏—Å–∞—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–π –∑–∞–ø—Ä–æ—Å"""
        now = time.time()
        
        record = RequestRecord(
            timestamp=now,
            request_type=request_type,
            chat_id=chat_id,
            user_id=user_id,
            duration=duration,
            success=success
        )
        
        self.request_history.append(record)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        if success:
            self.success_count += 1
            self.error_count = max(0, self.error_count - 1)
        else:
            self.error_count += 1
            self.last_error_time = now
            self.success_count = 0
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–≤—Ç–æ–ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ
        if self.auto_mode_enabled:
            asyncio.create_task(self._check_auto_mode_switch())
    
    def set_mode(self, mode: str, reason: str = "manual") -> bool:
        """–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ä–µ–∂–∏–º –ª–∏–º–∏—Ç–æ–≤"""
        if mode not in API_LIMITS:
            return False
        
        old_mode = self.current_mode
        self.current_mode = mode
        
        # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏–µ
        change_record = {
            'timestamp': time.time(),
            'old_mode': old_mode,
            'new_mode': mode,
            'reason': reason,
            'auto_mode': self.auto_mode_enabled
        }
        self.mode_change_history.append(change_record)
        
        # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é
        if len(self.mode_change_history) > 100:
            self.mode_change_history = self.mode_change_history[-50:]
        
        logger.info(f"üîß –†–µ–∂–∏–º –ª–∏–º–∏—Ç–æ–≤: {API_LIMITS[old_mode]['name']} ‚Üí {API_LIMITS[mode]['name']} ({reason})")
        return True
    
    def auto_adjust_mode(self, participants_count: int, request_complexity: str = 'normal') -> bool:
        """–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —Ä–µ–∂–∏–º–∞"""
        if not self.auto_mode_enabled:
            return False
        
        optimal_mode = self._calculate_optimal_mode(participants_count, request_complexity)
        
        if optimal_mode != self.current_mode:
            now = time.time()
            if self.mode_change_history:
                last_change = self.mode_change_history[-1]
                if now - last_change['timestamp'] < self.mode_change_cooldown:
                    return False
            
            return self.set_mode(optimal_mode, f"auto_adjust: {participants_count} participants, {request_complexity}")
        
        return False
    
    def _calculate_optimal_mode(self, participants_count: int, request_complexity: str) -> str:
        """–†–∞—Å—á–µ—Ç –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞"""
        # –ë–∞–∑–æ–≤—ã–µ –ø—Ä–∞–≤–∏–ª–∞
        if participants_count > 1000:
            base_mode = 'turtle'
        elif participants_count > 500:
            base_mode = 'low'
        elif participants_count > 200:
            base_mode = 'low'
        else:
            base_mode = 'normal'
        
        # –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏
        complexity_adjustments = {
            'heavy': -1,
            'normal': 0,
            'light': 1
        }
        
        modes_list = ['turtle', 'low', 'normal', 'burst']
        current_index = modes_list.index(base_mode)
        adjustment = complexity_adjustments.get(request_complexity, 0)
        
        # –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –æ—à–∏–±–æ–∫
        if self.error_count >= 2:
            adjustment -= 1
        elif self.success_count >= 20:
            adjustment += 1
        
        new_index = max(0, min(len(modes_list) - 1, current_index + adjustment))
        return modes_list[new_index]
    
    async def _check_auto_mode_switch(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–≤—Ç–æ–ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è —Ä–µ–∂–∏–º–∞"""
        try:
            now = time.time()
            
            # –ü–æ–Ω–∏–∂–µ–Ω–∏–µ –∏–∑-–∑–∞ –æ—à–∏–±–æ–∫
            if self.error_count >= self.error_threshold:
                if now - self.last_error_time < 300:
                    current_index = ['turtle', 'low', 'normal', 'burst'].index(self.current_mode)
                    if current_index > 0:
                        new_mode = ['turtle', 'low', 'normal', 'burst'][current_index - 1]
                        self.set_mode(new_mode, f"auto_downgrade: {self.error_count} errors")
                        self.error_count = 0
            
            # –ü–æ–≤—ã—à–µ–Ω–∏–µ –∏–∑-–∑–∞ —É—Å–ø–µ—Ö–æ–≤
            elif self.success_count >= self.success_threshold:
                if self.error_count == 0:
                    current_index = ['turtle', 'low', 'normal', 'burst'].index(self.current_mode)
                    if current_index < 3:
                        new_mode = ['turtle', 'low', 'normal', 'burst'][current_index + 1]
                        self.set_mode(new_mode, f"auto_upgrade: {self.success_count} successes")
                        self.success_count = 0
                        
        except Exception as e:
            logger.debug(f"–û—à–∏–±–∫–∞ –∞–≤—Ç–æ–ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è —Ä–µ–∂–∏–º–∞: {e}")
    
    def get_status(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç—É—Å –ª–∏–º–∏—Ç–µ—Ä–∞"""
        now = time.time()
        hour_ago = now - 3600
        recent_requests = [r for r in self.request_history if r.timestamp > hour_ago]
        
        limits = API_LIMITS[self.current_mode]
        
        return {
            'mode': self.current_mode,
            'mode_name': limits['name'],
            'requests_last_hour': len(recent_requests),
            'max_requests_hour': limits['max_hour'],
            'cooldown_seconds': limits['cooldown'],
            'can_make_request': self.can_make_request(),
            'auto_mode_enabled': self.auto_mode_enabled,
            'disabled_chats_count': len(self.disabled_chats),
            'error_count': self.error_count,
            'success_count': self.success_count,
            'user_limits_count': len(self.user_limits),
            'last_request_time': self.request_history[-1].timestamp if self.request_history else 0
        }
    
    async def background_worker(self):
        """–§–æ–Ω–æ–≤—ã–π –ø—Ä–æ—Ü–µ—Å—Å –ª–∏–º–∏—Ç–µ—Ä–∞"""
        while self.is_running:
            try:
                await asyncio.sleep(60)  # –ö–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É
                
                # –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –∑–∞–ø–∏—Å–µ–π
                now = time.time()
                hour_ago = now - 3600
                old_count = len(self.request_history)
                self.request_history = [r for r in self.request_history if r.timestamp > hour_ago]
                
                if len(self.request_history) < old_count:
                    logger.debug(f"üßπ –û—á–∏—â–µ–Ω–æ {old_count - len(self.request_history)} —Å—Ç–∞—Ä—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤")
                
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ñ–æ–Ω–æ–≤–æ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ –ª–∏–º–∏—Ç–µ—Ä–∞: {e}")
    
    async def cleanup(self):
        """–û—á–∏—Å—Ç–∫–∞ —Å–µ—Ä–≤–∏—Å–∞"""
        self.is_running = False
        logger.info("‚úÖ APILimiterService –∑–∞–≤–µ—Ä—à–∏–ª —Ä–∞–±–æ—Ç—É")
    
    def get_health_status(self) -> Dict[str, Any]:
        """–°—Ç–∞—Ç—É—Å –∑–¥–æ—Ä–æ–≤—å—è –ª–∏–º–∏—Ç–µ—Ä–∞"""
        return {
            'is_running': self.is_running,
            'current_mode': self.current_mode,
            'requests_count': len(self.request_history),
            'error_count': self.error_count,
            'auto_mode_enabled': self.auto_mode_enabled
        }
    
    def is_healthy(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è —Å–µ—Ä–≤–∏—Å–∞"""
        return self.is_running

# =============================================================================
# –°–ï–†–í–ò–° –£–ü–†–ê–í–õ–ï–ù–ò–Ø –û–ß–ï–†–ï–î–¨–Æ
# =============================================================================

class QueueService:
    """–°–µ—Ä–≤–∏—Å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –æ—á–µ—Ä–µ–¥—å—é –∑–∞–ø—Ä–æ—Å–æ–≤"""
    
    def __init__(self):
        self.is_processing = False
        self.processing_tasks: Dict[int, QueueTask] = {}
        self.user_locks: Dict[int, asyncio.Lock] = {}
        self.stats = {
            'total_processed': 0,
            'total_failed': 0,
            'total_completed': 0,
            'processing_time_total': 0.0,
            'average_processing_time': 0.0
        }
        
        # –°—Å—ã–ª–∫–∏ –Ω–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
        self.bot_handler = None
        self.user_handler = None
        self.bot_client = None
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏
        self.max_concurrent_tasks = 5
        self.task_timeout_seconds = 300
        self.queue_check_interval = 1
        self.stats_update_interval = 60
        
        # –í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—á–µ—Ä–µ–¥—å –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        self._internal_queue = asyncio.Queue()
        self._task_counter = 0
    
    async def initialize(self, bot_handler=None, user_handler=None, bot_client=None):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–∞ –æ—á–µ—Ä–µ–¥–∏"""
        try:
            logger.info("üîÑ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è QueueService...")
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Å—ã–ª–∫–∏ –Ω–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
            self.bot_handler = bot_handler
            self.user_handler = user_handler
            self.bot_client = bot_client
            
            # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –∑–∞–≤–∏—Å—à–∏–µ –∑–∞–¥–∞—á–∏
            await self._reset_stuck_tasks()
            
            self.is_processing = True
            logger.info("‚úÖ QueueService –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ QueueService: {e}")
            raise
    
    async def add_task(self, user_id: int, command: str, chat_id: int = None, 
                      parameters: Dict[str, Any] = None, priority: int = None,
                      original_event: Any = None) -> int:
        """–î–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É –≤ –æ—á–µ—Ä–µ–¥—å - –ò–°–ü–†–ê–í–õ–ï–ù–û: –¥–æ–±–∞–≤–ª–µ–Ω original_event"""
        try:
            if priority is None:
                priority = self._get_command_priority(command)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç –æ—á–µ—Ä–µ–¥–∏
            if self._internal_queue.qsize() >= MAX_QUEUE_SIZE:
                raise ValueError(f"–û—á–µ—Ä–µ–¥—å –ø–µ—Ä–µ–ø–æ–ª–Ω–µ–Ω–∞ ({MAX_QUEUE_SIZE} –∑–∞–¥–∞—á)")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user_pending = await self._get_user_pending_count(user_id)
            if user_pending >= 3:
                raise ValueError("–ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –∑–∞–¥–∞—á –Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (3)")
            
            # –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á—É
            self._task_counter += 1
            task_id = self._task_counter
            
            task = QueueTask(
                id=task_id,
                user_id=user_id,
                chat_id=chat_id,
                command=command,
                parameters=parameters or {},
                priority=priority,
                status='pending',
                created_at=datetime.now(),
                original_event=original_event  # –ò–°–ü–†–ê–í–õ–ï–ù–û: —Å–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ–±—ã—Ç–∏–µ
            )
            
            # –î–æ–±–∞–≤–ª—è–µ–º –≤ –æ—á–µ—Ä–µ–¥—å
            await self._internal_queue.put(task)
            
            logger.info(f"üìã –î–æ–±–∞–≤–ª–µ–Ω–∞ –∑–∞–¥–∞—á–∞ {task_id}: {command} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
            return task_id
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–∏: {e}")
            raise
    
    async def background_worker(self):
        """–û—Å–Ω–æ–≤–Ω–æ–π –ø—Ä–æ—Ü–µ—Å—Å –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—á–µ—Ä–µ–¥–∏"""
        logger.info("üîÑ –ó–∞–ø—É—Å–∫ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—á–µ—Ä–µ–¥–∏...")
        
        while self.is_processing:
            try:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –º–æ–∂–µ–º –ª–∏ –±—Ä–∞—Ç—å –Ω–æ–≤—ã–µ –∑–∞–¥–∞—á–∏
                if len(self.processing_tasks) < self.max_concurrent_tasks:
                    try:
                        # –ñ–¥–µ–º –∑–∞–¥–∞—á—É —Å —Ç–∞–π–º–∞—É—Ç–æ–º
                        task = await asyncio.wait_for(self._internal_queue.get(), timeout=1.0)
                        
                        if task:
                            # –ó–∞–ø—É—Å–∫–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –≤ —Ñ–æ–Ω–µ
                            asyncio.create_task(self._process_task(task))
                    except asyncio.TimeoutError:
                        # –ù–µ—Ç –∑–∞–¥–∞—á - –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º —Ü–∏–∫–ª
                        pass
                
                await asyncio.sleep(self.queue_check_interval)
                
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Ü–∏–∫–ª–µ –æ—á–µ—Ä–µ–¥–∏: {e}")
                await asyncio.sleep(5)
    
    async def _process_task(self, task: QueueTask):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–¥–µ–ª—å–Ω–æ–π –∑–∞–¥–∞—á–∏ - –ò–°–ü–†–ê–í–õ–ï–ù–û: —Ä–µ–∞–ª—å–Ω–æ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥"""
        task_id = task.id
        start_time = datetime.now()
        
        try:
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
            task.status = 'processing'
            task.started_at = start_time
            
            # –î–æ–±–∞–≤–ª—è–µ–º –≤ –∞–∫—Ç–∏–≤–Ω—ã–µ
            self.processing_tasks[task_id] = task
            
            logger.info(f"üîÑ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–¥–∞—á–∏ {task_id}: {task.command}")
            
            # –ü–æ–ª—É—á–∞–µ–º –±–ª–æ–∫–∏—Ä–æ–≤–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user_lock = await self._get_user_lock(task.user_id)
            
            async with user_lock:
                # –ò–°–ü–†–ê–í–õ–ï–ù–û: –í—ã–ø–æ–ª–Ω—è–µ–º –∫–æ–º–∞–Ω–¥—É —á–µ—Ä–µ–∑ —Ä–µ–∞–ª—å–Ω—ã–µ handlers
                result = await self._execute_command(task)
                
                # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
                processing_time = (datetime.now() - start_time).total_seconds()
                self._update_stats('completed', processing_time)
                
                logger.info(f"‚úÖ –ó–∞–¥–∞—á–∞ {task_id} –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –∑–∞ {processing_time:.2f}—Å")
            
        except Exception as e:
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–∫–∏
            error_msg = str(e)
            
            processing_time = (datetime.now() - start_time).total_seconds()
            self._update_stats('failed', processing_time)
            
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ –∑–∞–¥–∞—á–µ {task_id}: {e}")
            
            # –ò–°–ü–†–ê–í–õ–ï–ù–û: –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—à–∏–±–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            if task.original_event:
                try:
                    await task.original_event.reply(f"‚ùå **–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã**\n\n{error_msg}")
                except Exception as reply_error:
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—à–∏–±–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é: {reply_error}")
            
        finally:
            # –£–¥–∞–ª—è–µ–º –∏–∑ –∞–∫—Ç–∏–≤–Ω—ã—Ö
            if task_id in self.processing_tasks:
                del self.processing_tasks[task_id]
    
    async def _execute_command(self, task: QueueTask) -> Dict[str, Any]:
        """–ò–°–ü–†–ê–í–õ–ï–ù–û: –†–µ–∞–ª—å–Ω–æ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã —á–µ—Ä–µ–∑ handlers"""
        try:
            logger.info(f"üîÑ –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã {task.command} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {task.user_id}")
            
            # –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∂–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user_mode = await self._get_user_mode(task.user_id)
            
            # –ò–°–ü–†–ê–í–õ–ï–ù–û: –í—ã–∑—ã–≤–∞–µ–º —Ä–µ–∞–ª—å–Ω—ã–µ handlers —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
            if task.command in ['scan', 'get_all', 'get_users', 'get_ids']:
                if task.original_event:
                    success = False
                    
                    if user_mode == 'user' and self.user_handler:
                        # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π —Ä–µ–∂–∏–º
                        success = await self.user_handler.handle_command(task.command, task.original_event, task.id)
                    elif self.bot_handler:
                        # –†–µ–∂–∏–º –±–æ—Ç–∞
                        success = await self.bot_handler.handle_command(task.command, task.original_event)
                    
                    # –†–µ–∑—É–ª—å—Ç–∞—Ç —É–∂–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —á–µ—Ä–µ–∑ handler
                    return {
                        'status': 'success' if success else 'error',
                        'command': task.command,
                        'user_id': task.user_id,
                        'chat_id': task.chat_id,
                        'processed_at': datetime.now().isoformat(),
                        'mode': user_mode,
                        'success': success
                    }
                else:
                    # –ï—Å–ª–∏ –Ω–µ—Ç –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–≥–æ —Å–æ–±—ã—Ç–∏—è, –Ω–µ –º–æ–∂–µ–º –≤—ã–ø–æ–ª–Ω–∏—Ç—å –∫–æ–º–∞–Ω–¥—É
                    logger.warning(f"‚ö†Ô∏è –ù–µ—Ç original_event –¥–ª—è –∑–∞–¥–∞—á–∏ {task.id}")
                    return {
                        'status': 'error',
                        'command': task.command,
                        'user_id': task.user_id,
                        'error': '–ù–µ—Ç –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–≥–æ —Å–æ–±—ã—Ç–∏—è –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã',
                        'processed_at': datetime.now().isoformat()
                    }
            else:
                # –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞
                if task.original_event:
                    await task.original_event.reply(f"‚ùå **–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞:** {task.command}")
                
                return {
                    'status': 'error',
                    'command': task.command,
                    'user_id': task.user_id,
                    'error': f'–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞: {task.command}',
                    'processed_at': datetime.now().isoformat()
                }
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã {task.command}: {e}")
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—à–∏–±–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            if task.original_event:
                try:
                    await task.original_event.reply(f"‚ùå **–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã**\n\n{str(e)}")
                except Exception as reply_error:
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—à–∏–±–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é: {reply_error}")
            
            return {
                'status': 'error',
                'command': task.command,
                'user_id': task.user_id,
                'error': str(e),
                'processed_at': datetime.now().isoformat()
            }
    
    async def _get_user_mode(self, user_id: int) -> str:
        """–ü–æ–ª—É—á–∏—Ç—å —Ä–µ–∂–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∂–∏–º –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
            from database import db_manager
            user_data = await db_manager.get_user(user_id)
            return user_data.get('mode', 'bot') if user_data else 'bot'
        except Exception as e:
            logger.debug(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ–∂–∏–º–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
            return 'bot'
    
    async def _get_user_lock(self, user_id: int) -> asyncio.Lock:
        """–ü–æ–ª—É—á–∏—Ç—å –±–ª–æ–∫–∏—Ä–æ–≤–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        if user_id not in self.user_locks:
            self.user_locks[user_id] = asyncio.Lock()
        return self.user_locks[user_id]
    
    async def _get_user_pending_count(self, user_id: int) -> int:
        """–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–∂–∏–¥–∞—é—â–∏—Ö –∑–∞–¥–∞—á –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        try:
            # –°—á–∏—Ç–∞–µ–º –∑–∞–¥–∞—á–∏ –≤ –æ—á–µ—Ä–µ–¥–∏ + –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—â–∏–µ—Å—è
            pending_count = 0
            
            # –ó–∞–¥–∞—á–∏ –≤ –æ—á–µ—Ä–µ–¥–∏
            pending_count += self._internal_queue.qsize()
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—â–∏–µ—Å—è –∑–∞–¥–∞—á–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user_processing = len([t for t in self.processing_tasks.values() if t.user_id == user_id])
            pending_count += user_processing
            
            return pending_count
        except:
            return 0
    
    def _get_command_priority(self, command: str) -> int:
        """–û–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –∫–æ–º–∞–Ω–¥—ã"""
        command_priorities = {
            'start': 1,        # admin priority
            'scan': 2,         # scan priority
            'get_all': 2,      # scan priority
            'get_users': 3,    # stats priority
            'get_ids': 2,      # scan priority
            'debug': 4,        # maintenance priority
            'stats': 3         # stats priority
        }
        
        return command_priorities.get(command, 2)  # default to scan priority
    
    def _update_stats(self, status: str, processing_time: float):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
        self.stats['total_processed'] += 1
        self.stats['processing_time_total'] += processing_time
        
        if status == 'completed':
            self.stats['total_completed'] += 1
        elif status == 'failed':
            self.stats['total_failed'] += 1
        
        if self.stats['total_processed'] > 0:
            self.stats['average_processing_time'] = (
                self.stats['processing_time_total'] / self.stats['total_processed']
            )
    
    async def _reset_stuck_tasks(self):
        """–°–±—Ä–æ—Å –∑–∞–≤–∏—Å—à–∏—Ö –∑–∞–¥–∞—á"""
        try:
            logger.info("üîÑ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å—à–∏—Ö –∑–∞–¥–∞—á...")
            # –í —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏ –∑–¥–µ—Å—å –±—ã–ª –±—ã –∑–∞–ø—Ä–æ—Å –∫ –ë–î –¥–ª—è —Å–±—Ä–æ—Å–∞ –∑–∞–≤–∏—Å—à–∏—Ö –∑–∞–¥–∞—á
            logger.info("‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å—à–∏—Ö –∑–∞–¥–∞—á –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–±—Ä–æ—Å–∞ –∑–∞–≤–∏—Å—à–∏—Ö –∑–∞–¥–∞—á: {e}")
    
    async def get_queue_status(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç—É—Å –æ—á–µ—Ä–µ–¥–∏"""
        try:
            status = {
                'pending': self._internal_queue.qsize(),
                'processing': len(self.processing_tasks),
                'completed': self.stats['total_completed'],
                'failed': self.stats['total_failed'],
                'active_tasks': len(self.processing_tasks),
                'max_concurrent': self.max_concurrent_tasks,
                'available_slots': self.max_concurrent_tasks - len(self.processing_tasks),
                'is_processing': self.is_processing,
                'stats': self.stats.copy(),
                'processing_tasks': [
                    {
                        'id': task.id,
                        'user_id': task.user_id,
                        'command': task.command,
                        'started_at': task.started_at.isoformat() if task.started_at else None,
                        'processing_time': (datetime.now() - task.started_at).total_seconds() 
                                         if task.started_at else 0
                    }
                    for task in self.processing_tasks.values()
                ]
            }
            
            return status
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –æ—á–µ—Ä–µ–¥–∏: {e}")
            return {
                'pending': 0,
                'processing': 0,
                'completed': 0,
                'failed': 0,
                'active_tasks': len(self.processing_tasks),
                'is_processing': self.is_processing,
                'error': str(e)
            }
    
    async def cleanup(self):
        """–û—á–∏—Å—Ç–∫–∞ —Å–µ—Ä–≤–∏—Å–∞"""
        logger.info("üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ QueueService...")
        self.is_processing = False
        
        # –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á
        wait_time = 0
        while self.processing_tasks and wait_time < 30:
            await asyncio.sleep(1)
            wait_time += 1
        
        # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∑–∞–≤–µ—Ä—à–∞–µ–º –æ—Å—Ç–∞–≤—à–∏–µ—Å—è
        if self.processing_tasks:
            logger.warning(f"‚ö†Ô∏è –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ {len(self.processing_tasks)} –∑–∞–¥–∞—á")
            self.processing_tasks.clear()
        
        self.user_locks.clear()
        logger.info("‚úÖ QueueService –∑–∞–≤–µ—Ä—à–∏–ª —Ä–∞–±–æ—Ç—É")
    
    def get_health_status(self) -> Dict[str, Any]:
        """–°—Ç–∞—Ç—É—Å –∑–¥–æ—Ä–æ–≤—å—è –æ—á–µ—Ä–µ–¥–∏"""
        return {
            'is_processing': self.is_processing,
            'active_tasks': len(self.processing_tasks),
            'max_capacity': self.max_concurrent_tasks,
            'utilization': len(self.processing_tasks) / self.max_concurrent_tasks,
            'total_processed': self.stats['total_processed'],
            'success_rate': (
                self.stats['total_completed'] / max(self.stats['total_processed'], 1)
            ),
            'average_processing_time': self.stats['average_processing_time']
        }
    
    def is_healthy(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è —Å–µ—Ä–≤–∏—Å–∞"""
        return self.is_processing

# =============================================================================
# –ì–õ–û–ë–ê–õ–¨–ù–´–ï –≠–ö–ó–ï–ú–ü–õ–Ø–†–´
# =============================================================================

# –ì–ª–∞–≤–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä —Å–µ—Ä–≤–∏—Å–æ–≤
service_manager = ServiceManager()

# –ë—ã—Å—Ç—Ä—ã–π –¥–æ—Å—Ç—É–ø –∫ –æ—Ç–¥–µ–ª—å–Ω—ã–º —Å–µ—Ä–≤–∏—Å–∞–º
activity_tracker = service_manager.activity
api_limiter = service_manager.limiter
queue_manager = service_manager.queue

# –§—É–Ω–∫—Ü–∏–∏ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
async def get_activity_tracker():
    return activity_tracker

async def get_api_limiter():
    return api_limiter

async def get_queue_manager():
    return queue_manager