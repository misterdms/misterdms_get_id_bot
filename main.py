#!/usr/bin/env python3
"""
ü§ñ –ì–∏–±—Ä–∏–¥–Ω—ã–π Topics Scanner Bot v4.0
–¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π —Ä–µ–∂–∏–º–æ–≤ –±–æ—Ç–∞ –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

–ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞:
- –†–µ–∂–∏–º –±–æ—Ç–∞: –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ Bot API
- –†–µ–∂–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: –ø–æ–ª–Ω—ã–π –¥–æ—Å—Ç—É–ø —á–µ—Ä–µ–∑ MTProto API
- –ú–Ω–æ–≥–æ–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π —Ä–µ–∂–∏–º —Å –æ—á–µ—Ä–µ–¥—å—é –∑–∞–ø—Ä–æ—Å–æ–≤
- –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ —Ö—Ä–∞–Ω–µ–Ω–∏–µ credentials –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
"""

import asyncio
import logging
import signal
import sys
from datetime import datetime
from telethon import TelegramClient, events
from telethon.tl.types import KeyboardButtonCallback
from telethon.tl.custom import Button

# –ò–º–ø–æ—Ä—Ç –º–æ–¥—É–ª–µ–π –±–æ—Ç–∞
from config import (
    BOT_TOKEN, API_ID, API_HASH, APP_NAME, APP_VERSION,
    setup_logging, MESSAGES, PORT, RENDER_EXTERNAL_URL
)
from database import init_database, db_manager
from auth_manager import auth_manager, cleanup_auth
from web_server import create_web_server
from handlers import CommandHandler
from services import service_manager

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logger = setup_logging()

class HybridTopicsBot:
    """–ì–ª–∞–≤–Ω—ã–π –∫–ª–∞—Å—Å –≥–∏–±—Ä–∏–¥–Ω–æ–≥–æ –±–æ—Ç–∞"""
    
    def __init__(self):
        # –û—Å–Ω–æ–≤–Ω–æ–π bot –∫–ª–∏–µ–Ω—Ç (–≤—Å–µ–≥–¥–∞ –∞–∫—Ç–∏–≤–µ–Ω)
        self.bot_client = TelegramClient('bot_session', API_ID, API_HASH)
        
        # –û–±—ä–µ–¥–∏–Ω–µ–Ω–Ω—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã —Å–∏—Å—Ç–µ–º—ã
        self.command_handler = CommandHandler()
        self.service_manager = service_manager
        
        # –í–µ–±-—Å–µ—Ä–≤–µ—Ä
        self.web_server = None
        self.server_runner = None
        
        # –°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã
        self.is_running = False
        self.startup_time = None
        
    async def initialize(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≤—Å–µ—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤"""
        logger.info(f"üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è {APP_NAME} v{APP_VERSION}")
        
        try:
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
            logger.info("üóÑÔ∏è –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...")
            await init_database()
            
            # –ó–∞–ø—É—Å–∫ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ bot –∫–ª–∏–µ–Ω—Ç–∞
            logger.info("ü§ñ –ó–∞–ø—É—Å–∫ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ bot –∫–ª–∏–µ–Ω—Ç–∞...")
            await self.bot_client.start(bot_token=BOT_TOKEN)
            
            # –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –±–æ—Ç–µ
            me = await self.bot_client.get_me()
            logger.info(f"‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω: @{me.username} ({me.first_name})")
            
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
            await self.command_handler.initialize(
                self.bot_client, 
                auth_manager, 
                self.service_manager.limiter,
                self.service_manager.activity
            )
            await self.service_manager.initialize(
                self.command_handler.bot_mode,
                self.command_handler.user_mode,
                self.bot_client
            )
            
            # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–±—ã—Ç–∏–π
            self._register_event_handlers()
            
            # –ó–∞–ø—É—Å–∫ –≤–µ–±-—Å–µ—Ä–≤–µ—Ä–∞
            if RENDER_EXTERNAL_URL:
                await self._start_web_server()
            
            # –ó–∞–ø—É—Å–∫ —Ñ–æ–Ω–æ–≤—ã—Ö –∑–∞–¥–∞—á
            await self.service_manager.start_background_tasks()
            
            self.startup_time = datetime.now()
            self.is_running = True
            
            logger.info("‚úÖ –í—Å–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã")
            logger.info("üéØ –ë–æ—Ç –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ –≤ –≥–∏–±—Ä–∏–¥–Ω–æ–º —Ä–µ–∂–∏–º–µ!")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏: {e}")
            raise
    
    def _register_event_handlers(self):
        """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–±—ã—Ç–∏–π Telegram"""
        
        # === –û–°–ù–û–í–ù–´–ï –ö–û–ú–ê–ù–î–´ ===
        
        @self.bot_client.on(events.NewMessage(pattern='/start'))
        async def start_handler(event):
            """–°—Ç–∞—Ä—Ç–æ–≤–∞—è –∫–æ–º–∞–Ω–¥–∞ —Å –≤—ã–±–æ—Ä–æ–º —Ä–µ–∂–∏–º–∞"""
            try:
                user_id = event.sender_id
                sender = event.sender
                
                # –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
                await db_manager.create_or_update_user(
                    user_id=user_id,
                    telegram_username=getattr(sender, 'username', None),
                    first_name=getattr(sender, 'first_name', None)
                )
                
                if event.is_private:
                    # –í –õ–° –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—ã–±–æ—Ä —Ä–µ–∂–∏–º–∞
                    await self._show_mode_selection(event)
                else:
                    # –í –≥—Ä—É–ø–ø–∞—Ö - —Ä–∞–±–æ—Ç–∞ –≤ –≤—ã–±—Ä–∞–Ω–Ω–æ–º —Ä–µ–∂–∏–º–µ
                    user_data = await db_manager.get_user(user_id)
                    if user_data and user_data['mode'] == 'user':
                        await self.command_handler.handle_start(event, 'user')
                    else:
                        await self.command_handler.handle_start(event, 'bot')
                
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ start_handler: {e}")
                await event.reply(MESSAGES['error_general'].format(error_message=str(e)))
        
        @self.bot_client.on(events.CallbackQuery)
        async def callback_handler(event):
            """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ inline –∫–Ω–æ–ø–æ–∫"""
            try:
                data = event.data.decode('utf-8')
                user_id = event.sender_id
                
                if data == 'mode_bot':
                    await self._set_bot_mode(event, user_id)
                elif data == 'mode_user':
                    await self._set_user_mode(event, user_id)
                elif data == 'show_commands':
                    await self._show_commands_help(event)
                elif data == 'show_faq':
                    # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π event-–ø–æ–¥–æ–±–Ω—ã–π –æ–±—ä–µ–∫—Ç –¥–ª—è FAQ
                    class FakeEvent:
                        def __init__(self, original_event):
                            self.original = original_event
                            self.sender_id = original_event.sender_id
                            self.is_private = True
                        
                        async def reply(self, text, **kwargs):
                            return await self.original.edit(text, **kwargs)
                    
                    fake_event = FakeEvent(event)
                    await self._show_faq_inline(fake_event)
                
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ callback_handler: {e}")
                await event.reply(MESSAGES['error_general'].format(error_message=str(e)))
        
        # === –ö–û–ú–ê–ù–î–´ –°–ö–ê–ù–ò–†–û–í–ê–ù–ò–Ø ===
        
        @self.bot_client.on(events.NewMessage(pattern=r'/scan|/list'))
        async def scan_handler(event):
            """–°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–æ–ø–∏–∫–æ–≤"""
            await self._route_command(event, 'scan')
        
        @self.bot_client.on(events.NewMessage(pattern='/get_all'))
        async def get_all_handler(event):
            """–ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö"""
            await self._route_command(event, 'get_all')
        
        @self.bot_client.on(events.NewMessage(pattern='/get_users'))
        async def get_users_handler(event):
            """–ü–æ–ª—É—á–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
            await self._route_command(event, 'get_users')
        
        @self.bot_client.on(events.NewMessage(pattern='/get_ids'))
        async def get_ids_handler(event):
            """–ü–æ–≤—Ç–æ—Ä–Ω–æ–µ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ ID"""
            await self._route_command(event, 'get_ids')
        
        # === –ö–û–ú–ê–ù–î–´ –£–ü–†–ê–í–õ–ï–ù–ò–Ø ===
        
        @self.bot_client.on(events.NewMessage(pattern='/switch_mode'))
        async def switch_mode_handler(event):
            """–ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —Ä–µ–∂–∏–º–∞"""
            if event.is_private:
                await self._show_mode_selection(event)
            else:
                await event.reply("‚ö†Ô∏è –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —Ä–µ–∂–∏–º–∞ –¥–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–ª—å–∫–æ –≤ –ª–∏—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö")
        
        @self.bot_client.on(events.NewMessage(pattern='/renew_my_api_hash'))
        async def renew_credentials_handler(event):
            """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ API credentials"""
            if event.is_private:
                await self._set_user_mode(event, event.sender_id)
            else:
                await event.reply("‚ö†Ô∏è –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ credentials –¥–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–ª—å–∫–æ –≤ –ª–∏—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö")
        
        @self.bot_client.on(events.NewMessage(pattern='/my_status'))
        async def my_status_handler(event):
            """–°—Ç–∞—Ç—É—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
            await self._show_user_status(event)
        
        @self.bot_client.on(events.NewMessage(pattern='/logout'))
        async def logout_handler(event):
            """–í—ã—Ö–æ–¥ –∏–∑ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ —Ä–µ–∂–∏–º–∞"""
            await self._logout_user(event)
        
        # === –ò–ù–§–û–†–ú–ê–¶–ò–û–ù–ù–´–ï –ö–û–ú–ê–ù–î–´ ===
        
        @self.bot_client.on(events.NewMessage(pattern='/help'))
        async def help_handler(event):
            """–°–ø—Ä–∞–≤–∫–∞"""
            await self._show_help(event)
        
        @self.bot_client.on(events.NewMessage(pattern='/faq'))
        async def faq_handler(event):
            """–ß–∞—Å—Ç—ã–µ –≤–æ–ø—Ä–æ—Å—ã"""
            await self._show_faq(event)
        
        @self.bot_client.on(events.NewMessage(pattern='/stats'))
        async def stats_handler(event):
            """–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"""
            await self._show_stats(event)
        
        @self.bot_client.on(events.NewMessage(pattern='/debug'))
        async def debug_handler(event):
            """–û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è"""
            await self._show_debug(event)
        
        @self.bot_client.on(events.NewMessage(pattern='/queue_status'))
        async def queue_status_handler(event):
            """–°—Ç–∞—Ç—É—Å –æ—á–µ—Ä–µ–¥–∏"""
            await self._show_queue_status(event)
        
        # === –ö–û–ú–ê–ù–î–´ –õ–ò–ú–ò–¢–û–í ===
        
        @self.bot_client.on(events.NewMessage(pattern='/setlimit_(.+)'))
        async def setlimit_handler(event):
            """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –ª–∏–º–∏—Ç–æ–≤ API"""
            await self._handle_setlimit(event)
        
        # === –û–¢–°–õ–ï–ñ–ò–í–ê–ù–ò–ï –ê–ö–¢–ò–í–ù–û–°–¢–ò ===
        
        @self.bot_client.on(events.NewMessage)
        async def activity_tracker_handler(event):
            """–û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
            try:
                # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∫–æ–º–∞–Ω–¥—ã –∏ –ª–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
                if (event.text and event.text.startswith('/')) or event.is_private:
                    return
                
                # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –±–æ—Ç–æ–≤
                if event.sender and hasattr(event.sender, 'bot') and event.sender.bot:
                    return
                
                # –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
                await self.service_manager.activity.track_user_activity(event)
                
            except Exception as e:
                logger.debug(f"–û—à–∏–±–∫–∞ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏: {e}")
        
        # === –û–ë–†–ê–ë–û–¢–ö–ê CREDENTIALS ===
        
        @self.bot_client.on(events.NewMessage)
        async def credentials_handler(event):
            """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö credentials"""
            try:
                if not event.is_private or not event.text:
                    return
                
                # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∫–æ–º–∞–Ω–¥—ã
                if event.text.startswith('/'):
                    return
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –æ–∂–∏–¥–∞–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–≤–æ–¥ credentials
                user_data = await db_manager.get_user(event.sender_id)
                if (user_data and user_data['mode'] == 'bot' and 
                    not user_data.get('api_id_encrypted')):
                    
                    # –ü—ã—Ç–∞–µ–º—Å—è –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –∫–∞–∫ credentials
                    await self._process_credentials(event)
                
            except Exception as e:
                logger.debug(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ credentials: {e}")
    
    async def _route_command(self, event, command: str):
        """–ú–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏—è –∫–æ–º–∞–Ω–¥—ã –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–µ–∂–∏–º–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        try:
            user_id = event.sender_id
            user_data = await db_manager.get_user(user_id)
            
            if user_data and user_data['mode'] == 'user':
                # –î–æ–±–∞–≤–ª—è–µ–º –≤ –æ—á–µ—Ä–µ–¥—å –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ —Ä–µ–∂–∏–º–∞
                task_id = await self.service_manager.queue.add_task(
                    user_id=user_id,
                    command=command,
                    chat_id=event.chat_id,
                    parameters={'event_data': {
                        'chat_id': event.chat_id,
                        'message_id': event.message.id,
                        'sender_id': event.sender_id,
                        'text': event.text
                    }},
                    priority=2
                )
                
                # –£–≤–µ–¥–æ–º–ª—è–µ–º –æ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –≤ –æ—á–µ—Ä–µ–¥—å
                queue_status = await db_manager.get_queue_status(user_id)
                if queue_status['pending'] > 1:
                    position = queue_status['user_position'] or queue_status['pending']
                    estimated_time = f"{position * 30} —Å–µ–∫—É–Ω–¥"
                    
                    await event.reply(MESSAGES['queue_notification'].format(
                        position=position,
                        estimated_time=estimated_time
                    ))
                else:
                    await event.reply("üîÑ **–ó–∞–¥–∞—á–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ –æ—á–µ—Ä–µ–¥—å** - –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –Ω–∞—á–Ω–µ—Ç—Å—è –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è...")
            else:
                # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤ —Ä–µ–∂–∏–º–µ –±–æ—Ç–∞ –Ω–∞–ø—Ä—è–º—É—é (–±–µ–∑ –æ—á–µ—Ä–µ–¥–∏)
                await self.command_handler.route_command(command, event, 'bot')
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏–∏ –∫–æ–º–∞–Ω–¥—ã {command}: {e}")
            await event.reply(MESSAGES['error_general'].format(error_message=str(e)))
    
    async def _show_mode_selection(self, event):
        """–ü–æ–∫–∞–∑–∞—Ç—å –≤—ã–±–æ—Ä —Ä–µ–∂–∏–º–∞ —Ä–∞–±–æ—Ç—ã"""
        buttons = [
            [Button.inline("ü§ñ –†–µ–∂–∏–º –±–æ—Ç–∞ (–±—ã—Å—Ç—Ä—ã–π —Å—Ç–∞—Ä—Ç)", b"mode_bot")],
            [Button.inline("üë§ –†–µ–∂–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–ø–æ–ª–Ω—ã–π –¥–æ—Å—Ç—É–ø)", b"mode_user")],
            [Button.inline("üìã –ü–æ–∫–∞–∑–∞—Ç—å –∫–æ–º–∞–Ω–¥—ã", b"show_commands")],
            [Button.inline("‚ùì –ß–∞—Å—Ç—ã–µ –≤–æ–ø—Ä–æ—Å—ã", b"show_faq")]
        ]
        
        await event.reply(MESSAGES['welcome'], buttons=buttons)
    
    async def _set_bot_mode(self, event, user_id: int):
        """–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ä–µ–∂–∏–º –±–æ—Ç–∞"""
        await db_manager.create_or_update_user(user_id, mode='bot')
        await event.edit(MESSAGES['bot_mode_selected'])
    
    async def _set_user_mode(self, event, user_id: int):
        """–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ä–µ–∂–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        await event.edit(MESSAGES['user_mode_instructions'])
        await db_manager.create_or_update_user(user_id, mode='bot')  # –í—Ä–µ–º–µ–Ω–Ω–æ bot –¥–æ –ø–æ–ª—É—á–µ–Ω–∏—è credentials
    
    async def _process_credentials(self, event):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö credentials"""
        try:
            lines = event.text.strip().split('\n')
            
            if len(lines) != 2:
                await event.reply("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ù—É–∂–Ω–æ 2 —Å—Ç—Ä–æ–∫–∏:\n1. API_ID\n2. API_HASH")
                return
            
            api_id = lines[0].strip()
            api_hash = lines[1].strip()
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º credentials
            success, message = await auth_manager.save_user_credentials(
                event.sender_id, api_id, api_hash
            )
            
            if success:
                await event.reply(MESSAGES['credentials_saved'])
            else:
                await event.reply(f"‚ùå {message}\n\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /renew_my_api_hash")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ credentials: {e}")
            await event.reply(MESSAGES['error_general'].format(error_message=str(e)))
    
    async def _show_user_status(self, event):
        """–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç—É—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        try:
            user_id = event.sender_id
            session_info = await auth_manager.get_session_info(user_id)
            
            response = f"üë§ **–°–¢–ê–¢–£–° –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø**\n\n"
            response += f"üÜî User ID: `{user_id}`\n"
            response += f"üîß –†–µ–∂–∏–º: {session_info['mode']}\n"
            response += f"üìä –°—Ç–∞—Ç—É—Å: {session_info['status']}\n"
            response += f"üîê Credentials: {'‚úÖ –ï—Å—Ç—å' if session_info['has_credentials'] else '‚ùå –ù–µ—Ç'}\n"
            response += f"üîó –ê–∫—Ç–∏–≤–Ω–∞—è —Å–µ—Å—Å–∏—è: {'‚úÖ –î–∞' if session_info['is_session_active'] else '‚ùå –ù–µ—Ç'}\n"
            
            if session_info.get('telegram_user'):
                tg_user = session_info['telegram_user']
                response += f"\nüì± **Telegram –∞–∫–∫–∞—É–Ω—Ç:**\n"
                response += f"‚Ä¢ Username: @{tg_user.get('username', '–Ω–µ —É–∫–∞–∑–∞–Ω')}\n"
                response += f"‚Ä¢ –ò–º—è: {tg_user.get('first_name', '–Ω–µ —É–∫–∞–∑–∞–Ω–æ')}\n"
                response += f"‚Ä¢ –¢–µ–ª–µ—Ñ–æ–Ω: {tg_user.get('phone', '—Å–∫—Ä—ã—Ç')}\n"
            
            await event.reply(response, parse_mode='markdown')
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞: {e}")
            await event.reply(MESSAGES['error_general'].format(error_message=str(e)))
    
    async def _logout_user(self, event):
        """–í—ã—Ö–æ–¥ –∏–∑ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ —Ä–µ–∂–∏–º–∞"""
        try:
            success, message = await auth_manager.logout_user(event.sender_id)
            await event.reply(message)
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ logout: {e}")
            await event.reply(MESSAGES['error_general'].format(error_message=str(e)))
    
    async def _show_stats(self, event):
        """–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Å–∏—Å—Ç–µ–º—ã"""
        try:
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ë–î
            db_stats = await db_manager.get_database_stats()
            
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–µ—Å—Å–∏–π
            session_stats = await auth_manager.get_active_sessions_count()
            
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ—á–µ—Ä–µ–¥–∏
            queue_stats = await db_manager.get_queue_status()
            
            response = f"üìä **–°–¢–ê–¢–ò–°–¢–ò–ö–ê –°–ò–°–¢–ï–ú–´**\n\n"
            
            response += f"üë• **–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:**\n"
            response += f"‚Ä¢ –í—Å–µ–≥–æ: {db_stats['users_count']}\n"
            response += f"‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö: {db_stats['active_users']}\n"
            response += f"‚Ä¢ –í user —Ä–µ–∂–∏–º–µ: {db_stats['user_mode_users']}\n\n"
            
            response += f"üîó **–°–µ—Å—Å–∏–∏:**\n"
            response += f"‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö: {session_stats['total_sessions']}\n"
            response += f"‚Ä¢ –ú–∞–∫—Å–∏–º—É–º: {session_stats['max_sessions']}\n"
            response += f"‚Ä¢ –°–≤–æ–±–æ–¥–Ω–æ: {session_stats['available_slots']}\n\n"
            
            response += f"üìã **–û—á–µ—Ä–µ–¥—å:**\n"
            response += f"‚Ä¢ –û–∂–∏–¥–∞–µ—Ç: {queue_stats['pending']}\n"
            response += f"‚Ä¢ –í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è: {queue_stats['processing']}\n"
            response += f"‚Ä¢ –ó–∞–≤–µ—Ä—à–µ–Ω–æ: {queue_stats['completed']}\n"
            response += f"‚Ä¢ –û—à–∏–±–æ–∫: {queue_stats['failed']}\n\n"
            
            response += f"üìà **–ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å:**\n"
            response += f"‚Ä¢ –ó–∞–ø–∏—Å–µ–π –∑–∞ —Å–µ–≥–æ–¥–Ω—è: {db_stats['activity_data_count']}\n\n"
            
            if self.startup_time:
                uptime = datetime.now() - self.startup_time
                response += f"‚è±Ô∏è **–í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã:** {uptime}\n"
            
            response += f"üîß **–í–µ—Ä—Å–∏—è:** {APP_VERSION}"
            
            await event.reply(response, parse_mode='markdown')
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
            await event.reply(MESSAGES['error_general'].format(error_message=str(e)))
    
    async def _show_queue_status(self, event):
        """–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç—É—Å –æ—á–µ—Ä–µ–¥–∏"""
        try:
            user_id = event.sender_id
            queue_status = await db_manager.get_queue_status(user_id)
            
            response = f"üìã **–°–¢–ê–¢–£–° –û–ß–ï–†–ï–î–ò**\n\n"
            response += f"‚è≥ –û–∂–∏–¥–∞–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {queue_status['pending']}\n"
            response += f"üîÑ –í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è: {queue_status['processing']}\n"
            response += f"‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω–æ –∑–∞ —á–∞—Å: {queue_status['completed']}\n"
            response += f"‚ùå –û—à–∏–±–æ–∫ –∑–∞ —á–∞—Å: {queue_status['failed']}\n\n"
            
            if queue_status['user_position']:
                response += f"üë§ **–í–∞—à–∞ –ø–æ–∑–∏—Ü–∏—è –≤ –æ—á–µ—Ä–µ–¥–∏:** {queue_status['user_position']}\n"
                estimated_time = queue_status['user_position'] * 30
                response += f"‚è±Ô∏è **–ü—Ä–∏–º–µ—Ä–Ω–æ–µ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è:** {estimated_time} —Å–µ–∫—É–Ω–¥\n"
            else:
                response += f"üë§ **–£ –≤–∞—Å –Ω–µ—Ç –∑–∞–¥–∞—á –≤ –æ—á–µ—Ä–µ–¥–∏**\n"
            
            await event.reply(response, parse_mode='markdown')
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –æ—á–µ—Ä–µ–¥–∏: {e}")
            await event.reply(MESSAGES['error_general'].format(error_message=str(e)))
    
    async def _show_commands_help(self, event):
        """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø—Ä–∞–≤–∫—É –ø–æ –∫–æ–º–∞–Ω–¥–∞–º"""
        help_text = """üìã **–ö–û–ú–ê–ù–î–´ –ë–û–¢–ê**

üîç **–°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ:**
‚Ä¢ /scan, /list - —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–æ–ø–∏–∫–æ–≤
‚Ä¢ /get_all - –≤—Å–µ –¥–∞–Ω–Ω—ã–µ (—Ç–æ–ø–∏–∫–∏ + –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å)
‚Ä¢ /get_users - –∞–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏
‚Ä¢ /get_ids - –ø–æ–≤—Ç–æ—Ä–Ω–æ–µ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ

‚öôÔ∏è **–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ:**
‚Ä¢ /switch_mode - –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —Ä–µ–∂–∏–º–∞
‚Ä¢ /renew_my_api_hash - –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ credentials
‚Ä¢ /my_status - —Å—Ç–∞—Ç—É—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
‚Ä¢ /logout - –≤—ã—Ö–æ–¥ –∏–∑ user —Ä–µ–∂–∏–º–∞

‚ÑπÔ∏è **–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:**
‚Ä¢ /help - –ø–æ–¥—Ä–æ–±–Ω–∞—è —Å–ø—Ä–∞–≤–∫–∞
‚Ä¢ /faq - —á–∞—Å—Ç—ã–µ –≤–æ–ø—Ä–æ—Å—ã
‚Ä¢ /stats - —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–∏—Å—Ç–µ–º—ã
‚Ä¢ /debug - –æ—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è

üîß **–õ–∏–º–∏—Ç—ã:**
‚Ä¢ /setlimit_auto - –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π —Ä–µ–∂–∏–º
‚Ä¢ /setlimit_turtle - –º–µ–¥–ª–µ–Ω–Ω—ã–π —Ä–µ–∂–∏–º
‚Ä¢ /setlimit_normal - –æ–±—ã—á–Ω—ã–π —Ä–µ–∂–∏–º
‚Ä¢ /setlimit_burst - –±—ã—Å—Ç—Ä—ã–π —Ä–µ–∂–∏–º

üí° **–°–æ–≤–µ—Ç:** –î–ª—è –ø–æ–ª–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ä–µ–∂–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è!"""
        
        await event.edit(help_text, parse_mode='markdown')
    
    async def _show_help(self, event):
        """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø—Ä–∞–≤–∫—É –ø–æ –∫–æ–º–∞–Ω–¥–∞–º"""
        help_text = f"""ü§ñ **TOPICS SCANNER BOT - –°–ü–†–ê–í–ö–ê**

**üéØ –†–µ–∂–∏–º—ã —Ä–∞–±–æ—Ç—ã:**
ü§ñ **–†–µ–∂–∏–º –±–æ—Ç–∞** - –±—ã—Å—Ç—Ä—ã–π —Å—Ç–∞—Ä—Ç —Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è–º–∏ Bot API
üë§ **–†–µ–∂–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è** - –ø–æ–ª–Ω—ã–π –¥–æ—Å—Ç—É–ø —á–µ—Ä–µ–∑ MTProto API

**üîç –ö–æ–º–∞–Ω–¥—ã —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è:**
‚Ä¢ `/scan`, `/list` - —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–æ–ø–∏–∫–æ–≤
‚Ä¢ `/get_all` - –≤—Å–µ –¥–∞–Ω–Ω—ã–µ (—Ç–æ–ø–∏–∫–∏ + –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å)
‚Ä¢ `/get_users` - –∞–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –∑–∞ —Å–µ–≥–æ–¥–Ω—è
‚Ä¢ `/get_ids` - –ø–æ–≤—Ç–æ—Ä–Ω–æ–µ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ ID

**‚öôÔ∏è –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ:**
‚Ä¢ `/switch_mode` - –ø–µ—Ä–µ–∫–ª—é—á–∏—Ç—å —Ä–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã
‚Ä¢ `/stats` - —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞
‚Ä¢ `/help` - —ç—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞
‚Ä¢ `/faq` - —á–∞—Å—Ç—ã–µ –≤–æ–ø—Ä–æ—Å—ã

**üîß –õ–∏–º–∏—Ç—ã API:**
‚Ä¢ `/setlimit_auto` - –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π —Ä–µ–∂–∏–º
‚Ä¢ `/setlimit_turtle` - –º–µ–¥–ª–µ–Ω–Ω—ã–π —Ä–µ–∂–∏–º (üê¢)
‚Ä¢ `/setlimit_normal` - –æ–±—ã—á–Ω—ã–π —Ä–µ–∂–∏–º (‚ö°)
‚Ä¢ `/setlimit_burst` - –±—ã—Å—Ç—Ä—ã–π —Ä–µ–∂–∏–º (üöÄ)

**üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è:**
–î–ª—è –ø–æ–ª–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞ –∫–æ –≤—Å–µ–º —Ç–æ–ø–∏–∫–∞–º –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ:
`/switch_mode` ‚Üí –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π —Ä–µ–∂–∏–º

**üîß –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:**
‚Ä¢ –í–µ—Ä—Å–∏—è: v{APP_VERSION} (Hybrid Edition)
‚Ä¢ –ü–æ–¥–¥–µ—Ä–∂–∫–∞: —Ñ–æ—Ä—É–º—ã, —Å—É–ø–µ—Ä–≥—Ä—É–ø–ø—ã
‚Ä¢ –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏: –≤–∫–ª—é—á–µ–Ω–æ"""

        await event.reply(help_text, parse_mode='markdown')
    
    async def _show_faq(self, event):
        """–ü–æ–∫–∞–∑–∞—Ç—å FAQ"""
        faq_text = """‚ùì **–ß–ê–°–¢–´–ï –í–û–ü–†–û–°–´**

**1. ü§ñ –ü–æ—á–µ–º—É –Ω–µ –≤—Å–µ —Ç–æ–ø–∏–∫–∏ –ø–æ–∫–∞–∑—ã–≤–∞—é—Ç—Å—è?**
Telegram –æ–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ—Ç –¥–æ—Å—Ç—É–ø –±–æ—Ç–æ–≤ –∫ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ñ–æ—Ä—É–º–∞—Ö. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π —Ä–µ–∂–∏–º –¥–ª—è –ø–æ–ª–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞.

**2. üîÑ –ö–∞–∫ –ø–µ—Ä–µ–∫–ª—é—á–∏—Ç—å—Å—è –Ω–∞ –ø–æ–ª–Ω—ã–π —Ä–µ–∂–∏–º?**
‚Ä¢ –í –õ–° –±–æ—Ç—É: `/switch_mode`
‚Ä¢ –í—ã–±–µ—Ä–∏—Ç–µ "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π —Ä–µ–∂–∏–º"
‚Ä¢ –°–ª–µ–¥—É–π—Ç–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º –ø–æ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ

**3. üîç –ß—Ç–æ —É–º–µ–µ—Ç —Ä–µ–∂–∏–º –±–æ—Ç–∞?**
‚Ä¢ –ë–∞–∑–æ–≤–æ–µ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ç–æ–ø–∏–∫–æ–≤
‚Ä¢ –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
‚Ä¢ –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ –º–µ—Ç–æ–¥—ã –ø–æ–∏—Å–∫–∞ —Ç–æ–ø–∏–∫–æ–≤
‚Ä¢ –í—Å–µ –∫–æ–º–∞–Ω–¥—ã —Ä–∞–±–æ—Ç–∞—é—Ç, –Ω–æ —Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è–º–∏

**4. ‚ö° –ö–∞–∫ —Ä–∞–±–æ—Ç–∞—é—Ç –ª–∏–º–∏—Ç—ã?**
‚Ä¢ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –±–æ–ª—å—à–æ–π –Ω–∞–≥—Ä—É–∑–∫–µ
‚Ä¢ –ü—Ä–∏ >200 —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ ‚Üí –º–µ–¥–ª–µ–Ω–Ω—ã–π —Ä–µ–∂–∏–º
‚Ä¢ –ü—Ä–∏ >500 —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ ‚Üí —á–µ—Ä–µ–ø–∞—à–∏–π —Ä–µ–∂–∏–º
‚Ä¢ –ó–∞—â–∏—Ç–∞ –æ—Ç –±–ª–æ–∫–∏—Ä–æ–≤–æ–∫ Telegram

**5. üë• –ö–∞–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏?**
‚Ä¢ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Ñ–∏–∫—Å–∏—Ä—É–µ—Ç –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è
‚Ä¢ –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π –∑–∞ –¥–µ–Ω—å
‚Ä¢ –î–∞–Ω–Ω—ã–µ —Å–±—Ä–∞—Å—ã–≤–∞—é—Ç—Å—è –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ 00:00
‚Ä¢ –ö–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞ –Ω–µ —Å—á–∏—Ç–∞—é—Ç—Å—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å—é

**üí° –°–æ–≤–µ—Ç:** –î–ª—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π —Ä–µ–∂–∏–º —á–µ—Ä–µ–∑ `/switch_mode`"""

        await event.reply(faq_text, parse_mode='markdown')
    
    async def _show_faq_inline(self, event):
        """FAQ –¥–ª—è inline –∫–Ω–æ–ø–æ–∫"""
        await self._show_faq(event)
    
    async def _show_debug(self, event):
        """–û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è"""
        try:
            if event.is_private:
                await event.reply("‚ö†Ô∏è **–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –≤ —Å—É–ø–µ—Ä–≥—Ä—É–ø–ø–∞—Ö!**")
                return
            
            chat = await event.get_chat()
            
            response = "üîß **–û–¢–õ–ê–î–û–ß–ù–ê–Ø –ò–ù–§–û–†–ú–ê–¶–ò–Ø**\n\n"
            
            response += "üìä **–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —á–∞—Ç–µ:**\n"
            response += f"‚Ä¢ ID: {chat.id}\n"
            response += f"‚Ä¢ –ù–∞–∑–≤–∞–Ω–∏–µ: {chat.title}\n"
            response += f"‚Ä¢ –¢–∏–ø: {type(chat).__name__}\n"
            response += f"‚Ä¢ –ú–µ–≥–∞–≥—Ä—É–ø–ø–∞: {hasattr(chat, 'megagroup') and chat.megagroup}\n"
            response += f"‚Ä¢ –§–æ—Ä—É–º: {hasattr(chat, 'forum') and chat.forum}\n\n"
            
            response += "ü§ñ **–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ—Ç–µ:**\n"
            response += f"‚Ä¢ Telethon –ø–æ–¥–∫–ª—é—á–µ–Ω: {self.bot_client.is_connected()}\n"
            response += f"‚Ä¢ –í–µ—Ä—Å–∏—è: {APP_VERSION}\n\n"
            
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–µ—Ä–≤–∏—Å–æ–≤
            health = self.service_manager.get_health_status()
            response += "üîß **–°—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–∏—Å–æ–≤:**\n"
            response += f"‚Ä¢ –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: {'‚úÖ' if health['activity']['is_running'] else '‚ùå'}\n"
            response += f"‚Ä¢ –õ–∏–º–∏—Ç–µ—Ä: {'‚úÖ' if health['limiter']['is_running'] else '‚ùå'}\n"
            response += f"‚Ä¢ –û—á–µ—Ä–µ–¥—å: {'‚úÖ' if health['queue']['is_processing'] else '‚ùå'}\n"
            response += f"‚Ä¢ –û–±—â–µ–µ –∑–¥–æ—Ä–æ–≤—å–µ: {'‚úÖ' if health['overall_healthy'] else '‚ùå'}\n"
            
            await event.reply(response, parse_mode='markdown')
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ debug: {e}")
            await event.reply(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ç–ª–∞–¥–æ—á–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏: {str(e)}")
    
    async def _handle_setlimit(self, event):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥ –ª–∏–º–∏—Ç–æ–≤"""
        try:
            command_text = event.text
            if '/setlimit_' not in command_text:
                return False
            
            mode = command_text.split('/setlimit_')[1].strip()
            limiter = self.service_manager.limiter
            
            if mode == 'auto':
                limiter.auto_mode_enabled = True
                limiter.set_mode('normal', 'auto_enabled')
                response = "üîÑ **–ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–ò–ô –†–ï–ñ–ò–ú –õ–ò–ú–ò–¢–û–í**\n\n"
                response += "‚Ä¢ –ü–æ–¥—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç—Å—è –ø–æ–¥ —Ä–∞–∑–º–µ—Ä –≥—Ä—É–ø–ø—ã\n"
                response += "‚Ä¢ –û–ø—Ç–∏–º–∞–ª—å–Ω–∞—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å\n"
                response += "‚Ä¢ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ: –í–ö–õ–Æ–ß–ï–ù–û"
            elif mode in ['turtle', 'low', 'normal', 'burst']:
                limiter.set_mode(mode, 'manual')
                limiter.auto_mode_enabled = False
                
                from config import API_LIMITS
                mode_info = API_LIMITS[mode]
                status = limiter.get_status()
                
                response = f"{mode_info['name']} **–†–ï–ñ–ò–ú –õ–ò–ú–ò–¢–û–í**\n\n"
                response += f"‚Ä¢ –ó–∞–ø—Ä–æ—Å–æ–≤ –≤ —á–∞—Å: {status['max_requests_hour']}\n"
                response += f"‚Ä¢ Cooldown: {status['cooldown_seconds']} —Å–µ–∫—É–Ω–¥\n"
                response += f"‚Ä¢ –ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ: {mode_info['description']}\n"
                response += f"‚Ä¢ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π —Ä–µ–∂–∏–º: –û–¢–ö–õ–Æ–ß–ï–ù"
            else:
                await event.reply("‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ä–µ–∂–∏–º –ª–∏–º–∏—Ç–æ–≤")
                return
            
            await event.reply(response, parse_mode='markdown')
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ setlimit: {e}")
            await event.reply(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")
    
    async def _start_web_server(self):
        """–ó–∞–ø—É—Å–∫ –≤–µ–±-—Å–µ—Ä–≤–µ—Ä–∞"""
        try:
            self.web_server, self.server_runner = await create_web_server(
                port=PORT,
                auth_manager=auth_manager,
                db_manager=db_manager,
                queue_manager=self.service_manager.queue
            )
            logger.info(f"üåê –í–µ–±-—Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É {PORT}")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –≤–µ–±-—Å–µ—Ä–≤–µ—Ä–∞: {e}")
    
    async def shutdown(self):
        """–ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã"""
        logger.info("üõë –ù–∞—á–∞–ª–æ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è...")
        
        self.is_running = False
        
        try:
            # –ó–∞–∫—Ä—ã—Ç–∏–µ –≤—Å–µ—Ö —Å–µ—Ä–≤–∏—Å–æ–≤
            await self.service_manager.cleanup()
            
            # –ó–∞–∫—Ä—ã—Ç–∏–µ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö —Å–µ—Å—Å–∏–π
            await cleanup_auth()
            
            # –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤–µ–±-—Å–µ—Ä–≤–µ—Ä–∞
            if self.server_runner:
                await self.server_runner.cleanup()
            
            # –û—Ç–∫–ª—é—á–µ–Ω–∏–µ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –±–æ—Ç–∞
            if self.bot_client.is_connected():
                await self.bot_client.disconnect()
            
            logger.info("‚úÖ –ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏: {e}")
    
    async def run(self):
        """–û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞"""
        try:
            await self.initialize()
            logger.info("üéØ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!")
            
            # –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª
            await self.bot_client.run_until_disconnected()
            
        except KeyboardInterrupt:
            logger.info("‚èπÔ∏è –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –æ—Å—Ç–∞–Ω–æ–≤–∫–∏")
        except Exception as e:
            logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
            raise
        finally:
            await self.shutdown()

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞
bot = HybridTopicsBot()

def signal_handler(signum, frame):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–∏–≥–Ω–∞–ª–æ–≤ –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è"""
    logger.info(f"üì° –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª {signum}, –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã...")
    asyncio.create_task(bot.shutdown())
    sys.exit(0)

async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–∏–≥–Ω–∞–ª–æ–≤
    signal.signal(signal.SIGINT, signal_handler)
    signal.signal(signal.SIGTERM, signal_handler)
    
    try:
        await bot.run()
    except Exception as e:
        logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ main: {e}")
        sys.exit(1)

if __name__ == '__main__':
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        logger.info("‚èπÔ∏è –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–æ—Ç–∞...")
    except Exception as e:
        logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        sys.exit(1)