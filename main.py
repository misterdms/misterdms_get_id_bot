#!/usr/bin/env python3
"""
ü§ñ –ì–∏–±—Ä–∏–¥–Ω—ã–π Topics Scanner Bot v4.1
–¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π —Ä–µ–∂–∏–º–æ–≤ –±–æ—Ç–∞ –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
–ò–°–ü–†–ê–í–õ–ï–ù–û: –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π, –ª–æ–≥–∏–∫–∞ credentials, —Ü–∏–∫–ª–∏—á–µ—Å–∫–∏–µ –∏–º–ø–æ—Ä—Ç—ã
"""

import asyncio
import logging
import signal
import sys
from datetime import datetime

# –û—Å–Ω–æ–≤–Ω—ã–µ –∏–º–ø–æ—Ä—Ç—ã Telegram
from telethon import TelegramClient, events
from telethon.tl.custom import Button

# –ë–µ–∑–æ–ø–∞—Å–Ω—ã–µ –∏–º–ø–æ—Ä—Ç—ã –º–æ–¥—É–ª–µ–π –±–æ—Ç–∞
try:
    from config import (
        BOT_TOKEN, API_ID, API_HASH, APP_NAME, APP_VERSION,
        setup_logging, MESSAGES, PORT, RENDER_EXTERNAL_URL,
        DEVELOPMENT_MODE, ADMIN_USER_ID, BUSINESS_CONTACT_ID
    )
except ImportError as e:
    print(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ config: {e}")
    sys.exit(1)

try:
    from database import init_database, db_manager
except ImportError as e:
    print(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ database: {e}")
    sys.exit(1)

try:
    from auth_manager import auth_manager, cleanup_auth
except ImportError as e:
    print(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ auth_manager: {e}")
    sys.exit(1)

try:
    from handlers import CommandHandler
except ImportError as e:
    print(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ handlers: {e}")
    sys.exit(1)

try:
    from services import service_manager
except ImportError as e:
    print(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ services: {e}")
    sys.exit(1)

try:
    from utils import send_long_message, MessageUtils
except ImportError as e:
    print(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ utils: {e}")
    # Fallback —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
    async def send_long_message(event, text, **kwargs):
        try:
            await event.reply(text, **kwargs)
        except Exception as ex:
            print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {ex}")

# –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ –∏–º–ø–æ—Ä—Ç—ã
try:
    from web_server import create_web_server
    web_server_available = True
except ImportError as e:
    print(f"‚ö†Ô∏è –í–µ–±-—Å–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {e}")
    web_server_available = False

try:
    from security import security_manager
    security_available = True
except ImportError as e:
    print(f"‚ö†Ô∏è –°–∏—Å—Ç–µ–º–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞: {e}")
    security_available = False

try:
    from analytics import analytics
    analytics_available = True
except ImportError as e:
    print(f"‚ö†Ô∏è –ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞: {e}")
    analytics_available = False

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logger = setup_logging()

class HybridTopicsBot:
    """–ì–ª–∞–≤–Ω—ã–π –∫–ª–∞—Å—Å –≥–∏–±—Ä–∏–¥–Ω–æ–≥–æ –±–æ—Ç–∞"""
    
    def __init__(self):
        # –û—Å–Ω–æ–≤–Ω–æ–π bot –∫–ª–∏–µ–Ω—Ç (–≤—Å–µ–≥–¥–∞ –∞–∫—Ç–∏–≤–µ–Ω)
        self.bot_client = TelegramClient('bot_session', API_ID, API_HASH)
        
        # –û–±—ä–µ–¥–∏–Ω–µ–Ω–Ω—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã —Å–∏—Å—Ç–µ–º—ã
        self.command_handler = CommandHandler()
        self.service_manager = service_manager
        
        # –í–µ–±-—Å–µ—Ä–≤–µ—Ä
        self.web_server = None
        self.server_runner = None
        
        # –°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã
        self.is_running = False
        self.startup_time = None
        
        # –§–ª–∞–≥ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–∞–Ω–¥
        self.is_processing_command = {}
        
    async def initialize(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≤—Å–µ—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤"""
        logger.info(f"üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è {APP_NAME} v{APP_VERSION}")
        
        try:
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
            logger.info("üóÑÔ∏è –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...")
            await init_database()
            
            # –ó–∞–ø—É—Å–∫ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ bot –∫–ª–∏–µ–Ω—Ç–∞
            logger.info("ü§ñ –ó–∞–ø—É—Å–∫ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ bot –∫–ª–∏–µ–Ω—Ç–∞...")
            await self.bot_client.start(bot_token=BOT_TOKEN)
            
            # –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –±–æ—Ç–µ
            me = await self.bot_client.get_me()
            logger.info(f"‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω: @{me.username} ({me.first_name})")
            
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
            await self.command_handler.initialize(
                self.bot_client, 
                auth_manager, 
                self.service_manager.limiter,
                self.service_manager.activity
            )
            await self.service_manager.initialize(
                self.command_handler.bot_mode,
                self.command_handler.user_mode,
                self.bot_client
            )
            
            # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–±—ã—Ç–∏–π
            self._register_event_handlers()
            
            # –ó–∞–ø—É—Å–∫ –≤–µ–±-—Å–µ—Ä–≤–µ—Ä–∞
            if web_server_available and RENDER_EXTERNAL_URL:
                await self._start_web_server()
            
            # –ó–∞–ø—É—Å–∫ —Ñ–æ–Ω–æ–≤—ã—Ö –∑–∞–¥–∞—á
            await self.service_manager.start_background_tasks()
            
            self.startup_time = datetime.now()
            self.is_running = True
            
            logger.info("‚úÖ –í—Å–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã")
            logger.info("üéØ –ë–æ—Ç –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ –≤ –≥–∏–±—Ä–∏–¥–Ω–æ–º —Ä–µ–∂–∏–º–µ!")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏: {e}")
            raise
    
    def _register_event_handlers(self):
        """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–±—ã—Ç–∏–π Telegram - –ò–°–ü–†–ê–í–õ–ï–ù–û"""
        
        # === –ì–õ–ê–í–ù–´–ô –û–ë–†–ê–ë–û–¢–ß–ò–ö –ö–û–ú–ê–ù–î –ò –°–û–û–ë–©–ï–ù–ò–ô ===
        @self.bot_client.on(events.NewMessage)
        async def main_message_handler(event):
            """–ì–ª–∞–≤–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—Å–µ—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
            try:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è –ª–∏ —É–∂–µ –∫–æ–º–∞–Ω–¥–∞ –æ—Ç —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                user_id = event.sender_id
                if user_id in self.is_processing_command:
                    logger.debug(f"‚è≥ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {user_id} —É–∂–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è")
                    return
                
                # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥ –æ–±—Ä–∞–±–æ—Ç–∫–∏
                self.is_processing_command[user_id] = True
                
                try:
                    # 1. –ü–†–û–í–ï–†–ö–ê –†–ï–ñ–ò–ú–ê –†–ê–ó–†–ê–ë–û–¢–ö–ò
                    if DEVELOPMENT_MODE:
                        if security_available:
                            if not security_manager.is_trusted_user(user_id):
                                logger.info(f"üîß –†–µ–∂–∏–º —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏: –±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id}")
                                await send_long_message(event, MESSAGES.get('dev_message', 
                                    "üîß **–†–µ–∂–∏–º —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏**\n\n–ë–æ—Ç –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π."))
                                return
                        else:
                            if user_id != ADMIN_USER_ID:
                                logger.info(f"üîß –†–µ–∂–∏–º —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏: –±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id}")
                                await send_long_message(event, MESSAGES.get('dev_message', 
                                    "üîß **–†–µ–∂–∏–º —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏**\n\n–ë–æ—Ç –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π."))
                                return
                    
                    # 2. –ü–†–û–í–ï–†–ö–ê –ë–ï–ó–û–ü–ê–°–ù–û–°–¢–ò
                    if security_available:
                        is_allowed, message = security_manager.is_user_allowed(user_id)
                        if not is_allowed:
                            logger.warning(f"üö´ –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω –¥–ª—è {user_id}: {message}")
                            await send_long_message(event, message)
                            if analytics_available:
                                analytics.track_error(user_id, 'access_denied', message)
                            return
                        
                        # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã–π –∑–∞–ø—Ä–æ—Å
                        security_manager.record_request(user_id, event.text or 'message', 
                                                     'private' if event.is_private else 'group')
                    
                    # 3. –û–ë–†–ê–ë–û–¢–ö–ê –ö–û–ú–ê–ù–î
                    if event.text and event.text.startswith('/'):
                        await self._process_command(event)
                    
                    # 4. –û–ë–†–ê–ë–û–¢–ö–ê CREDENTIALS (–ò–°–ü–†–ê–í–õ–ï–ù–û!)
                    elif event.is_private and event.text:
                        credentials_processed = await self.command_handler.process_credentials(event)
                        if credentials_processed:
                            logger.info(f"‚úÖ Credentials –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
                            return
                    
                    # 5. –û–¢–°–õ–ï–ñ–ò–í–ê–ù–ò–ï –ê–ö–¢–ò–í–ù–û–°–¢–ò (—Ç–æ–ª—å–∫–æ –≤ –≥—Ä—É–ø–ø–∞—Ö)
                    if not event.is_private and event.text and not event.text.startswith('/'):
                        await self._track_activity(event)
                    
                finally:
                    # –£–±–∏—Ä–∞–µ–º —Ñ–ª–∞–≥ –æ–±—Ä–∞–±–æ—Ç–∫–∏
                    if user_id in self.is_processing_command:
                        del self.is_processing_command[user_id]
                        
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ main_message_handler: {e}")
                try:
                    await send_long_message(event, f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}")
                except:
                    pass
                finally:
                    # –£–±–∏—Ä–∞–µ–º —Ñ–ª–∞–≥ –ø—Ä–∏ –æ—à–∏–±–∫–µ
                    user_id = event.sender_id
                    if user_id in self.is_processing_command:
                        del self.is_processing_command[user_id]
        
        # === –û–ë–†–ê–ë–û–¢–ß–ò–ö CALLBACK –ö–ù–û–ü–û–ö ===
        @self.bot_client.on(events.CallbackQuery)
        async def callback_handler(event):
            """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ inline –∫–Ω–æ–ø–æ–∫"""
            try:
                data = event.data.decode('utf-8')
                user_id = event.sender_id
                
                logger.info(f"üîò Callback {data} –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
                
                # –ê–Ω–∞–ª–∏—Ç–∏–∫–∞ callback
                correlation_id = ""
                if analytics_available:
                    correlation_id = analytics.track_command(user_id, f'callback_{data}')
                
                if data == 'mode_bot':
                    await self._set_bot_mode(event, user_id)
                elif data == 'mode_user':
                    await self._set_user_mode(event, user_id)
                elif data == 'show_commands':
                    await self._show_commands_help(event)
                elif data == 'show_faq':
                    await self._show_faq_inline(event)
                elif data == 'main_menu':
                    await self._show_mode_selection(event)
                elif data == 'back':
                    await self._show_mode_selection(event)
                
                # –£—Å–ø–µ—à–Ω–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞
                if analytics_available:
                    analytics.track_event('callback_completed', user_id, 
                                         {'callback_data': data}, correlation_id)
                
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ callback_handler: {e}")
                if analytics_available:
                    analytics.track_error(event.sender_id, 'callback_error', str(e))
                try:
                    await event.edit("‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–Ω–æ–ø–∫–∏")
                except:
                    pass
    
    async def _process_command(self, event):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã"""
        try:
            user_id = event.sender_id
            command = event.text.split()[0].lower()
            command_name = command[1:] if command.startswith('/') else command
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
            if hasattr(event, 'sender'):
                sender = event.sender
                await db_manager.create_or_update_user(
                    user_id=user_id,
                    telegram_username=getattr(sender, 'username', None),
                    first_name=getattr(sender, 'first_name', None)
                )
            
            # –û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã
            if command_name == 'start':
                await self._handle_start(event)
            elif command_name in ['scan', 'list']:
                await self._route_command(event, 'scan')
            elif command_name == 'get_all':
                await self._route_command(event, 'get_all')
            elif command_name == 'get_users':
                await self._route_command(event, 'get_users')
            elif command_name == 'get_ids':
                await self._route_command(event, 'get_ids')
            elif command_name == 'switch_mode':
                await self._handle_switch_mode(event)
            elif command_name == 'renew_my_api_hash':
                await self._handle_renew_credentials(event)
            elif command_name == 'my_status':
                await self._show_user_status(event)
            elif command_name == 'logout':
                await self._logout_user(event)
            elif command_name in ['yo_bro', 'buy_bots', 'donate']:
                await self.command_handler.handle_contact_commands(event, command_name)
            elif command_name == 'help':
                await self._show_help(event)
            elif command_name == 'faq':
                await self._show_faq(event)
            elif command_name == 'stats':
                await self._show_stats(event)
            elif command_name == 'debug':
                await self._show_debug(event)
            elif command_name == 'queue_status':
                await self._show_queue_status(event)
            elif command_name.startswith('setlimit_'):
                await self._handle_setlimit(event, command_name)
            else:
                # –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞
                logger.warning(f"‚ö†Ô∏è –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞: {command_name}")
                await send_long_message(event, f"‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞: /{command_name}\n\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è —Å–ø—Ä–∞–≤–∫–∏")
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–∞–Ω–¥—ã: {e}")
            await send_long_message(event, f"‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã: {str(e)}")
    
    async def _handle_start(self, event):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start"""
        try:
            user_id = event.sender_id
            chat_type = 'private' if event.is_private else 'group'
            logger.info(f"üöÄ /start –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –≤ {chat_type}")
            
            # –ê–Ω–∞–ª–∏—Ç–∏–∫–∞
            correlation_id = ""
            if analytics_available:
                correlation_id = analytics.track_command(user_id, '/start', chat_type)
            
            if event.is_private:
                # –í –õ–° –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—ã–±–æ—Ä —Ä–µ–∂–∏–º–∞ —Å inline –∫–Ω–æ–ø–∫–∞–º–∏
                await self._show_mode_selection(event)
            else:
                # –í –≥—Ä—É–ø–ø–∞—Ö - —Ä–∞–±–æ—Ç–∞ –≤ –≤—ã–±—Ä–∞–Ω–Ω–æ–º —Ä–µ–∂–∏–º–µ
                user_data = await db_manager.get_user(user_id)
                if user_data and user_data['mode'] == 'user':
                    await self.command_handler.handle_start(event, 'user')
                else:
                    await self.command_handler.handle_start(event, 'bot')
            
            # –£—Å–ø–µ—à–Ω–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞
            if analytics_available:
                analytics.track_event('start_completed', user_id, 
                                     {'success': True, 'chat_type': chat_type}, correlation_id)
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ _handle_start: {e}")
            if analytics_available:
                analytics.track_error(event.sender_id, 'start_error', str(e))
            await send_long_message(event, f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")
    
    async def _route_command(self, event, command: str):
        """–ú–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏—è –∫–æ–º–∞–Ω–¥—ã –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–µ–∂–∏–º–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        try:
            user_id = event.sender_id
            user_data = await db_manager.get_user(user_id)
            
            # –ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –∫–æ–º–∞–Ω–¥—ã
            correlation_id = ""
            if analytics_available:
                correlation_id = analytics.track_command(user_id, command, 
                                                       'private' if event.is_private else 'group')
            
            if user_data and user_data['mode'] == 'user':
                # –î–æ–±–∞–≤–ª—è–µ–º –≤ –æ—á–µ—Ä–µ–¥—å –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ —Ä–µ–∂–∏–º–∞
                task_id = await self.service_manager.queue.add_task(
                    user_id=user_id,
                    command=command,
                    chat_id=event.chat_id,
                    parameters={'event_data': {
                        'chat_id': event.chat_id,
                        'message_id': event.message.id,
                        'sender_id': event.sender_id,
                        'text': event.text,
                        'correlation_id': correlation_id
                    }},
                    priority=2,
                    original_event=event
                )
                
                # –£–≤–µ–¥–æ–º–ª—è–µ–º –æ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –≤ –æ—á–µ—Ä–µ–¥—å
                queue_status = await self.service_manager.queue.get_queue_status()
                if queue_status['pending'] > 1:
                    position = queue_status.get('pending', 1)
                    estimated_time = f"{position * 30} —Å–µ–∫—É–Ω–¥"
                    
                    queue_msg = MESSAGES.get('queue_notification', 
                        "üïê –í–∞—à –∑–∞–ø—Ä–æ—Å –¥–æ–±–∞–≤–ª–µ–Ω –≤ –æ—á–µ—Ä–µ–¥—å.\n–ü–æ–∑–∏—Ü–∏—è: {position}\n–ü—Ä–∏–º–µ—Ä–Ω–æ–µ –≤—Ä–µ–º—è: {estimated_time}")
                    
                    await send_long_message(event, queue_msg.format(
                        position=position,
                        estimated_time=estimated_time
                    ))
                else:
                    await send_long_message(event, "üîÑ **–ó–∞–¥–∞—á–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ –æ—á–µ—Ä–µ–¥—å** - –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –Ω–∞—á–Ω–µ—Ç—Å—è –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è...")
                    
                if analytics_available:
                    analytics.track_event('command_queued', user_id, {
                        'command': command,
                        'task_id': task_id
                    }, correlation_id)
            else:
                # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤ —Ä–µ–∂–∏–º–µ –±–æ—Ç–∞ –Ω–∞–ø—Ä—è–º—É—é
                success = await self.command_handler.route_command(command, event, 'bot')
                
                if analytics_available:
                    analytics.track_event('command_executed_bot_mode', user_id, {
                        'command': command,
                        'success': success
                    }, correlation_id)
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏–∏ –∫–æ–º–∞–Ω–¥—ã {command}: {e}")
            if analytics_available:
                analytics.track_error(event.sender_id, 'command_routing_error', str(e))
            await send_long_message(event, f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")
    
    async def _handle_switch_mode(self, event):
        """–ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —Ä–µ–∂–∏–º–∞"""
        correlation_id = ""
        if analytics_available:
            correlation_id = analytics.track_command(event.sender_id, '/switch_mode')
        
        if event.is_private:
            await self._show_mode_selection(event)
            if analytics_available:
                analytics.track_event('mode_switch_opened', event.sender_id, {}, correlation_id)
        else:
            await send_long_message(event, "‚ö†Ô∏è –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —Ä–µ–∂–∏–º–∞ –¥–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–ª—å–∫–æ –≤ –ª–∏—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö")
    
    async def _handle_renew_credentials(self, event):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ API credentials"""
        correlation_id = ""
        if analytics_available:
            correlation_id = analytics.track_command(event.sender_id, '/renew_my_api_hash')
        
        if event.is_private:
            await self._set_user_mode(event, event.sender_id)
            if analytics_available:
                analytics.track_event('credentials_renewal_started', event.sender_id, {}, correlation_id)
        else:
            await send_long_message(event, "‚ö†Ô∏è –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ credentials –¥–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–ª—å–∫–æ –≤ –ª–∏—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö")
    
    async def _track_activity(self, event):
        """–û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
        try:
            # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –±–æ—Ç–æ–≤
            if event.sender and hasattr(event.sender, 'bot') and event.sender.bot:
                return
            
            # –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
            await self.service_manager.activity.track_user_activity(event)
            
        except Exception as e:
            logger.debug(f"–û—à–∏–±–∫–∞ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏: {e}")
    
    async def _show_mode_selection(self, event):
        """–ü–æ–∫–∞–∑–∞—Ç—å –≤—ã–±–æ—Ä —Ä–µ–∂–∏–º–∞ —Ä–∞–±–æ—Ç—ã —Å inline –∫–Ω–æ–ø–∫–∞–º–∏"""
        correlation_id = ""
        if analytics_available:
            correlation_id = analytics.track_command(event.sender_id, 'mode_selection_shown')
        
        buttons = [
            [Button.inline("ü§ñ –†–µ–∂–∏–º –±–æ—Ç–∞ (–±—ã—Å—Ç—Ä—ã–π —Å—Ç–∞—Ä—Ç)", b"mode_bot")],
            [Button.inline("üë§ –†–µ–∂–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–ø–æ–ª–Ω—ã–π –¥–æ—Å—Ç—É–ø)", b"mode_user")],
            [Button.inline("üìã –ü–æ–∫–∞–∑–∞—Ç—å –∫–æ–º–∞–Ω–¥—ã", b"show_commands")],
            [Button.inline("‚ùì –ß–∞—Å—Ç—ã–µ –≤–æ–ø—Ä–æ—Å—ã", b"show_faq")]
        ]
        
        welcome_msg = MESSAGES.get('welcome', 
            "ü§ñ **–ì–ò–ë–†–ò–î–ù–´–ô TOPICS SCANNER BOT v4.1**\n\n–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã:")
        
        try:
            if hasattr(event, 'edit'):
                await event.edit(welcome_msg, buttons=buttons, parse_mode='markdown')
            else:
                await send_long_message(event, welcome_msg, buttons=buttons, parse_mode='markdown')
        except:
            await send_long_message(event, welcome_msg, buttons=buttons, parse_mode='markdown')
        
        if analytics_available:
            analytics.track_event('mode_selection_shown', event.sender_id, {}, correlation_id)
    
    async def _set_bot_mode(self, event, user_id: int):
        """–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ä–µ–∂–∏–º –±–æ—Ç–∞"""
        correlation_id = ""
        if analytics_available:
            correlation_id = analytics.track_command(user_id, 'bot_mode_selected')
        
        await db_manager.create_or_update_user(user_id, mode='bot')
        
        bot_mode_msg = MESSAGES.get('bot_mode_selected', 
            "ü§ñ **–†–ï–ñ–ò–ú –ë–û–¢–ê –ê–ö–¢–ò–í–ò–†–û–í–ê–ù**\n\n‚úÖ –ë—ã—Å—Ç—Ä—ã–π —Å—Ç–∞—Ä—Ç –±–µ–∑ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫")
        
        await event.edit(bot_mode_msg, parse_mode='markdown')
        
        if analytics_available:
            analytics.track_event('mode_changed', user_id, {
                'new_mode': 'bot'
            }, correlation_id)
    
    async def _set_user_mode(self, event, user_id: int):
        """–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ä–µ–∂–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        correlation_id = ""
        if analytics_available:
            correlation_id = analytics.track_command(user_id, 'user_mode_selected')
        
        user_mode_msg = MESSAGES.get('user_mode_instructions', 
            "üë§ **–ù–ê–°–¢–†–û–ô–ö–ê –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–¨–°–ö–û–ì–û –†–ï–ñ–ò–ú–ê**\n\n–û—Ç–ø—Ä–∞–≤—å—Ç–µ API_ID –∏ API_HASH (–ø–æ –æ–¥–Ω–æ–º—É –Ω–∞ —Å—Ç—Ä–æ–∫—É)")
        
        await event.edit(user_mode_msg, parse_mode='markdown')
        await db_manager.create_or_update_user(user_id, mode='bot')  # –í—Ä–µ–º–µ–Ω–Ω–æ bot –¥–æ –ø–æ–ª—É—á–µ–Ω–∏—è credentials
        
        if analytics_available:
            analytics.track_event('user_mode_instructions_shown', user_id, {}, correlation_id)
    
    async def _show_user_status(self, event):
        """–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç—É—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        try:
            user_id = event.sender_id
            correlation_id = ""
            if analytics_available:
                correlation_id = analytics.track_command(user_id, '/my_status')
            
            session_info = await auth_manager.get_session_info(user_id)
            
            security_status = {}
            if security_available:
                security_status = security_manager.get_security_status(user_id)
            
            response = f"üë§ **–°–¢–ê–¢–£–° –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø**\n\n"
            response += f"üÜî User ID: `{user_id}`\n"
            response += f"üîß –†–µ–∂–∏–º: {session_info.get('mode', '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}\n"
            response += f"üìä –°—Ç–∞—Ç—É—Å: {session_info.get('status', '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}\n"
            response += f"üîê Credentials: {'‚úÖ –ï—Å—Ç—å' if session_info.get('has_credentials') else '‚ùå –ù–µ—Ç'}\n"
            response += f"üîó –ê–∫—Ç–∏–≤–Ω–∞—è —Å–µ—Å—Å–∏—è: {'‚úÖ –î–∞' if session_info.get('is_session_active') else '‚ùå –ù–µ—Ç'}\n\n"
            
            # –õ–∏–º–∏—Ç—ã –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
            if security_available:
                user_limits = security_status.get('user_limits', {})
                response += f"üõ°Ô∏è **–ë–ï–ó–û–ü–ê–°–ù–û–°–¢–¨:**\n"
                response += f"‚Ä¢ –ó–∞–ø—Ä–æ—Å–æ–≤ —Å–µ–≥–æ–¥–Ω—è: {user_limits.get('requests_today', 0)}\n"
                response += f"‚Ä¢ –î–æ–≤–µ—Ä–µ–Ω–Ω—ã–π: {'‚úÖ' if user_limits.get('is_trusted', False) else '‚ùå'}\n"
                response += f"‚Ä¢ Cooldown: {user_limits.get('cooldown_remaining', 0):.0f}—Å\n\n"
            
            await send_long_message(event, response, parse_mode='markdown')
            
            if analytics_available:
                analytics.track_event('user_status_viewed', user_id, {}, correlation_id)
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞: {e}")
            await send_long_message(event, f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")
    
    async def _logout_user(self, event):
        """–í—ã—Ö–æ–¥ –∏–∑ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ —Ä–µ–∂–∏–º–∞"""
        try:
            correlation_id = ""
            if analytics_available:
                correlation_id = analytics.track_command(event.sender_id, '/logout')
            
            success, message = await auth_manager.logout_user(event.sender_id)
            await send_long_message(event, message)
            
            if analytics_available:
                analytics.track_event('user_logout', event.sender_id, {
                    'success': success
                }, correlation_id)
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ logout: {e}")
            await send_long_message(event, f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")
    
    async def _show_help(self, event):
        """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø—Ä–∞–≤–∫—É"""
        correlation_id = ""
        if analytics_available:
            correlation_id = analytics.track_command(event.sender_id, '/help')
        
        help_text = f"""üìã **–°–ü–†–ê–í–ö–ê –ü–û –ö–û–ú–ê–ù–î–ê–ú**

üîç **–°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ:**
‚Ä¢ /scan, /list - —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–æ–ø–∏–∫–æ–≤
‚Ä¢ /get_all - –≤—Å–µ –¥–∞–Ω–Ω—ã–µ (—Ç–æ–ø–∏–∫–∏ + –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å)
‚Ä¢ /get_users - –∞–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏
‚Ä¢ /get_ids - –ø–æ–≤—Ç–æ—Ä–Ω–æ–µ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ

‚öôÔ∏è **–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ:**
‚Ä¢ /switch_mode - –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —Ä–µ–∂–∏–º–∞
‚Ä¢ /renew_my_api_hash - –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ credentials
‚Ä¢ /my_status - —Å—Ç–∞—Ç—É—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
‚Ä¢ /logout - –≤—ã—Ö–æ–¥ –∏–∑ user —Ä–µ–∂–∏–º–∞

‚ÑπÔ∏è **–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:**
‚Ä¢ /help - –ø–æ–¥—Ä–æ–±–Ω–∞—è —Å–ø—Ä–∞–≤–∫–∞
‚Ä¢ /faq - —á–∞—Å—Ç—ã–µ –≤–æ–ø—Ä–æ—Å—ã
‚Ä¢ /stats - —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–∏—Å—Ç–µ–º—ã
‚Ä¢ /debug - –æ—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è

üîß **–õ–∏–º–∏—Ç—ã:**
‚Ä¢ /setlimit_auto - –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π —Ä–µ–∂–∏–º
‚Ä¢ /setlimit_turtle - –º–µ–¥–ª–µ–Ω–Ω—ã–π —Ä–µ–∂–∏–º
‚Ä¢ /setlimit_normal - –æ–±—ã—á–Ω—ã–π —Ä–µ–∂–∏–º
‚Ä¢ /setlimit_burst - –±—ã—Å—Ç—Ä—ã–π —Ä–µ–∂–∏–º

üí¨ **–°–≤—è–∑—å:**
‚Ä¢ /yo_bro - —Å–≤—è–∑—å —Å —Å–æ–∑–¥–∞—Ç–µ–ª–µ–º
‚Ä¢ /buy_bots - –∑–∞–∫–∞–∑ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
‚Ä¢ /donate - –ø–æ–¥–¥–µ—Ä–∂–∞—Ç—å –ø—Ä–æ–µ–∫—Ç

üí° **–í–µ—Ä—Å–∏—è:** {APP_VERSION}"""
        
        await send_long_message(event, help_text, parse_mode='markdown')
        
        if analytics_available:
            analytics.track_event('help_viewed', event.sender_id, {}, correlation_id)
    
    async def _show_faq(self, event):
        """–ü–æ–∫–∞–∑–∞—Ç—å FAQ"""
        correlation_id = ""
        if analytics_available:
            correlation_id = analytics.track_command(event.sender_id, '/faq')
        
        faq_text = """‚ùì **–ß–ê–°–¢–´–ï –í–û–ü–†–û–°–´**

**1. ü§ñ –ü–æ—á–µ–º—É –Ω–µ –≤—Å–µ —Ç–æ–ø–∏–∫–∏ –ø–æ–∫–∞–∑—ã–≤–∞—é—Ç—Å—è?**
Telegram –æ–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ—Ç –¥–æ—Å—Ç—É–ø –±–æ—Ç–æ–≤ –∫ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ñ–æ—Ä—É–º–∞—Ö. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π —Ä–µ–∂–∏–º –¥–ª—è –ø–æ–ª–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞.

**2. üîÑ –ö–∞–∫ –ø–µ—Ä–µ–∫–ª—é—á–∏—Ç—å—Å—è –Ω–∞ –ø–æ–ª–Ω—ã–π —Ä–µ–∂–∏–º?**
‚Ä¢ –í –õ–° –±–æ—Ç—É: `/switch_mode`
‚Ä¢ –í—ã–±–µ—Ä–∏—Ç–µ "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π —Ä–µ–∂–∏–º"
‚Ä¢ –°–ª–µ–¥—É–π—Ç–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º –ø–æ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ

**3. üîç –ß—Ç–æ —É–º–µ–µ—Ç —Ä–µ–∂–∏–º –±–æ—Ç–∞?**
‚Ä¢ –ë–∞–∑–æ–≤–æ–µ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ç–æ–ø–∏–∫–æ–≤
‚Ä¢ –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
‚Ä¢ –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ –º–µ—Ç–æ–¥—ã –ø–æ–∏—Å–∫–∞ —Ç–æ–ø–∏–∫–æ–≤
‚Ä¢ –í—Å–µ –∫–æ–º–∞–Ω–¥—ã —Ä–∞–±–æ—Ç–∞—é—Ç, –Ω–æ —Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è–º–∏

**4. ‚ö° –ö–∞–∫ —Ä–∞–±–æ—Ç–∞—é—Ç –ª–∏–º–∏—Ç—ã?**
‚Ä¢ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –±–æ–ª—å—à–æ–π –Ω–∞–≥—Ä—É–∑–∫–µ
‚Ä¢ –ü—Ä–∏ >200 —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ ‚Üí –º–µ–¥–ª–µ–Ω–Ω—ã–π —Ä–µ–∂–∏–º
‚Ä¢ –ü—Ä–∏ >500 —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ ‚Üí —á–µ—Ä–µ–ø–∞—à–∏–π —Ä–µ–∂–∏–º
‚Ä¢ –ó–∞—â–∏—Ç–∞ –æ—Ç –±–ª–æ–∫–∏—Ä–æ–≤–æ–∫ Telegram

**5. üí¨ –ö–∞–∫ —Å–≤—è–∑–∞—Ç—å—Å—è —Å —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–º?**
‚Ä¢ `/yo_bro` - –ø—Ä—è–º–∞—è —Å–≤—è–∑—å —Å —Å–æ–∑–¥–∞—Ç–µ–ª–µ–º
‚Ä¢ `/buy_bots` - –∑–∞–∫–∞–∑ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ –±–æ—Ç–æ–≤
‚Ä¢ `/donate` - –ø–æ–¥–¥–µ—Ä–∂–∞—Ç—å –ø—Ä–æ–µ–∫—Ç

üí° **–î–ª—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π —Ä–µ–∂–∏–º!**"""

        await send_long_message(event, faq_text, parse_mode='markdown')
        
        if analytics_available:
            analytics.track_event('faq_viewed', event.sender_id, {}, correlation_id)
    
    async def _show_faq_inline(self, event):
        """FAQ –¥–ª—è inline –∫–Ω–æ–ø–æ–∫"""
        await self._show_faq(event)
    
    async def _show_commands_help(self, event):
        """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø—Ä–∞–≤–∫—É –ø–æ –∫–æ–º–∞–Ω–¥–∞–º"""
        await self._show_help(event)
    
    async def _show_stats(self, event):
        """–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Å–∏—Å—Ç–µ–º—ã"""
        try:
            correlation_id = ""
            if analytics_available:
                correlation_id = analytics.track_command(event.sender_id, '/stats')
            
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ë–î
            db_stats = await db_manager.get_database_stats()
            
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–µ—Å—Å–∏–π
            session_stats = await auth_manager.get_active_sessions_count()
            
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ—á–µ—Ä–µ–¥–∏
            queue_stats = await self.service_manager.queue.get_queue_status()
            
            response = f"üìä **–°–¢–ê–¢–ò–°–¢–ò–ö–ê –°–ò–°–¢–ï–ú–´**\n\n"
            
            response += f"üë• **–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:**\n"
            response += f"‚Ä¢ –í—Å–µ–≥–æ: {db_stats.get('users_count', 0)}\n"
            response += f"‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö: {db_stats.get('active_users', 0)}\n"
            response += f"‚Ä¢ –í user —Ä–µ–∂–∏–º–µ: {db_stats.get('user_mode_users', 0)}\n\n"
            
            response += f"üîó **–°–µ—Å—Å–∏–∏:**\n"
            response += f"‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö: {session_stats['total_sessions']}\n"
            response += f"‚Ä¢ –ú–∞–∫—Å–∏–º—É–º: {session_stats['max_sessions']}\n"
            response += f"‚Ä¢ –°–≤–æ–±–æ–¥–Ω–æ: {session_stats['available_slots']}\n\n"
            
            response += f"üìã **–û—á–µ—Ä–µ–¥—å:**\n"
            response += f"‚Ä¢ –û–∂–∏–¥–∞–µ—Ç: {queue_stats.get('pending', 0)}\n"
            response += f"‚Ä¢ –í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è: {queue_stats.get('processing', 0)}\n"
            response += f"‚Ä¢ –ó–∞–≤–µ—Ä—à–µ–Ω–æ: {queue_stats.get('completed', 0)}\n"
            response += f"‚Ä¢ –û—à–∏–±–æ–∫: {queue_stats.get('failed', 0)}\n\n"
            
            if self.startup_time:
                uptime = datetime.now() - self.startup_time
                response += f"‚è±Ô∏è **–í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã:** {uptime}\n"
            
            response += f"üîß **–í–µ—Ä—Å–∏—è:** {APP_VERSION}"
            
            await send_long_message(event, response, parse_mode='markdown')
            
            if analytics_available:
                analytics.track_event('system_stats_viewed', event.sender_id, {}, correlation_id)
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
            await send_long_message(event, f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")
    
    async def _show_debug(self, event):
        """–ü–æ–∫–∞–∑–∞—Ç—å –æ—Ç–ª–∞–¥–æ—á–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é"""
        try:
            correlation_id = ""
            if analytics_available:
                correlation_id = analytics.track_command(event.sender_id, '/debug')
            
            if event.is_private:
                await send_long_message(event, "‚ö†Ô∏è **–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –≤ —Å—É–ø–µ—Ä–≥—Ä—É–ø–ø–∞—Ö!**")
                return
            
            chat = await event.get_chat()
            
            response = "üîß **–û–¢–õ–ê–î–û–ß–ù–ê–Ø –ò–ù–§–û–†–ú–ê–¶–ò–Ø**\n\n"
            
            response += "üìä **–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —á–∞—Ç–µ:**\n"
            response += f"‚Ä¢ ID: {chat.id}\n"
            response += f"‚Ä¢ –ù–∞–∑–≤–∞–Ω–∏–µ: {chat.title}\n"
            response += f"‚Ä¢ –¢–∏–ø: {type(chat).__name__}\n"
            response += f"‚Ä¢ –ú–µ–≥–∞–≥—Ä—É–ø–ø–∞: {hasattr(chat, 'megagroup') and chat.megagroup}\n"
            response += f"‚Ä¢ –§–æ—Ä—É–º: {hasattr(chat, 'forum') and chat.forum}\n\n"
            
            response += "ü§ñ **–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ—Ç–µ:**\n"
            response += f"‚Ä¢ Telethon –ø–æ–¥–∫–ª—é—á–µ–Ω: {self.bot_client.is_connected()}\n"
            response += f"‚Ä¢ –í–µ—Ä—Å–∏—è: {APP_VERSION}\n\n"
            
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–µ—Ä–≤–∏—Å–æ–≤
            health = self.service_manager.get_health_status()
            response += "üîß **–°—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–∏—Å–æ–≤:**\n"
            response += f"‚Ä¢ –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: {'‚úÖ' if health['activity']['is_running'] else '‚ùå'}\n"
            response += f"‚Ä¢ –õ–∏–º–∏—Ç–µ—Ä: {'‚úÖ' if health['limiter']['is_running'] else '‚ùå'}\n"
            response += f"‚Ä¢ –û—á–µ—Ä–µ–¥—å: {'‚úÖ' if health['queue']['is_processing'] else '‚ùå'}\n"
            response += f"‚Ä¢ –û–±—â–µ–µ –∑–¥–æ—Ä–æ–≤—å–µ: {'‚úÖ' if health['overall_healthy'] else '‚ùå'}\n"
            
            await send_long_message(event, response, parse_mode='markdown')
            
            if analytics_available:
                analytics.track_event('debug_info_viewed', event.sender_id, {}, correlation_id)
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ debug: {e}")
            await send_long_message(event, f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")
    
    async def _show_queue_status(self, event):
        """–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç—É—Å –æ—á–µ—Ä–µ–¥–∏"""
        try:
            user_id = event.sender_id
            correlation_id = ""
            if analytics_available:
                correlation_id = analytics.track_command(user_id, '/queue_status')
            
            queue_status = await self.service_manager.queue.get_queue_status()
            
            response = f"üìã **–°–¢–ê–¢–£–° –û–ß–ï–†–ï–î–ò**\n\n"
            response += f"‚è≥ –û–∂–∏–¥–∞–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {queue_status.get('pending', 0)}\n"
            response += f"üîÑ –í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è: {queue_status.get('processing', 0)}\n"
            response += f"‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω–æ –∑–∞ —á–∞—Å: {queue_status.get('completed', 0)}\n"
            response += f"‚ùå –û—à–∏–±–æ–∫ –∑–∞ —á–∞—Å: {queue_status.get('failed', 0)}\n\n"
            
            response += f"üë§ **–£ –≤–∞—Å –Ω–µ—Ç –∑–∞–¥–∞—á –≤ –æ—á–µ—Ä–µ–¥–∏**\n"
            
            await send_long_message(event, response, parse_mode='markdown')
            
            if analytics_available:
                analytics.track_event('queue_status_viewed', user_id, {}, correlation_id)
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –æ—á–µ—Ä–µ–¥–∏: {e}")
            await send_long_message(event, f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")
    
    async def _handle_setlimit(self, event, command_name: str):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥ –ª–∏–º–∏—Ç–æ–≤"""
        try:
            mode = command_name.split('setlimit_')[1] if 'setlimit_' in command_name else 'unknown'
            correlation_id = ""
            if analytics_available:
                correlation_id = analytics.track_command(event.sender_id, f'/setlimit_{mode}')
            
            limiter = self.service_manager.limiter
            
            if mode == 'auto':
                limiter.auto_mode_enabled = True
                limiter.set_mode('normal', 'auto_enabled')
                response = "üîÑ **–ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–ò–ô –†–ï–ñ–ò–ú –õ–ò–ú–ò–¢–û–í**\n\n"
                response += "‚Ä¢ –ü–æ–¥—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç—Å—è –ø–æ–¥ —Ä–∞–∑–º–µ—Ä –≥—Ä—É–ø–ø—ã\n"
                response += "‚Ä¢ –û–ø—Ç–∏–º–∞–ª—å–Ω–∞—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å\n"
                response += "‚Ä¢ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ: –í–ö–õ–Æ–ß–ï–ù–û"
            elif mode in ['turtle', 'low', 'normal', 'burst']:
                limiter.set_mode(mode, 'manual')
                limiter.auto_mode_enabled = False
                
                status = limiter.get_status()
                
                response = f"üîß **{mode.upper()} –†–ï–ñ–ò–ú –õ–ò–ú–ò–¢–û–í**\n\n"
                response += f"‚Ä¢ –ó–∞–ø—Ä–æ—Å–æ–≤ –≤ —á–∞—Å: {status['max_requests_hour']}\n"
                response += f"‚Ä¢ Cooldown: {status['cooldown_seconds']} —Å–µ–∫—É–Ω–¥\n"
                response += f"‚Ä¢ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π —Ä–µ–∂–∏–º: –û–¢–ö–õ–Æ–ß–ï–ù"
            else:
                await send_long_message(event, "‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ä–µ–∂–∏–º –ª–∏–º–∏—Ç–æ–≤")
                return
            
            await send_long_message(event, response, parse_mode='markdown')
            
            if analytics_available:
                analytics.track_event('limit_mode_changed', event.sender_id, {
                    'new_mode': mode,
                    'auto_mode': limiter.auto_mode_enabled
                }, correlation_id)
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ setlimit: {e}")
            await send_long_message(event, f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")
    
    async def _start_web_server(self):
        """–ó–∞–ø—É—Å–∫ –≤–µ–±-—Å–µ—Ä–≤–µ—Ä–∞"""
        try:
            self.web_server, self.server_runner = await create_web_server(
                port=PORT,
                auth_manager=auth_manager,
                db_manager=db_manager,
                queue_manager=self.service_manager.queue
            )
            logger.info(f"üåê –í–µ–±-—Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É {PORT}")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –≤–µ–±-—Å–µ—Ä–≤–µ—Ä–∞: {e}")
    
    async def notify_admin(self, message: str):
        """–ò–°–ü–†–ê–í–õ–ï–ù–û: –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
        try:
            if ADMIN_USER_ID:
                await self.bot_client.send_message(
                    ADMIN_USER_ID, 
                    f"üîî **–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã**\n\n{message}\n\nüìÖ {datetime.now().strftime('%d.%m.%Y %H:%M:%S')}"
                )
        except Exception as e:
            logger.debug(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É: {e}")
    
    async def shutdown(self):
        """–ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã"""
        logger.info("üõë –ù–∞—á–∞–ª–æ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è...")
        
        self.is_running = False
        
        try:
            # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º —Å–æ–±—ã—Ç–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
            if analytics_available:
                analytics.track_event('bot_shutdown', 0, {
                    'uptime_seconds': (datetime.now() - self.startup_time).total_seconds() if self.startup_time else 0
                })
            
            # –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ
            if security_available:
                security_manager.cleanup_old_data()
            if analytics_available:
                analytics.cleanup_old_data()
            
            # –ó–∞–∫—Ä—ã—Ç–∏–µ –≤—Å–µ—Ö —Å–µ—Ä–≤–∏—Å–æ–≤
            await self.service_manager.cleanup()
            
            # –ó–∞–∫—Ä—ã—Ç–∏–µ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö —Å–µ—Å—Å–∏–π
            await cleanup_auth()
            
            # –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤–µ–±-—Å–µ—Ä–≤–µ—Ä–∞
            if self.server_runner:
                await self.server_runner.cleanup()
            
            # –û—Ç–∫–ª—é—á–µ–Ω–∏–µ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –±–æ—Ç–∞
            if self.bot_client.is_connected():
                await self.bot_client.disconnect()
            
            logger.info("‚úÖ –ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏: {e}")
    
    async def run(self):
        """–û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞"""
        try:
            await self.initialize()
            logger.info("üéØ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!")
            
            # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º —É—Å–ø–µ—à–Ω—ã–π –∑–∞–ø—É—Å–∫
            if analytics_available:
                analytics.track_event('bot_startup', 0, {
                    'version': APP_VERSION,
                    'development_mode': DEVELOPMENT_MODE
                })
            
            # –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª
            await self.bot_client.run_until_disconnected()
            
        except KeyboardInterrupt:
            logger.info("‚èπÔ∏è –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –æ—Å—Ç–∞–Ω–æ–≤–∫–∏")
        except Exception as e:
            logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
            if analytics_available:
                analytics.track_error(0, 'critical_bot_error', str(e))
            raise
        finally:
            await self.shutdown()

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞
bot = HybridTopicsBot()

def signal_handler(signum, frame):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–∏–≥–Ω–∞–ª–æ–≤ –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è"""
    logger.info(f"üì° –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª {signum}, –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã...")
    asyncio.create_task(bot.shutdown())
    sys.exit(0)

async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–∏–≥–Ω–∞–ª–æ–≤
    signal.signal(signal.SIGINT, signal_handler)
    signal.signal(signal.SIGTERM, signal_handler)
    
    try:
        await bot.run()
    except Exception as e:
        logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ main: {e}")
        if analytics_available:
            analytics.track_error(0, 'main_critical_error', str(e))
        sys.exit(1)

if __name__ == '__main__':
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        logger.info("‚èπÔ∏è –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–æ—Ç–∞...")
    except Exception as e:
        logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        sys.exit(1)
