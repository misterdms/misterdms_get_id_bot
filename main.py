#!/usr/bin/env python3
"""
Get ID Bot by Mister DMS - –¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
–û–ë–ù–û–í–õ–ï–ù–û v4.1.1: Keep Alive –º–µ—Ö–∞–Ω–∏–∑–º + —É–ª—É—á—à–µ–Ω–Ω–∞—è —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å
"""

import asyncio
import logging
import signal
import sys
import os
from datetime import datetime
import aiohttp
from contextlib import asynccontextmanager

# –ò–º–ø–æ—Ä—Ç—ã –º–æ–¥—É–ª–µ–π –±–æ—Ç–∞
from config import (
    BOT_TOKEN, API_ID, API_HASH, PORT, 
    RENDER_EXTERNAL_URL, APP_VERSION, APP_NAME
)
from database import DatabaseManager
from handlers import BotHandlers
from web_server import WebServer
from utils import setup_logging

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logger = setup_logging()

class GetIdBot:
    """–û—Å–Ω–æ–≤–Ω–æ–π –∫–ª–∞—Å—Å Get ID Bot —Å Keep Alive –º–µ—Ö–∞–Ω–∏–∑–º–æ–º"""
    
    def __init__(self):
        self.db_manager = None
        self.bot_handlers = None
        self.web_server = None
        self.keep_alive_task = None
        self.shutdown_event = asyncio.Event()
        
        logger.info(f"ü§ñ {APP_NAME} v{APP_VERSION} - –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è")
    
    async def keep_alive_ping(self):
        """Keep Alive –º–µ—Ö–∞–Ω–∏–∑–º - –ø–∏–Ω–≥—É–µ—Ç —Å–∞–º —Å–µ–±—è –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç"""
        if not RENDER_EXTERNAL_URL:
            logger.debug("‚ö†Ô∏è RENDER_EXTERNAL_URL –Ω–µ –∑–∞–¥–∞–Ω, keep alive –æ—Ç–∫–ª—é—á–µ–Ω")
            return
            
        ping_url = f"https://{RENDER_EXTERNAL_URL}/health"
        logger.info(f"üîÑ Keep Alive –∑–∞–ø—É—â–µ–Ω: {ping_url}")
        
        async with aiohttp.ClientSession(timeout=aiohttp.ClientTimeout(total=30)) as session:
            while not self.shutdown_event.is_set():
                try:
                    # –ñ–¥–µ–º 5 –º–∏–Ω—É—Ç –∏–ª–∏ –¥–æ —Å–∏–≥–Ω–∞–ª–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
                    await asyncio.wait_for(
                        self.shutdown_event.wait(), 
                        timeout=300  # 5 –º–∏–Ω—É—Ç
                    )
                    break  # –ï—Å–ª–∏ –ø–æ–ª—É—á–∏–ª–∏ —Å–∏–≥–Ω–∞–ª –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
                except asyncio.TimeoutError:
                    # –í—Ä–µ–º—è –≤—ã—à–ª–æ, –¥–µ–ª–∞–µ–º ping
                    try:
                        async with session.get(ping_url) as response:
                            if response.status == 200:
                                logger.debug("üíö Keep Alive ping —É—Å–ø–µ—à–µ–Ω")
                            else:
                                logger.warning(f"‚ö†Ô∏è Keep Alive ping –Ω–µ—É–¥–∞—á–µ–Ω: {response.status}")
                    except Exception as e:
                        logger.debug(f"‚ö†Ô∏è Keep Alive ping –æ—à–∏–±–∫–∞: {e}")
                        # –ù–µ –∫—Ä–∏—Ç–∏—á–Ω–æ, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º —Ä–∞–±–æ—Ç—É
    
    async def initialize_components(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≤—Å–µ—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ –±–æ—Ç–∞"""
        try:
            # 1. –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö
            logger.info("üóÑÔ∏è –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...")
            self.db_manager = DatabaseManager()
            await self.db_manager.initialize()
            
            # 2. –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
            logger.info("üì° –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥...")
            self.bot_handlers = BotHandlers(self.db_manager)
            await self.bot_handlers.initialize()
            
            # 3. –í–µ–±-—Å–µ—Ä–≤–µ—Ä
            logger.info("üåê –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≤–µ–±-—Å–µ—Ä–≤–µ—Ä–∞...")
            self.web_server = WebServer(self.db_manager, self.bot_handlers)
            await self.web_server.start(PORT)
            
            # 4. Keep Alive –∑–∞–¥–∞—á–∞
            logger.info("üîÑ –ó–∞–ø—É—Å–∫ Keep Alive –º–µ—Ö–∞–Ω–∏–∑–º–∞...")
            self.keep_alive_task = asyncio.create_task(self.keep_alive_ping())
            
            logger.info("‚úÖ –í—Å–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏: {e}")
            raise
    
    async def start(self):
        """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
        try:
            await self.initialize_components()
            
            logger.info("üöÄ Get ID Bot –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!")
            logger.info(f"üìä –í–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å: http://localhost:{PORT}/health")
            if RENDER_EXTERNAL_URL:
                logger.info(f"üåê –í–Ω–µ—à–Ω–∏–π URL: https://{RENDER_EXTERNAL_URL}/health")
            
            # –û–∂–∏–¥–∞–Ω–∏–µ —Å–∏–≥–Ω–∞–ª–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
            await self.shutdown_event.wait()
            
        except Exception as e:
            logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
            raise
        finally:
            await self.shutdown()
    
    async def shutdown(self):
        """–ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã"""
        logger.info("üõë –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞...")
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
        self.shutdown_event.set()
        
        # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º Keep Alive
        if self.keep_alive_task and not self.keep_alive_task.done():
            self.keep_alive_task.cancel()
            try:
                await self.keep_alive_task
            except asyncio.CancelledError:
                pass
        
        # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
        if self.bot_handlers:
            await self.bot_handlers.shutdown()
        
        if self.web_server:
            await self.web_server.stop()
        
        if self.db_manager:
            await self.db_manager.close()
        
        logger.info("‚úÖ –ë–æ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω")

# –ì–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è –±–æ—Ç–∞
bot_instance = None

def signal_handler(signum, frame):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–∏–≥–Ω–∞–ª–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è"""
    logger.info(f"üì° –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª {signum}, –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã...")
    if bot_instance and bot_instance.shutdown_event:
        bot_instance.shutdown_event.set()

async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    global bot_instance
    
    # –í–∞–ª–∏–¥–∞—Ü–∏—è –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
    if not all([BOT_TOKEN, API_ID, API_HASH]):
        logger.error("‚ùå –ù–µ –∑–∞–¥–∞–Ω—ã –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ: BOT_TOKEN, API_ID, API_HASH")
        logger.error("üí° –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –Ω–∞ Render.com")
        sys.exit(1)
    
    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–∏–≥–Ω–∞–ª–æ–≤
    signal.signal(signal.SIGINT, signal_handler)
    signal.signal(signal.SIGTERM, signal_handler)
    
    try:
        # –°–æ–∑–¥–∞–Ω–∏–µ –∏ –∑–∞–ø—É—Å–∫ –±–æ—Ç–∞
        bot_instance = GetIdBot()
        await bot_instance.start()
        
    except KeyboardInterrupt:
        logger.info("üõë –ü–æ–ª—É—á–µ–Ω Ctrl+C, –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã...")
    except Exception as e:
        logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ main: {e}")
        sys.exit(1)

if __name__ == "__main__":
    try:
        # –ó–∞–ø—É—Å–∫ –≤ asyncio event loop
        asyncio.run(main())
    except KeyboardInterrupt:
        logger.info("üõë –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã")
    except Exception as e:
        logger.error(f"‚ùå –§–∞—Ç–∞–ª—å–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
        sys.exit(1)