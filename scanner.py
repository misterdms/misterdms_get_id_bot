#!/usr/bin/env python3
"""
Topics Scanner Bot v5.18 - –°–∫–∞–Ω–µ—Ä —Ç–æ–ø–∏–∫–æ–≤
–õ–æ–≥–∏–∫–∞: –∞–¥–º–∏–Ω –¥–∞–µ—Ç credentials –¥–ª—è –≥—Ä—É–ø–ø—ã, –ª—é–±–æ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –º–æ–∂–µ—Ç —Å–∫–∞–Ω–∏—Ä–æ–≤–∞—Ç—å
"""

import asyncio
import logging
from typing import List, Dict, Any, Optional
from telethon import TelegramClient
from telethon.tl.types import Channel
from telethon.tl.functions.channels import GetForumTopicsRequest, GetFullChannelRequest
from telethon.errors import ChatAdminRequiredError, ChannelPrivateError

logger = logging.getLogger(__name__)

class TopicsScanner:
    """–°–∫–∞–Ω–µ—Ä —Ç–æ–ø–∏–∫–æ–≤ –¥–ª—è —Å—É–ø–µ—Ä–≥—Ä—É–ø–ø"""
    
    def __init__(self):
        self.admin_clients: Dict[int, TelegramClient] = {}  # admin_user_id -> client
    
    async def scan_topics_bot_api(self, bot_client: TelegramClient, chat) -> List[Dict[str, Any]]:
        """–°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–æ–ø–∏–∫–æ–≤ —á–µ—Ä–µ–∑ Bot API (–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ)"""
        topics = []
        
        try:
            # –í—Å–µ–≥–¥–∞ –¥–æ–±–∞–≤–ª—è–µ–º General —Ç–æ–ø–∏–∫
            topics.append({
                'id': 1,
                'title': 'General',
                'link': self._get_topic_link(chat, 1)
            })
            
            # –ü—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ –¥—Ä—É–≥–∏–µ —Ç–æ–ø–∏–∫–∏ —á–µ—Ä–µ–∑ –∞–Ω–∞–ª–∏–∑ —Å–æ–æ–±—â–µ–Ω–∏–π
            try:
                from telethon.tl.functions.messages import GetHistoryRequest
                
                messages = await bot_client(GetHistoryRequest(
                    peer=chat,
                    offset_id=0,
                    offset_date=None,
                    add_offset=0,
                    limit=100,
                    max_id=0,
                    min_id=0,
                    hash=0
                ))
                
                found_topics = set()
                for message in messages.messages:
                    if hasattr(message, 'reply_to') and message.reply_to:
                        topic_id = None
                        if hasattr(message.reply_to, 'reply_to_top_id'):
                            topic_id = message.reply_to.reply_to_top_id
                        elif hasattr(message.reply_to, 'reply_to_msg_id'):
                            topic_id = message.reply_to.reply_to_msg_id
                        
                        if topic_id and topic_id != 1 and topic_id not in found_topics:
                            found_topics.add(topic_id)
                            topics.append({
                                'id': topic_id,
                                'title': f'Topic {topic_id}',
                                'link': self._get_topic_link(chat, topic_id)
                            })
                
                logger.info(f"ü§ñ Bot API: –Ω–∞–π–¥–µ–Ω–æ {len(topics)} —Ç–æ–ø–∏–∫–æ–≤")
                
            except Exception as e:
                logger.debug(f"–ü–æ–∏—Å–∫ —á–µ—Ä–µ–∑ —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–µ —É–¥–∞–ª—Å—è: {e}")
        
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è Bot API: {e}")
            
        return topics
    
    async def scan_topics_user_api(self, chat_id: int, admin_api_id: str, admin_api_hash: str, 
                                  admin_user_id: int, chat) -> List[Dict[str, Any]]:
        """–ü–æ–ª–Ω–æ–µ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–æ–ø–∏–∫–æ–≤ —á–µ—Ä–µ–∑ User API –∞–¥–º–∏–Ω–∞"""
        topics = []
        
        try:
            # –°–æ–∑–¥–∞–µ–º –∏–ª–∏ –ø–æ–ª—É—á–∞–µ–º –∫–ª–∏–µ–Ω—Ç –∞–¥–º–∏–Ω–∞
            client = await self._get_admin_client(admin_user_id, admin_api_id, admin_api_hash)
            
            if not client or not client.is_connected():
                raise Exception("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è —Å credentials –∞–¥–º–∏–Ω–∞")
            
            # –í—Å–µ–≥–¥–∞ –¥–æ–±–∞–≤–ª—è–µ–º General —Ç–æ–ø–∏–∫
            topics.append({
                'id': 1,
                'title': 'General',
                'link': self._get_topic_link(chat, 1)
            })
            
            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Ç–æ–ø–∏–∫–∏ —Ñ–æ—Ä—É–º–∞
            try:
                result = await client(GetForumTopicsRequest(
                    channel=chat,
                    offset_date=None,
                    offset_id=0,
                    offset_topic=0,
                    limit=100
                ))
                
                for topic in result.topics:
                    if hasattr(topic, 'id') and hasattr(topic, 'title'):
                        topics.append({
                            'id': topic.id,
                            'title': topic.title,
                            'link': self._get_topic_link(chat, topic.id)
                        })
                
                logger.info(f"üë§ User API (–∞–¥–º–∏–Ω {admin_user_id}): –Ω–∞–π–¥–µ–Ω–æ {len(topics)} —Ç–æ–ø–∏–∫–æ–≤")
                
            except ChatAdminRequiredError:
                logger.warning("‚ö†Ô∏è –¢—Ä–µ–±—É—é—Ç—Å—è –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
            except ChannelPrivateError:
                logger.warning("‚ö†Ô∏è –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –ø—Ä–∏–≤–∞—Ç–Ω–æ–º—É –∫–∞–Ω–∞–ª—É")
        
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è User API: {e}")
            raise
        
        return topics
    
    async def _get_admin_client(self, admin_user_id: int, api_id: str, api_hash: str) -> Optional[TelegramClient]:
        """–ü–æ–ª—É—á–∏—Ç—å –∏–ª–∏ —Å–æ–∑–¥–∞—Ç—å –∫–ª–∏–µ–Ω—Ç –∞–¥–º–∏–Ω–∞"""
        try:
            if admin_user_id in self.admin_clients:
                client = self.admin_clients[admin_user_id]
                if client.is_connected():
                    return client
                else:
                    await self._disconnect_admin_client(admin_user_id)
            
            # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –∫–ª–∏–µ–Ω—Ç
            session_name = f'admin_session_{admin_user_id}'
            client = TelegramClient(session_name, int(api_id), api_hash)
            
            await client.start()
            
            if await client.is_user_authorized():
                self.admin_clients[admin_user_id] = client
                logger.info(f"‚úÖ Admin –∫–ª–∏–µ–Ω—Ç —Å–æ–∑–¥–∞–Ω –¥–ª—è {admin_user_id}")
                return client
            else:
                logger.error(f"‚ùå –ê–¥–º–∏–Ω {admin_user_id} –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω")
                await client.disconnect()
                return None
        
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è Admin –∫–ª–∏–µ–Ω—Ç–∞ –¥–ª—è {admin_user_id}: {e}")
            return None
    
    async def _disconnect_admin_client(self, admin_user_id: int):
        """–û—Ç–∫–ª—é—á–∏—Ç—å –∫–ª–∏–µ–Ω—Ç –∞–¥–º–∏–Ω–∞"""
        try:
            if admin_user_id in self.admin_clients:
                client = self.admin_clients[admin_user_id]
                if client.is_connected():
                    await client.disconnect()
                del self.admin_clients[admin_user_id]
                logger.info(f"üîå Admin –∫–ª–∏–µ–Ω—Ç –æ—Ç–∫–ª—é—á–µ–Ω –¥–ª—è {admin_user_id}")
        except Exception as e:
            logger.debug(f"–û—à–∏–±–∫–∞ –æ—Ç–∫–ª—é—á–µ–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–∞ {admin_user_id}: {e}")
    
    def _get_topic_link(self, chat, topic_id: int) -> str:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å—Å—ã–ª–∫–∏ –Ω–∞ —Ç–æ–ø–∏–∫"""
        try:
            if hasattr(chat, 'id'):
                chat_id = str(chat.id).replace('-100', '')
                return f"https://t.me/c/{chat_id}/{topic_id}"
            else:
                return f"#topic_{topic_id}"
        except Exception:
            return f"#topic_{topic_id}"
    
    def _is_forum_chat(self, chat) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —á–∞—Ç —Ñ–æ—Ä—É–º–æ–º"""
        try:
            return (isinstance(chat, Channel) and 
                    hasattr(chat, 'forum') and 
                    chat.forum and
                    hasattr(chat, 'megagroup') and 
                    chat.megagroup)
        except:
            return False
    
    async def scan_topics(self, user_id: int, bot_client: TelegramClient, chat) -> List[Dict[str, Any]]:
        """–û—Å–Ω–æ–≤–Ω–æ–π –º–µ—Ç–æ–¥ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è"""
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —á–∞—Ç —Ñ–æ—Ä—É–º–æ–º
            if not self._is_forum_chat(chat):
                raise Exception("–ì—Ä—É–ø–ø–∞ –Ω–µ —è–≤–ª—è–µ—Ç—Å—è —Ñ–æ—Ä—É–º–æ–º")
            
            chat_id = chat.id
            
            # –ò—â–µ–º –∞–¥–º–∏–Ω–∞ –≥—Ä—É–ø–ø—ã —Å credentials
            from database import db
            group_info = await db.get_group_admin_credentials(chat_id)
            
            if group_info and group_info['admin_api_id'] and group_info['admin_api_hash']:
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º User API –∞–¥–º–∏–Ω–∞ –≥—Ä—É–ø–ø—ã
                logger.info(f"üîë –ò—Å–ø–æ–ª—å–∑—É–µ–º credentials –∞–¥–º–∏–Ω–∞ {group_info['admin_user_id']} –¥–ª—è –≥—Ä—É–ø–ø—ã {chat_id}")
                return await self.scan_topics_user_api(
                    chat_id, 
                    group_info['admin_api_id'], 
                    group_info['admin_api_hash'],
                    group_info['admin_user_id'],
                    chat
                )
            else:
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º Bot API
                logger.info(f"ü§ñ –ò—Å–ø–æ–ª—å–∑—É–µ–º Bot API –¥–ª—è –≥—Ä—É–ø–ø—ã {chat_id}")
                return await self.scan_topics_bot_api(bot_client, chat)
        
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
            raise
    
    async def cleanup(self):
        """–û—á–∏—Å—Ç–∫–∞ –≤—Å–µ—Ö —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π"""
        logger.info("üßπ –ó–∞–∫—Ä—ã—Ç–∏–µ –≤—Å–µ—Ö Admin API —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π...")
        
        for admin_user_id in list(self.admin_clients.keys()):
            await self._disconnect_admin_client(admin_user_id)
        
        logger.info("‚úÖ –í—Å–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –∑–∞–∫—Ä—ã—Ç—ã")

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä
scanner = TopicsScanner()
