#!/usr/bin/env python3
"""
–í–µ–±-—Å–µ—Ä–≤–µ—Ä –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∏ health check –≥–∏–±—Ä–∏–¥–Ω–æ–≥–æ Topics Scanner Bot
–ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç REST API –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–∏—Å—Ç–µ–º—ã
"""

import json
import logging
from datetime import datetime
from typing import Dict, Any, Optional
from aiohttp import web, ClientSession
from aiohttp.web_runner import AppRunner, TCPSite
import aiohttp_cors

from config import WEBHOOK_SECRET, APP_VERSION, APP_NAME

logger = logging.getLogger(__name__)

class WebServer:
    """–í–µ–±-—Å–µ—Ä–≤–µ—Ä –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –±–æ—Ç–∞"""
    
    def __init__(self, auth_manager, db_manager, queue_manager):
        self.auth_manager = auth_manager
        self.db_manager = db_manager
        self.queue_manager = queue_manager
        self.app = None
        self.runner = None
        self.site = None
        self.start_time = datetime.now()
        
    def create_app(self) -> web.Application:
        """–°–æ–∑–¥–∞–Ω–∏–µ –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
        app = web.Application()
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ CORS
        cors = aiohttp_cors.setup(app, defaults={
            "*": aiohttp_cors.ResourceOptions(
                allow_credentials=True,
                expose_headers="*",
                allow_headers="*",
                allow_methods="*"
            )
        })
        
        # –û—Å–Ω–æ–≤–Ω—ã–µ —ç–Ω–¥–ø–æ–∏–Ω—Ç—ã
        app.router.add_get('/', self.handle_root)
        app.router.add_get('/health', self.handle_health)
        app.router.add_get('/metrics', self.handle_metrics)
        app.router.add_get('/queue', self.handle_queue)
        app.router.add_get('/sessions', self.handle_sessions)
        app.router.add_get('/database', self.handle_database)
        app.router.add_get('/status', self.handle_full_status)
        
        # API —ç–Ω–¥–ø–æ–∏–Ω—Ç—ã
        app.router.add_get('/api/v1/health', self.handle_health)
        app.router.add_get('/api/v1/metrics', self.handle_metrics_json)
        app.router.add_get('/api/v1/queue', self.handle_queue_json)
        app.router.add_get('/api/v1/sessions', self.handle_sessions_json)
        
        # Webhook —ç–Ω–¥–ø–æ–∏–Ω—Ç—ã (–µ—Å–ª–∏ –Ω—É–∂–Ω—ã)
        app.router.add_post('/webhook', self.handle_webhook)
        
        # –î–æ–±–∞–≤–ª—è–µ–º CORS –∫–æ –≤—Å–µ–º —ç–Ω–¥–ø–æ–∏–Ω—Ç–∞–º
        for route in list(app.router.routes()):
            cors.add(route)
        
        # Middleware –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
        app.middlewares.append(self.logging_middleware)
        
        self.app = app
        return app
    
    @web.middleware
    async def logging_middleware(self, request, handler):
        """Middleware –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–ø—Ä–æ—Å–æ–≤"""
        start_time = datetime.now()
        
        try:
            response = await handler(request)
            
            duration = (datetime.now() - start_time).total_seconds()
            logger.info(f"üåê {request.method} {request.path} - {response.status} ({duration:.3f}s)")
            
            return response
            
        except Exception as e:
            duration = (datetime.now() - start_time).total_seconds()
            logger.error(f"üåê {request.method} {request.path} - ERROR: {e} ({duration:.3f}s)")
            raise
    
    async def handle_root(self, request):
        """–ö–æ—Ä–Ω–µ–≤–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –±–æ—Ç–µ"""
        uptime = datetime.now() - self.start_time
        
        html = f"""
        <!DOCTYPE html>
        <html>
        <head>
            <title>{APP_NAME} - Monitoring</title>
            <meta charset="utf-8">
            <meta name="viewport" content="width=device-width, initial-scale=1">
            <style>
                body {{ font-family: Arial, sans-serif; margin: 40px; background: #f5f5f5; }}
                .container {{ max-width: 800px; background: white; padding: 30px; border-radius: 10px; box-shadow: 0 2px 10px rgba(0,0,0,0.1); }}
                h1 {{ color: #2196F3; }}
                .status {{ padding: 10px; margin: 10px 0; border-radius: 5px; }}
                .healthy {{ background: #4CAF50; color: white; }}
                .warning {{ background: #FF9800; color: white; }}
                .error {{ background: #F44336; color: white; }}
                .metric {{ margin: 10px 0; padding: 10px; background: #e3f2fd; border-radius: 5px; }}
                .api-links {{ margin: 20px 0; }}
                .api-links a {{ display: inline-block; margin: 5px; padding: 8px 15px; background: #2196F3; color: white; text-decoration: none; border-radius: 5px; }}
                .footer {{ margin-top: 30px; text-align: center; color: #666; }}
            </style>
        </head>
        <body>
            <div class="container">
                <h1>ü§ñ {APP_NAME}</h1>
                <div class="status healthy">‚úÖ –°–∏—Å—Ç–µ–º–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç</div>
                
                <div class="metric">
                    <strong>–í–µ—Ä—Å–∏—è:</strong> {APP_VERSION}<br>
                    <strong>–í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã:</strong> {uptime}<br>
                    <strong>–ó–∞–ø—É—â–µ–Ω:</strong> {self.start_time.strftime('%Y-%m-%d %H:%M:%S')}
                </div>
                
                <h3>üìä API –≠–Ω–¥–ø–æ–∏–Ω—Ç—ã</h3>
                <div class="api-links">
                    <a href="/health">Health Check</a>
                    <a href="/metrics">–ú–µ—Ç—Ä–∏–∫–∏</a>
                    <a href="/queue">–û—á–µ—Ä–µ–¥—å</a>
                    <a href="/sessions">–°–µ—Å—Å–∏–∏</a>
                    <a href="/database">–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö</a>
                    <a href="/status">–ü–æ–ª–Ω—ã–π —Å—Ç–∞—Ç—É—Å</a>
                </div>
                
                <h3>üîß JSON API</h3>
                <div class="api-links">
                    <a href="/api/v1/health">JSON Health</a>
                    <a href="/api/v1/metrics">JSON –ú–µ—Ç—Ä–∏–∫–∏</a>
                    <a href="/api/v1/queue">JSON –û—á–µ—Ä–µ–¥—å</a>
                    <a href="/api/v1/sessions">JSON –°–µ—Å—Å–∏–∏</a>
                </div>
                
                <div class="footer">
                    <p>–ì–∏–±—Ä–∏–¥–Ω—ã–π Topics Scanner Bot –¥–ª—è Telegram</p>
                </div>
            </div>
        </body>
        </html>
        """
        
        return web.Response(text=html, content_type='text/html')
    
    async def handle_health(self, request):
        """Health check —ç–Ω–¥–ø–æ–∏–Ω—Ç"""
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
            db_healthy = await self.db_manager.health_check()
            queue_healthy = self.queue_manager.is_processing
            
            # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç—É—Å —Å–µ—Å—Å–∏–π
            session_stats = await self.auth_manager.get_active_sessions_count()
            
            overall_health = db_healthy and queue_healthy
            
            status_text = "healthy" if overall_health else "unhealthy"
            status_code = 200 if overall_health else 503
            
            uptime = datetime.now() - self.start_time
            
            health_data = {
                'status': status_text,
                'timestamp': datetime.now().isoformat(),
                'uptime_seconds': uptime.total_seconds(),
                'version': APP_VERSION,
                'components': {
                    'database': 'healthy' if db_healthy else 'unhealthy',
                    'queue': 'healthy' if queue_healthy else 'unhealthy',
                    'sessions': f"{session_stats['total_sessions']}/{session_stats['max_sessions']}"
                }
            }
            
            # HTML –æ—Ç–≤–µ—Ç –¥–ª—è –±—Ä–∞—É–∑–µ—Ä–∞
            if 'text/html' in request.headers.get('Accept', ''):
                component_status = []
                for component, status in health_data['components'].items():
                    emoji = "‚úÖ" if "healthy" in status or "/" in status else "‚ùå"
                    component_status.append(f"{emoji} {component}: {status}")
                
                html = f"""
                <h2>üè• Health Check</h2>
                <div class="status {'healthy' if overall_health else 'error'}">
                    {status_text.upper()}
                </div>
                <div class="metric">
                    <strong>Timestamp:</strong> {health_data['timestamp']}<br>
                    <strong>Uptime:</strong> {uptime}<br>
                    <strong>Version:</strong> {APP_VERSION}
                </div>
                <h3>–ö–æ–º–ø–æ–Ω–µ–Ω—Ç—ã:</h3>
                <ul>
                {"".join(f"<li>{status}</li>" for status in component_status)}
                </ul>
                <a href="/">‚Üê –ù–∞–∑–∞–¥</a>
                """
                return web.Response(text=html, content_type='text/html', status=status_code)
            
            # JSON –æ—Ç–≤–µ—Ç –¥–ª—è API
            return web.json_response(health_data, status=status_code)
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ health check: {e}")
            error_data = {
                'status': 'error',
                'error': str(e),
                'timestamp': datetime.now().isoformat()
            }
            return web.json_response(error_data, status=500)
    
    async def handle_metrics(self, request):
        """–ú–µ—Ç—Ä–∏–∫–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏"""
        try:
            # –°–æ–±–∏—Ä–∞–µ–º –º–µ—Ç—Ä–∏–∫–∏
            db_stats = await self.db_manager.get_database_stats()
            queue_status = await self.queue_manager.get_queue_status()
            session_stats = await self.auth_manager.get_active_sessions_count()
            
            uptime = datetime.now() - self.start_time
            
            metrics = {
                'system': {
                    'uptime_seconds': uptime.total_seconds(),
                    'start_time': self.start_time.isoformat(),
                    'version': APP_VERSION
                },
                'database': db_stats,
                'queue': {
                    'pending': queue_status.get('pending', 0),
                    'processing': queue_status.get('processing', 0),
                    'completed': queue_status.get('completed', 0),
                    'failed': queue_status.get('failed', 0),
                    'active_tasks': queue_status.get('active_tasks', 0),
                    'success_rate': queue_status.get('stats', {}).get('success_rate', 0)
                },
                'sessions': session_stats,
                'timestamp': datetime.now().isoformat()
            }
            
            # HTML –æ—Ç–≤–µ—Ç
            if 'text/html' in request.headers.get('Accept', ''):
                html = f"""
                <h2>üìä –ú–µ—Ç—Ä–∏–∫–∏ —Å–∏—Å—Ç–µ–º—ã</h2>
                <div class="metric">
                    <h3>üñ•Ô∏è –°–∏—Å—Ç–µ–º–∞</h3>
                    <strong>–í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã:</strong> {uptime}<br>
                    <strong>–ó–∞–ø—É—â–µ–Ω:</strong> {self.start_time.strftime('%Y-%m-%d %H:%M:%S')}<br>
                    <strong>–í–µ—Ä—Å–∏—è:</strong> {APP_VERSION}
                </div>
                
                <div class="metric">
                    <h3>üóÑÔ∏è –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö</h3>
                    <strong>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:</strong> {db_stats.get('users_count', 0)}<br>
                    <strong>–ê–∫—Ç–∏–≤–Ω—ã—Ö:</strong> {db_stats.get('active_users', 0)}<br>
                    <strong>–í user —Ä–µ–∂–∏–º–µ:</strong> {db_stats.get('user_mode_users', 0)}<br>
                    <strong>–ó–∞–ø–∏—Å–µ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏:</strong> {db_stats.get('activity_data_count', 0)}
                </div>
                
                <div class="metric">
                    <h3>üìã –û—á–µ—Ä–µ–¥—å</h3>
                    <strong>–û–∂–∏–¥–∞–µ—Ç:</strong> {queue_status.get('pending', 0)}<br>
                    <strong>–í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è:</strong> {queue_status.get('processing', 0)}<br>
                    <strong>–ó–∞–≤–µ—Ä—à–µ–Ω–æ:</strong> {queue_status.get('completed', 0)}<br>
                    <strong>–û—à–∏–±–æ–∫:</strong> {queue_status.get('failed', 0)}<br>
                    <strong>–ê–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á:</strong> {queue_status.get('active_tasks', 0)}
                </div>
                
                <div class="metric">
                    <h3>üîó –°–µ—Å—Å–∏–∏</h3>
                    <strong>–ê–∫—Ç–∏–≤–Ω—ã—Ö:</strong> {session_stats['total_sessions']}<br>
                    <strong>–ú–∞–∫—Å–∏–º—É–º:</strong> {session_stats['max_sessions']}<br>
                    <strong>–°–≤–æ–±–æ–¥–Ω–æ:</strong> {session_stats['available_slots']}
                </div>
                
                <a href="/">‚Üê –ù–∞–∑–∞–¥</a>
                """
                return web.Response(text=html, content_type='text/html')
            
            return web.json_response(metrics)
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –º–µ—Ç—Ä–∏–∫: {e}")
            return web.json_response({'error': str(e)}, status=500)
    
    async def handle_queue(self, request):
        """–°—Ç–∞—Ç—É—Å –æ—á–µ—Ä–µ–¥–∏"""
        try:
            queue_status = await self.queue_manager.get_queue_status()
            
            # HTML –æ—Ç–≤–µ—Ç
            if 'text/html' in request.headers.get('Accept', ''):
                html = f"""
                <h2>üìã –°—Ç–∞—Ç—É—Å –æ—á–µ—Ä–µ–¥–∏</h2>
                <div class="metric">
                    <strong>–û–∂–∏–¥–∞–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è:</strong> {queue_status.get('pending', 0)}<br>
                    <strong>–í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è:</strong> {queue_status.get('processing', 0)}<br>
                    <strong>–ó–∞–≤–µ—Ä—à–µ–Ω–æ:</strong> {queue_status.get('completed', 0)}<br>
                    <strong>–û—à–∏–±–æ–∫:</strong> {queue_status.get('failed', 0)}<br>
                    <strong>–ê–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á:</strong> {queue_status.get('active_tasks', 0)}<br>
                    <strong>–ú–∞–∫—Å–∏–º—É–º –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã—Ö:</strong> {queue_status.get('max_concurrent', 5)}
                </div>
                
                <h3>üîÑ –ê–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–¥–∞—á–∏</h3>
                """
                
                processing_tasks = queue_status.get('processing_tasks', [])
                if processing_tasks:
                    html += "<ul>"
                    for task in processing_tasks:
                        html += f"""
                        <li>
                            <strong>ID {task['id']}:</strong> {task['command']} 
                            (–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {task['user_id']}, 
                            –í—Ä–µ–º—è: {task['processing_time']:.1f}—Å)
                        </li>
                        """
                    html += "</ul>"
                else:
                    html += "<p>–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á</p>"
                
                html += '<a href="/">‚Üê –ù–∞–∑–∞–¥</a>'
                return web.Response(text=html, content_type='text/html')
            
            return web.json_response(queue_status)
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –æ—á–µ—Ä–µ–¥–∏: {e}")
            return web.json_response({'error': str(e)}, status=500)
    
    async def handle_sessions(self, request):
        """–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–µ—Å—Å–∏—è—Ö"""
        try:
            session_stats = await self.auth_manager.get_active_sessions_count()
            health_info = await self.auth_manager.health_check()
            
            # HTML –æ—Ç–≤–µ—Ç
            if 'text/html' in request.headers.get('Accept', ''):
                html = f"""
                <h2>üîó –ê–∫—Ç–∏–≤–Ω—ã–µ —Å–µ—Å—Å–∏–∏</h2>
                <div class="metric">
                    <strong>–í—Å–µ–≥–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö:</strong> {session_stats['total_sessions']}<br>
                    <strong>–ú–∞–∫—Å–∏–º—É–º:</strong> {session_stats['max_sessions']}<br>
                    <strong>–°–≤–æ–±–æ–¥–Ω—ã—Ö —Å–ª–æ—Ç–æ–≤:</strong> {session_stats['available_slots']}<br>
                    <strong>–ó–¥–æ—Ä–æ–≤—ã—Ö —Å–µ—Å—Å–∏–π:</strong> {health_info.get('healthy_sessions', 0)}<br>
                    <strong>–ü—Ä–æ–±–ª–µ–º–Ω—ã—Ö —Å–µ—Å—Å–∏–π:</strong> {health_info.get('unhealthy_sessions', 0)}
                </div>
                
                <h3>üìä –î–µ—Ç–∞–ª–∏ —Å–µ—Å—Å–∏–π</h3>
                """
                
                session_details = health_info.get('session_details', {})
                if session_details:
                    html += "<ul>"
                    for user_id, status in session_details.items():
                        emoji = "‚úÖ" if status == "healthy" else "‚ùå"
                        html += f"<li>{emoji} –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id}: {status}</li>"
                    html += "</ul>"
                else:
                    html += "<p>–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–µ—Å—Å–∏–π</p>"
                
                html += '<a href="/">‚Üê –ù–∞–∑–∞–¥</a>'
                return web.Response(text=html, content_type='text/html')
            
            return web.json_response({
                'session_stats': session_stats,
                'health_info': health_info,
                'timestamp': datetime.now().isoformat()
            })
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–µ—Å—Å–∏—è—Ö: {e}")
            return web.json_response({'error': str(e)}, status=500)
    
    async def handle_database(self, request):
        """–°—Ç–∞—Ç—É—Å –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
        try:
            db_stats = await self.db_manager.get_database_stats()
            db_healthy = await self.db_manager.health_check()
            
            # HTML –æ—Ç–≤–µ—Ç
            if 'text/html' in request.headers.get('Accept', ''):
                status_class = "healthy" if db_healthy else "error"
                status_text = "–†–∞–±–æ—Ç–∞–µ—Ç –Ω–æ—Ä–º–∞–ª—å–Ω–æ" if db_healthy else "–ü—Ä–æ–±–ª–µ–º—ã"
                
                html = f"""
                <h2>üóÑÔ∏è –°—Ç–∞—Ç—É—Å –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö</h2>
                <div class="status {status_class}">
                    {status_text}
                </div>
                
                <div class="metric">
                    <h3>üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ç–∞–±–ª–∏—Ü</h3>
                    <strong>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:</strong> {db_stats.get('users_count', 0)}<br>
                    <strong>–ê–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:</strong> {db_stats.get('active_users', 0)}<br>
                    <strong>User —Ä–µ–∂–∏–º:</strong> {db_stats.get('user_mode_users', 0)}<br>
                    <strong>–ó–∞–ø–∏—Å–∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏:</strong> {db_stats.get('activity_data_count', 0)}<br>
                    <strong>–ó–∞–¥–∞—á–∏ –≤ –æ—á–µ—Ä–µ–¥–∏:</strong> {db_stats.get('request_queue_count', 0)}<br>
                    <strong>–ù–∞—Å—Ç—Ä–æ–π–∫–∏:</strong> {db_stats.get('bot_settings_count', 0)}<br>
                    <strong>–õ–æ–≥–∏:</strong> {db_stats.get('bot_logs_count', 0)}
                </div>
                
                <a href="/">‚Üê –ù–∞–∑–∞–¥</a>
                """
                return web.Response(text=html, content_type='text/html')
            
            return web.json_response({
                'healthy': db_healthy,
                'stats': db_stats,
                'timestamp': datetime.now().isoformat()
            })
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –ë–î: {e}")
            return web.json_response({'error': str(e)}, status=500)
    
    async def handle_full_status(self, request):
        """–ü–æ–ª–Ω—ã–π —Å—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã"""
        try:
            # –°–æ–±–∏—Ä–∞–µ–º –≤—Å—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
            db_stats = await self.db_manager.get_database_stats()
            db_healthy = await self.db_manager.health_check()
            queue_status = await self.queue_manager.get_queue_status()
            session_stats = await self.auth_manager.get_active_sessions_count()
            session_health = await self.auth_manager.health_check()
            
            uptime = datetime.now() - self.start_time
            
            full_status = {
                'system': {
                    'healthy': db_healthy and queue_status.get('is_processing', False),
                    'uptime_seconds': uptime.total_seconds(),
                    'start_time': self.start_time.isoformat(),
                    'version': APP_VERSION,
                    'name': APP_NAME
                },
                'database': {
                    'healthy': db_healthy,
                    'stats': db_stats
                },
                'queue': queue_status,
                'sessions': {
                    'stats': session_stats,
                    'health': session_health
                },
                'timestamp': datetime.now().isoformat()
            }
            
            return web.json_response(full_status)
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª–Ω–æ–≥–æ —Å—Ç–∞—Ç—É—Å–∞: {e}")
            return web.json_response({'error': str(e)}, status=500)
    
    # JSON API —ç–Ω–¥–ø–æ–∏–Ω—Ç—ã
    async def handle_metrics_json(self, request):
        """JSON –º–µ—Ç—Ä–∏–∫–∏"""
        return await self.handle_metrics(request)
    
    async def handle_queue_json(self, request):
        """JSON —Å—Ç–∞—Ç—É—Å –æ—á–µ—Ä–µ–¥–∏"""
        return await self.handle_queue(request)
    
    async def handle_sessions_json(self, request):
        """JSON –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–µ—Å—Å–∏—è—Ö"""
        return await self.handle_sessions(request)
    
    async def handle_webhook(self, request):
        """Webhook —ç–Ω–¥–ø–æ–∏–Ω—Ç"""
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–µ–∫—Ä–µ—Ç–Ω—ã–π –∫–ª—é—á
            auth_header = request.headers.get('Authorization')
            if auth_header != f"Bearer {WEBHOOK_SECRET}":
                return web.json_response({'error': 'Unauthorized'}, status=401)
            
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ
            data = await request.json()
            
            # –õ–æ–≥–∏—Ä—É–µ–º webhook
            logger.info(f"üì• Webhook –ø–æ–ª—É—á–µ–Ω: {data}")
            
            # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –æ–±—Ä–∞–±–æ—Ç–∫—É webhook –¥–∞–Ω–Ω—ã—Ö
            
            return web.json_response({'status': 'ok', 'received': True})
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ webhook: {e}")
            return web.json_response({'error': str(e)}, status=500)

async def create_web_server(port: int, auth_manager, db_manager, queue_manager):
    """
    –°–æ–∑–¥–∞–Ω–∏–µ –∏ –∑–∞–ø—É—Å–∫ –≤–µ–±-—Å–µ—Ä–≤–µ—Ä–∞
    
    Args:
        port: –ü–æ—Ä—Ç –¥–ª—è —Å–µ—Ä–≤–µ—Ä–∞
        auth_manager: –ú–µ–Ω–µ–¥–∂–µ—Ä –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
        db_manager: –ú–µ–Ω–µ–¥–∂–µ—Ä –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        queue_manager: –ú–µ–Ω–µ–¥–∂–µ—Ä –æ—á–µ—Ä–µ–¥–∏
    
    Returns:
        Tuple[WebServer, AppRunner]: –°–µ—Ä–≤–µ—Ä –∏ runner
    """
    try:
        logger.info(f"üåê –°–æ–∑–¥–∞–Ω–∏–µ –≤–µ–±-—Å–µ—Ä–≤–µ—Ä–∞ –Ω–∞ –ø–æ—Ä—Ç—É {port}")
        
        # –°–æ–∑–¥–∞–µ–º —Å–µ—Ä–≤–µ—Ä
        web_server = WebServer(auth_manager, db_manager, queue_manager)
        app = web_server.create_app()
        
        # –°–æ–∑–¥–∞–µ–º runner
        runner = AppRunner(app)
        await runner.setup()
        
        # –°–æ–∑–¥–∞–µ–º site
        site = TCPSite(runner, '0.0.0.0', port)
        await site.start()
        
        web_server.runner = runner
        web_server.site = site
        
        logger.info(f"‚úÖ –í–µ–±-—Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ http://0.0.0.0:{port}")
        
        return web_server, runner
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –≤–µ–±-—Å–µ—Ä–≤–µ—Ä–∞: {e}")
        raise

async def stop_web_server(runner: AppRunner):
    """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤–µ–±-—Å–µ—Ä–≤–µ—Ä–∞"""
    try:
        if runner:
            await runner.cleanup()
            logger.info("‚úÖ –í–µ–±-—Å–µ—Ä–≤–µ—Ä –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –≤–µ–±-—Å–µ—Ä–≤–µ—Ä–∞: {e}")

# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞
def create_simple_health_response() -> Dict[str, Any]:
    """–°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ—Å—Ç–æ–≥–æ health check –æ—Ç–≤–µ—Ç–∞"""
    return {
        'status': 'healthy',
        'timestamp': datetime.now().isoformat(),
        'service': APP_NAME,
        'version': APP_VERSION
    }
