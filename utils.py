#!/usr/bin/env python3
"""
–û–±—ä–µ–¥–∏–Ω–µ–Ω–Ω—ã–π –º–æ–¥—É–ª—å —É—Ç–∏–ª–∏—Ç –¥–ª—è –≥–∏–±—Ä–∏–¥–Ω–æ–≥–æ Topics Scanner Bot
–í–∫–ª—é—á–∞–µ—Ç: TopicScanner + –≤—Å–µ –≤—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ + –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —É—Ç–∏–ª–∏—Ç—ã
–ò–°–ü–†–ê–í–õ–ï–ù–û: –ò–º–ø–æ—Ä—Ç—ã, –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–¥–∞, –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –æ—à–∏–±–∫–∏
"""

import re
import os
import logging
import asyncio
from datetime import datetime
from typing import List, Dict, Any, Optional
from telethon import TelegramClient
from telethon.tl.types import Channel
from telethon.tl.functions.channels import GetForumTopicsRequest, GetFullChannelRequest
from telethon.tl.functions.messages import GetHistoryRequest
from telethon.errors import ChatAdminRequiredError, ChannelPrivateError

logger = logging.getLogger(__name__)

# =============================================================================
# –û–°–ù–û–í–ù–´–ï –£–¢–ò–õ–ò–¢–´ –î–õ–Ø –†–ê–ë–û–¢–´ –° –°–û–û–ë–©–ï–ù–ò–Ø–ú–ò
# =============================================================================

class MessageUtils:
    """–£—Ç–∏–ª–∏—Ç—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏"""
    
    @staticmethod
    async def send_long_message(event, text: str, max_length: int = 4000, parse_mode: str = 'markdown', buttons=None):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ –¥–ª–∏–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π —Ä–∞–∑–±–∏–≤–∫–æ–π –∏ –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –∫–Ω–æ–ø–æ–∫"""
        try:
            if len(text) <= max_length:
                if buttons:
                    await event.reply(text, parse_mode=parse_mode, buttons=buttons)
                else:
                    await event.reply(text, parse_mode=parse_mode)
                return
            
            # –†–∞–∑–±–∏–≤–∞–µ–º —Ç–µ–∫—Å—Ç –Ω–∞ —á–∞—Å—Ç–∏
            parts = []
            current_part = ""
            lines = text.split('\n')
            
            for line in lines:
                if len(current_part) + len(line) + 1 > max_length:
                    if current_part:
                        parts.append(current_part.strip())
                        current_part = line + '\n'
                    else:
                        # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ —Ä–∞–∑–±–∏–≤–∞–µ–º –¥–ª–∏–Ω–Ω—É—é —Å—Ç—Ä–æ–∫—É
                        while len(line) > max_length:
                            parts.append(line[:max_length])
                            line = line[max_length:]
                        current_part = line + '\n'
                else:
                    current_part += line + '\n'
            
            if current_part.strip():
                parts.append(current_part.strip())
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —á–∞—Å—Ç–∏
            for i, part in enumerate(parts):
                if i == 0:
                    # –ü–µ—Ä–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏
                    if buttons:
                        await event.reply(part, parse_mode=parse_mode, buttons=buttons)
                    else:
                        await event.reply(part, parse_mode=parse_mode)
                else:
                    header = f"üìÑ **–ü—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ ({i+1}/{len(parts)}):**\n\n"
                    await event.respond(header + part, parse_mode=parse_mode)
            
            logger.debug(f"–î–ª–∏–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Ä–∞–∑–±–∏—Ç–æ –Ω–∞ {len(parts)} —á–∞—Å—Ç–µ–π")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –¥–ª–∏–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
            try:
                await event.reply(text[:max_length] + "...\n\n‚ùå –û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")
            except:
                await event.reply("‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è")
    
    @staticmethod
    def get_user_mention(user, fallback_name: str = "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å") -> str:
        """–ü–æ–ª—É—á–∏—Ç—å —É–ø–æ–º–∏–Ω–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –≥—Ä—É–ø–ø–æ–≤–æ–≥–æ —á–∞—Ç–∞"""
        try:
            if hasattr(user, 'username') and user.username:
                return f"@{user.username}"
            elif hasattr(user, 'first_name') and user.first_name:
                # Mention –ø–æ ID –µ—Å–ª–∏ –Ω–µ—Ç username
                user_id = getattr(user, 'id', 0)
                first_name = user.first_name[:20]  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É
                return f"[{first_name}](tg://user?id={user_id})"
            else:
                return fallback_name
        except Exception:
            return fallback_name
    
    @staticmethod
    async def smart_reply(event, text: str, parse_mode: str = 'markdown', 
                         force_mention: bool = False) -> None:
        """–£–º–Ω—ã–π –æ—Ç–≤–µ—Ç: Reply –≤ –õ–°, Mention –≤ –≥—Ä—É–ø–ø–∞—Ö"""
        try:
            if event.is_private:
                # –í –ª–∏—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö –ø—Ä–æ—Å—Ç–æ –æ—Ç–≤–µ—á–∞–µ–º
                await event.reply(text, parse_mode=parse_mode)
            else:
                # –í –≥—Ä—É–ø–ø–∞—Ö - –û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û —Å —É–ø–æ–º–∏–Ω–∞–Ω–∏–µ–º –∏–ª–∏ reply
                if force_mention:
                    # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ —É–ø–æ–º–∏–Ω–∞–Ω–∏–µ + reply
                    mention = MessageUtils.get_user_mention(event.sender)
                    full_text = f"{mention}, {text}"
                    await event.reply(full_text, parse_mode=parse_mode)
                else:
                    # –û–±—ã—á–Ω—ã–π reply (–ø—Ä–µ–¥–ø–æ—á—Ç–∏—Ç–µ–ª—å–Ω–µ–µ)
                    await event.reply(text, parse_mode=parse_mode)
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ smart_reply: {e}")
            # Fallback –Ω–∞ –æ–±—ã—á–Ω—ã–π –æ—Ç–≤–µ—Ç
            try:
                await event.reply(text, parse_mode=parse_mode)
            except Exception as fallback_error:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ fallback reply: {fallback_error}")
                try:
                    await event.reply("‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è")
                except:
                    pass

class FormatUtils:
    """–£—Ç–∏–ª–∏—Ç—ã –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö"""
    
    @staticmethod
    def format_topics_table(topics: List[Dict[str, Any]], include_links: bool = True) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Ç–æ–ø–∏–∫–æ–≤ –≤ –≤–∏–¥–µ —Ç–∞–±–ª–∏—Ü—ã"""
        if not topics:
            return "‚ùå **–¢–æ–ø–∏–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã**"
        
        # –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –æ–±—ã—á–Ω—ã–µ —Ç–æ–ø–∏–∫–∏
        regular_topics = [t for t in topics if t.get('id', 0) > 0]
        
        if not regular_topics:
            return "‚ùå **–û–±—ã—á–Ω—ã–µ —Ç–æ–ø–∏–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã**"
        
        # –ë–∞–∑–æ–≤–∞—è —Ç–∞–±–ª–∏—Ü–∞
        table = "| ID | –ù–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–ø–∏–∫–∞ | –°–æ–∑–¥–∞—Ç–µ–ª—å |\n"
        table += "|----|-----------------|----------|\n"
        
        for topic in regular_topics:
            topic_id = topic.get('id', 0)
            title = topic.get('title', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')
            creator = topic.get('created_by', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
            
            # –û–±—Ä–µ–∑–∞–µ–º –¥–ª–∏–Ω–Ω—ã–µ –Ω–∞–∑–≤–∞–Ω–∏—è
            if len(title) > 25:
                title = title[:22] + "..."
            
            if len(creator) > 15:
                creator = creator[:12] + "..."
            
            table += f"| {topic_id} | {title} | {creator} |\n"
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Å—Å—ã–ª–∫–∏
        if include_links:
            table += "\nüîó **–ü–†–Ø–ú–´–ï –°–°–´–õ–ö–ò:**\n"
            for topic in regular_topics:
                link = topic.get('link', f"#topic_{topic.get('id', 0)}")
                table += f"‚Ä¢ [{topic.get('title', '–¢–æ–ø–∏–∫')}]({link})\n"
        
        return table
    
    @staticmethod
    def format_duration(seconds: float) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è"""
        if seconds < 1:
            return f"{seconds*1000:.0f}–º—Å"
        elif seconds < 60:
            return f"{seconds:.1f}—Å"
        elif seconds < 3600:
            minutes = seconds // 60
            remaining_seconds = seconds % 60
            return f"{minutes:.0f}–º {remaining_seconds:.0f}—Å"
        else:
            hours = seconds // 3600
            remaining_minutes = (seconds % 3600) // 60
            return f"{hours:.0f}—á {remaining_minutes:.0f}–º"
    
    @staticmethod
    def format_number(number: int) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –±–æ–ª—å—à–∏—Ö —á–∏—Å–µ–ª"""
        if not isinstance(number, (int, float)):
            return str(number)
        
        return "{:,}".format(int(number)).replace(',', ' ')
    
    @staticmethod
    def create_progress_bar(current: int, total: int, width: int = 20) -> str:
        """–°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä–∞"""
        if total <= 0:
            return "‚ñì" * width
        
        progress = min(current / total, 1.0)
        filled = int(progress * width)
        empty = width - filled
        
        bar = "‚ñì" * filled + "‚ñë" * empty
        percentage = int(progress * 100)
        
        return f"[{bar}] {percentage}%"
    
    @staticmethod
    def format_timestamp(timestamp: datetime) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ timestamp –≤ —á–∏—Ç–∞–µ–º—ã–π –≤–∏–¥"""
        try:
            return timestamp.strftime('%d.%m.%Y %H:%M:%S')
        except Exception:
            return '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'
    
    @staticmethod
    def format_date(date) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞—Ç—ã"""
        try:
            if hasattr(date, 'strftime'):
                return date.strftime('%d.%m.%Y')
            return str(date)
        except Exception:
            return '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'
    
    @staticmethod
    def format_time(time) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏"""
        try:
            if hasattr(time, 'strftime'):
                return time.strftime('%H:%M:%S')
            return str(time)
        except Exception:
            return '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'

class TextUtils:
    """–£—Ç–∏–ª–∏—Ç—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ç–µ–∫—Å—Ç–æ–º"""
    
    @staticmethod
    def sanitize_text(text: str, max_length: int = 100) -> str:
        """–û—á–∏—Å—Ç–∫–∞ –∏ –æ–±—Ä–µ–∑–∫–∞ —Ç–µ–∫—Å—Ç–∞"""
        if not text:
            return "–ù–µ —É–∫–∞–∑–∞–Ω–æ"
        
        # –£–±–∏—Ä–∞–µ–º –æ–ø–∞—Å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã –¥–ª—è markdown
        text = str(text)
        text = re.sub(r'[*_`\[\]()~>#+\-=|{}.!]', '', text)
        
        # –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã
        text = ' '.join(text.split())
        
        # –û–±—Ä–µ–∑–∞–µ–º –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
        if len(text) > max_length:
            text = text[:max_length-3] + "..."
        
        return text
    
    @staticmethod
    def escape_markdown(text: str) -> str:
        """–≠–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏–º–≤–æ–ª–æ–≤ markdown"""
        if not text:
            return ""
        
        special_chars = ['*', '_', '[', ']', '(', ')', '~', '`', '>', '#', '+', '-', '=', '|', '{', '}', '.', '!']
        
        escaped_text = str(text)
        for char in special_chars:
            escaped_text = escaped_text.replace(char, f'\\{char}')
        
        return escaped_text
    
    @staticmethod
    def truncate_text(text: str, max_length: int = 50, suffix: str = "...") -> str:
        """–û–±—Ä–µ–∑–∫–∞ —Ç–µ–∫—Å—Ç–∞ —Å —Å—É—Ñ—Ñ–∏–∫—Å–æ–º"""
        if not text:
            return ""
        
        text = str(text)
        if len(text) <= max_length:
            return text
        
        return text[:max_length - len(suffix)] + suffix
    
    @staticmethod
    def clean_html_tags(text: str) -> str:
        """–£–¥–∞–ª–µ–Ω–∏–µ HTML —Ç–µ–≥–æ–≤"""
        if not text:
            return ""
        
        # –ü—Ä–æ—Å—Ç–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ HTML —Ç–µ–≥–æ–≤
        clean = re.sub(r'<[^>]+>', '', str(text))
        
        # –î–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ HTML entities
        html_entities = {
            '&amp;': '&',
            '&lt;': '<',
            '&gt;': '>',
            '&quot;': '"',
            '&#39;': "'",
            '&nbsp;': ' '
        }
        
        for entity, replacement in html_entities.items():
            clean = clean.replace(entity, replacement)
        
        return clean.strip()
    
    @staticmethod
    def safe_str(value, default: str = "") -> str:
        """–ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –≤ str"""
        try:
            return str(value) if value is not None else default
        except Exception:
            return default

class ValidationUtils:
    """–£—Ç–∏–ª–∏—Ç—ã –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö"""
    
    @staticmethod
    def validate_chat_id(chat_id: str) -> bool:
        """–í–∞–ª–∏–¥–∞—Ü–∏—è ID —á–∞—Ç–∞"""
        try:
            chat_id_int = int(chat_id)
            if abs(chat_id_int) < 1000000000:
                return False
            return True
        except (ValueError, TypeError):
            return False
    
    @staticmethod
    def is_valid_username(username: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏ username"""
        if not username:
            return False
        
        username = username.lstrip('@')
        pattern = r'^[a-zA-Z0-9_]{5,32}$'
        return bool(re.match(pattern, username))
    
    @staticmethod
    def is_forum_chat(chat) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —á–∞—Ç —Ñ–æ—Ä—É–º–æ–º"""
        try:
            return (isinstance(chat, Channel) and 
                    hasattr(chat, 'forum') and 
                    chat.forum and
                    hasattr(chat, 'megagroup') and 
                    chat.megagroup)
        except:
            return False
    
    @staticmethod
    def safe_int(value, default: int = 0) -> int:
        """–ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –≤ int"""
        try:
            return int(value)
        except (ValueError, TypeError):
            return default
    
    @staticmethod
    def safe_float(value, default: float = 0.0) -> float:
        """–ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –≤ float"""
        try:
            return float(value)
        except (ValueError, TypeError):
            return default

class LinkUtils:
    """–£—Ç–∏–ª–∏—Ç—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å–æ —Å—Å—ã–ª–∫–∞–º–∏"""
    
    @staticmethod
    def get_topic_link(chat, topic_id: int) -> str:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å—Å—ã–ª–∫–∏ –Ω–∞ —Ç–æ–ø–∏–∫"""
        try:
            if not chat:
                return f"#topic_{topic_id}"
            
            if hasattr(chat, 'id'):
                chat_id = str(chat.id).replace('-100', '')
            else:
                return f"#topic_{topic_id}"
            
            if not chat_id.isdigit():
                return f"#topic_{topic_id}"
            
            link = f"https://t.me/c/{chat_id}/{topic_id}"
            return link
            
        except Exception as e:
            logger.debug(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å—Å—ã–ª–∫–∏ –Ω–∞ —Ç–æ–ø–∏–∫ {topic_id}: {e}")
            return f"#topic_{topic_id}"

class UserUtils:
    """–£—Ç–∏–ª–∏—Ç—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏"""
    
    @staticmethod
    def get_username_display(user_data: Dict[str, Any]) -> str:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º–æ–≥–æ –∏–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        username = user_data.get('username')
        first_name = user_data.get('first_name')
        
        if username:
            return f"@{username}"
        elif first_name:
            return first_name
        else:
            return f"User #{user_data.get('user_id', 'Unknown')}"

class DataUtils:
    """–£—Ç–∏–ª–∏—Ç—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –¥–∞–Ω–Ω—ã–º–∏"""
    
    @staticmethod
    def dict_get_nested(data: Dict[str, Any], path: str, default=None):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è –∏–∑ –≤–ª–æ–∂–µ–Ω–Ω–æ–≥–æ —Å–ª–æ–≤–∞—Ä—è –ø–æ –ø—É—Ç–∏"""
        try:
            keys = path.split('.')
            current = data
            for key in keys:
                if isinstance(current, dict) and key in current:
                    current = current[key]
                else:
                    return default
            return current
        except Exception:
            return default
    
    @staticmethod
    def merge_dicts(*dicts: Dict[str, Any]) -> Dict[str, Any]:
        """–û–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ —Å–ª–æ–≤–∞—Ä–µ–π"""
        result = {}
        for d in dicts:
            if isinstance(d, dict):
                result.update(d)
        return result

class FileUtils:
    """–£—Ç–∏–ª–∏—Ç—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ñ–∞–π–ª–∞–º–∏"""
    
    @staticmethod
    def ensure_directory_exists(path: str) -> bool:
        """–°–æ–∑–¥–∞–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç"""
        try:
            os.makedirs(path, exist_ok=True)
            return True
        except Exception as e:
            logger.debug(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ {path}: {e}")
            return False
    
    @staticmethod
    def safe_file_write(filepath: str, content: str, encoding: str = 'utf-8') -> bool:
        """–ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –∑–∞–ø–∏—Å—å –≤ —Ñ–∞–π–ª"""
        try:
            with open(filepath, 'w', encoding=encoding) as f:
                f.write(content)
            return True
        except Exception as e:
            logger.debug(f"–û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ –≤ —Ñ–∞–π–ª {filepath}: {e}")
            return False
    
    @staticmethod
    def safe_file_read(filepath: str, encoding: str = 'utf-8') -> Optional[str]:
        """–ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ —á—Ç–µ–Ω–∏–µ —Ñ–∞–π–ª–∞"""
        try:
            with open(filepath, 'r', encoding=encoding) as f:
                return f.read()
        except Exception as e:
            logger.debug(f"–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞ {filepath}: {e}")
            return None

class LogUtils:
    """–£—Ç–∏–ª–∏—Ç—ã –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è"""
    
    @staticmethod
    def log_performance(operation: str, duration: float, details: Dict[str, Any] = None):
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –æ–ø–µ—Ä–∞—Ü–∏–π"""
        try:
            formatted_duration = FormatUtils.format_duration(duration)
            details_str = f" | {details}" if details else ""
            logger.info(f"‚ö° {operation}: {formatted_duration}{details_str}")
        except Exception as e:
            logger.debug(f"–û—à–∏–±–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏: {e}")
    
    @staticmethod
    def log_user_action(user_id: int, action: str, details: Optional[str] = None):
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
        try:
            details_str = f" | {details}" if details else ""
            logger.info(f"üë§ User {user_id}: {action}{details_str}")
        except Exception as e:
            logger.debug(f"–û—à–∏–±–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –¥–µ–π—Å—Ç–≤–∏–π: {e}")
    
    @staticmethod
    def log_error(context: str, error: Exception, user_id: Optional[int] = None):
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—à–∏–±–æ–∫ —Å –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º"""
        try:
            user_str = f" | User {user_id}" if user_id else ""
            logger.error(f"‚ùå {context}: {str(error)}{user_str}")
        except Exception as e:
            logger.debug(f"–û—à–∏–±–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –æ—à–∏–±–æ–∫: {e}")

# =============================================================================
# –ö–û–ù–°–¢–ê–ù–¢–´ –ò –°–¢–ê–¢–£–°–´
# =============================================================================

# –≠–º–æ–¥–∑–∏ –¥–ª—è —Å—Ç–∞—Ç—É—Å–æ–≤
STATUS_EMOJIS = {
    'active': '‚úÖ',
    'inactive': '‚ùå', 
    'pending': '‚è≥',
    'processing': 'üîÑ',
    'completed': '‚úÖ',
    'failed': '‚ùå',
    'expired': '‚è∞',
    'blocked': 'üö´',
    'warning': '‚ö†Ô∏è',
    'info': '‚ÑπÔ∏è',
    'success': 'üéâ',
    'error': 'üí•'
}

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã
MAX_MESSAGE_LENGTH = 4000
TELEGRAM_USERNAME_PATTERN = r'^[a-zA-Z0-9_]{5,32}$'
TELEGRAM_CHAT_ID_PATTERN = r'^-?\d{10,}$'

def get_status_emoji(status: str) -> str:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —ç–º–æ–¥–∑–∏ –¥–ª—è —Å—Ç–∞—Ç—É—Å–∞"""
    return STATUS_EMOJIS.get(status.lower(), '‚ùì')

# =============================================================================
# –ö–õ–ê–°–°–´ –°–ö–ê–ù–ï–†–û–í –¢–û–ü–ò–ö–û–í
# =============================================================================

class BaseTopicScanner:
    """–ë–∞–∑–æ–≤—ã–π –∫–ª–∞—Å—Å –¥–ª—è —Å–∫–∞–Ω–µ—Ä–æ–≤ —Ç–æ–ø–∏–∫–æ–≤"""
    
    def __init__(self, client: TelegramClient):
        self.client = client
    
    def create_topic_entry(self, topic_id: int, title: str, created_by: str = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ", 
                          messages: Any = "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ", chat=None, **kwargs) -> Dict[str, Any]:
        """–°–æ–∑–¥–∞—Ç—å –∑–∞–ø–∏—Å—å –æ —Ç–æ–ø–∏–∫–µ"""
        entry = {
            'id': topic_id,
            'title': title,
            'created_by': created_by,
            'messages': messages,
            'link': LinkUtils.get_topic_link(chat, topic_id) if chat else f"#topic_{topic_id}"
        }
        entry.update(kwargs)
        return entry

class BotTopicScanner(BaseTopicScanner):
    """–°–∫–∞–Ω–µ—Ä —Ç–æ–ø–∏–∫–æ–≤ –¥–ª—è —Ä–µ–∂–∏–º–∞ –±–æ—Ç–∞ (–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω—ã–π)"""
    
    async def scan_topics(self, chat) -> List[Dict[str, Any]]:
        """–°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–æ–ø–∏–∫–æ–≤ –≤ —Ä–µ–∂–∏–º–µ –±–æ—Ç–∞ —Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è–º–∏"""
        topics_data = []
        
        try:
            # –í—Å–µ–≥–¥–∞ –¥–æ–±–∞–≤–ª—è–µ–º General —Ç–æ–ø–∏–∫
            topics_data.append(self.create_topic_entry(
                topic_id=1,
                title="General",
                created_by="Telegram",
                messages="–º–Ω–æ–≥–æ",
                chat=chat
            ))
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —á–∞—Ç —Ñ–æ—Ä—É–º–æ–º
            if ValidationUtils.is_forum_chat(chat):
                logger.info("üìÇ –°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ–æ—Ä—É–º–∞ –≤ —Ä–µ–∂–∏–º–µ –±–æ—Ç–∞...")
                
                # –ú–µ—Ç–æ–¥ 1: GetFullChannelRequest
                additional_topics = await self._try_full_channel_request(chat)
                topics_data.extend(additional_topics)
                
                # –ú–µ—Ç–æ–¥ 2: –°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π
                if len(additional_topics) == 0:
                    message_topics = await self._scan_messages_for_topics(chat)
                    topics_data.extend(message_topics)
                
                # –ú–µ—Ç–æ–¥ 3: –≠–≤—Ä–∏—Å—Ç–∏—á–µ—Å–∫–∏–π –ø–æ–∏—Å–∫
                if len(topics_data) == 1:  # –¢–æ–ª—å–∫–æ General
                    heuristic_topics = await self._heuristic_topic_search(chat)
                    topics_data.extend(heuristic_topics)
                
                # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –µ—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞—à–ª–∏
                if len(topics_data) == 1:
                    topics_data.append(self.create_topic_entry(
                        topic_id=0,
                        title="‚ö†Ô∏è –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è Bot API",
                        created_by="–°–∏—Å—Ç–µ–º–∞",
                        messages="info",
                        chat=chat,
                        link="https://core.telegram.org/bots/api#limitations"
                    ))
                
                logger.info(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(topics_data)-1} –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö —Ç–æ–ø–∏–∫–æ–≤ (—Ä–µ–∂–∏–º –±–æ—Ç–∞)")
            else:
                logger.info("‚ÑπÔ∏è –ì—Ä—É–ø–ø–∞ –Ω–µ —è–≤–ª—è–µ—Ç—Å—è —Ñ–æ—Ä—É–º–æ–º")
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –≤ —Ä–µ–∂–∏–º–µ –±–æ—Ç–∞: {e}")
            topics_data.append(self.create_topic_entry(
                topic_id=-1,
                title="‚ùå –û—à–∏–±–∫–∞ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è",
                created_by="–°–∏—Å—Ç–µ–º–∞",
                messages="error",
                chat=chat,
                error=str(e)
            ))
        
        return topics_data
    
    async def _try_full_channel_request(self, chat) -> List[Dict[str, Any]]:
        """GetFullChannelRequest –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ API"""
        topics = []
        try:
            full_channel = await self.client(GetFullChannelRequest(chat))
            logger.debug("‚úÖ GetFullChannelRequest –≤—ã–ø–æ–ª–Ω–µ–Ω")
            # –í Bot API —ç—Ç–æ –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–ø–∏–∫–∞—Ö
        except Exception as e:
            logger.debug(f"GetFullChannelRequest –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª: {e}")
        
        return topics
    
    async def _scan_messages_for_topics(self, chat) -> List[Dict[str, Any]]:
        """–°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –ø–æ–∏—Å–∫–∞ —Ç–æ–ø–∏–∫–æ–≤"""
        topics = []
        found_topic_ids = set()
        
        try:
            logger.info("üîç –°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –ø–æ–∏—Å–∫–∞ —Ç–æ–ø–∏–∫–æ–≤...")
            
            messages = await self.client(GetHistoryRequest(
                peer=chat,
                offset_id=0,
                offset_date=None,
                add_offset=0,
                limit=100,
                max_id=0,
                min_id=0,
                hash=0
            ))
            
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è
            for message in messages.messages:
                topic_id = None
                
                if hasattr(message, 'reply_to') and message.reply_to:
                    if hasattr(message.reply_to, 'reply_to_top_id'):
                        topic_id = message.reply_to.reply_to_top_id
                    elif hasattr(message.reply_to, 'reply_to_msg_id'):
                        topic_id = message.reply_to.reply_to_msg_id
                
                if topic_id and topic_id != 1 and topic_id not in found_topic_ids:
                    found_topic_ids.add(topic_id)
                    topics.append(self.create_topic_entry(
                        topic_id=topic_id,
                        title=f"Topic {topic_id}",
                        created_by="–ù–∞–π–¥–µ–Ω–æ –≤ —Å–æ–æ–±—â–µ–Ω–∏—è—Ö",
                        messages="–∞–∫—Ç–∏–≤–Ω—ã–π",
                        chat=chat
                    ))
            
            if found_topic_ids:
                logger.info(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(found_topic_ids)} —Ç–æ–ø–∏–∫–æ–≤ —á–µ—Ä–µ–∑ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π")
            
        except Exception as e:
            logger.debug(f"–°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª–æ: {e}")
        
        return topics
    
    async def _heuristic_topic_search(self, chat) -> List[Dict[str, Any]]:
        """–≠–≤—Ä–∏—Å—Ç–∏—á–µ—Å–∫–∏–π –ø–æ–∏—Å–∫ –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö —Ç–æ–ø–∏–∫–æ–≤"""
        topics = []
        
        try:
            logger.info("üéØ –≠–≤—Ä–∏—Å—Ç–∏—á–µ—Å–∫–∏–π –ø–æ–∏—Å–∫ —Ç–æ–ø–∏–∫–æ–≤...")
            
            common_topic_ids = [2, 3, 4, 5, 10, 15, 20, 25, 30, 50, 100]
            
            for topic_id in common_topic_ids:
                try:
                    topic_messages = await self.client(GetHistoryRequest(
                        peer=chat,
                        offset_id=0,
                        offset_date=None,
                        add_offset=0,
                        limit=1,
                        max_id=0,
                        min_id=0,
                        hash=0
                    ))
                    
                    if topic_messages.messages:
                        topics.append(self.create_topic_entry(
                            topic_id=topic_id,
                            title=f"Topic {topic_id}",
                            created_by="–≠–≤—Ä–∏—Å—Ç–∏—á–µ—Å–∫–∏",
                            messages="–ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º—ã–π",
                            chat=chat
                        ))
                        
                        if len(topics) >= 5:
                            break
                            
                except Exception:
                    continue
                
                await asyncio.sleep(0.2)
            
            if topics:
                logger.info(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(topics)} —Ç–æ–ø–∏–∫–æ–≤ —ç–≤—Ä–∏—Å—Ç–∏—á–µ—Å–∫–∏")
                
        except Exception as e:
            logger.debug(f"–≠–≤—Ä–∏—Å—Ç–∏—á–µ—Å–∫–∏–π –ø–æ–∏—Å–∫ –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª: {e}")
        
        return topics

class UserTopicScanner(BaseTopicScanner):
    """–°–∫–∞–Ω–µ—Ä —Ç–æ–ø–∏–∫–æ–≤ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ —Ä–µ–∂–∏–º–∞ (–ø–æ–ª–Ω—ã–π –¥–æ—Å—Ç—É–ø)"""
    
    async def scan_topics(self, chat) -> List[Dict[str, Any]]:
        """–ü–æ–ª–Ω–æ–µ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–æ–ø–∏–∫–æ–≤ –≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–º —Ä–µ–∂–∏–º–µ"""
        topics_data = []
        
        try:
            # –í—Å–µ–≥–¥–∞ –¥–æ–±–∞–≤–ª—è–µ–º General —Ç–æ–ø–∏–∫
            topics_data.append(self.create_topic_entry(
                topic_id=1,
                title="General",
                created_by="Telegram",
                messages="–º–Ω–æ–≥–æ",
                chat=chat
            ))
            
            # –ï—Å–ª–∏ —ç—Ç–æ —Ñ–æ—Ä—É–º, –ø–æ–ª—É—á–∞–µ–º –í–°–ï –æ—Å—Ç–∞–ª—å–Ω—ã–µ —Ç–æ–ø–∏–∫–∏
            if ValidationUtils.is_forum_chat(chat):
                logger.info("üìÇ –ü–æ–ª–Ω–æ–µ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ–æ—Ä—É–º–∞ (–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π —Ä–µ–∂–∏–º)...")
                
                forum_topics = await self._scan_forum_topics(chat)
                topics_data.extend(forum_topics)
                
                logger.info(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(forum_topics)} —Ç–æ–ø–∏–∫–æ–≤ —Ñ–æ—Ä—É–º–∞")
            else:
                logger.info("‚ÑπÔ∏è –ì—Ä—É–ø–ø–∞ –Ω–µ —è–≤–ª—è–µ—Ç—Å—è —Ñ–æ—Ä—É–º–æ–º")
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–º —Ä–µ–∂–∏–º–µ: {e}")
            topics_data.append(self.create_topic_entry(
                topic_id=-1,
                title="‚ùå –û—à–∏–±–∫–∞ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è",
                created_by="–°–∏—Å—Ç–µ–º–∞",
                messages="error",
                chat=chat,
                error=str(e)
            ))
        
        return topics_data
    
    async def _scan_forum_topics(self, chat) -> List[Dict[str, Any]]:
        """–ü–æ–ª–Ω–æ–µ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–æ–ø–∏–∫–æ–≤ —Ñ–æ—Ä—É–º–∞"""
        topics = []
        
        try:
            offset_date = None
            offset_id = 0
            offset_topic = 0
            limit = 100
            total_scanned = 0
            max_topics = 1000  # –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
            
            while total_scanned < max_topics:
                try:
                    result = await self.client(GetForumTopicsRequest(
                        channel=chat,
                        offset_date=offset_date,
                        offset_id=offset_id,
                        offset_topic=offset_topic,
                        limit=limit
                    ))
                    
                    if not result.topics:
                        break
                    
                    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥—ã–π —Ç–æ–ø–∏–∫
                    for topic in result.topics:
                        if hasattr(topic, 'id') and hasattr(topic, 'title'):
                            topic_data = await self._process_forum_topic(topic, chat)
                            if topic_data:
                                topics.append(topic_data)
                    
                    total_scanned += len(result.topics)
                    
                    # –û–±–Ω–æ–≤–ª—è–µ–º offset –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–π –∏—Ç–µ—Ä–∞—Ü–∏–∏
                    if len(result.topics) < limit:
                        break
                    
                    last_topic = result.topics[-1]
                    offset_topic = last_topic.id
                    offset_date = getattr(last_topic, 'date', None)
                    
                    # –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
                    await asyncio.sleep(0.5)
                    
                except ChatAdminRequiredError:
                    logger.warning("‚ö†Ô∏è –¢—Ä–µ–±—É—é—Ç—Å—è –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –¥–ª—è –ø–æ–ª–Ω–æ–≥–æ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è")
                    break
                except ChannelPrivateError:
                    logger.warning("‚ö†Ô∏è –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –ø—Ä–∏–≤–∞—Ç–Ω–æ–º—É –∫–∞–Ω–∞–ª—É")
                    break
                except Exception as e:
                    logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ç–æ–ø–∏–∫–æ–≤: {e}")
                    break
            
            logger.info(f"üìä –ü—Ä–æ—Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ {total_scanned} —Ç–æ–ø–∏–∫–æ–≤, –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ {len(topics)}")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª–Ω–æ–≥–æ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")
        
        return topics
    
    async def _process_forum_topic(self, topic, chat) -> Optional[Dict[str, Any]]:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–¥–µ–ª—å–Ω–æ–≥–æ —Ç–æ–ø–∏–∫–∞ —Ñ–æ—Ä—É–º–∞"""
        try:
            # –ë–∞–∑–æ–≤–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
            topic_id = topic.id
            title = topic.title
            
            # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–æ–∑–¥–∞—Ç–µ–ª–µ
            creator = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
            if hasattr(topic, 'from_id') and topic.from_id:
                try:
                    creator_entity = await self.client.get_entity(topic.from_id)
                    if hasattr(creator_entity, 'username') and creator_entity.username:
                        creator = f"@{creator_entity.username}"
                    elif hasattr(creator_entity, 'first_name'):
                        creator = creator_entity.first_name or "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
                except Exception as e:
                    logger.debug(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–æ–∑–¥–∞—Ç–µ–ª—è —Ç–æ–ø–∏–∫–∞ {topic_id}: {e}")
            
            # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π
            messages = 0
            if hasattr(topic, 'replies') and topic.replies:
                messages = getattr(topic.replies, 'replies', 0)
            
            # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
            extra_info = {}
            
            if hasattr(topic, 'date'):
                extra_info['created_date'] = topic.date.strftime('%d.%m.%Y %H:%M')
            
            if hasattr(topic, 'closed'):
                extra_info['is_closed'] = topic.closed
            
            if hasattr(topic, 'pinned'):
                extra_info['is_pinned'] = topic.pinned
            
            if hasattr(topic, 'hidden'):
                extra_info['is_hidden'] = topic.hidden
            
            if hasattr(topic, 'icon_color'):
                extra_info['icon_color'] = topic.icon_color
            
            if hasattr(topic, 'icon_emoji_id'):
                extra_info['icon_emoji_id'] = topic.icon_emoji_id
            
            return self.create_topic_entry(
                topic_id=topic_id,
                title=title,
                created_by=creator,
                messages=messages,
                chat=chat,
                **extra_info
            )
            
        except Exception as e:
            logger.debug(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç–æ–ø–∏–∫–∞ {getattr(topic, 'id', 'unknown')}: {e}")
            return None

class TopicScannerFactory:
    """–§–∞–±—Ä–∏–∫–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Å–∫–∞–Ω–µ—Ä–æ–≤ —Ç–æ–ø–∏–∫–æ–≤"""
    
    @staticmethod
    def create_scanner(client: TelegramClient, mode: str = 'bot') -> BaseTopicScanner:
        """–°–æ–∑–¥–∞—Ç—å —Å–∫–∞–Ω–µ—Ä –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–µ–∂–∏–º–∞"""
        if mode == 'user':
            return UserTopicScanner(client)
        else:
            return BotTopicScanner(client)
    
    @staticmethod
    async def scan_with_fallback(bot_client: TelegramClient, user_client: Optional[TelegramClient], 
                                chat) -> List[Dict[str, Any]]:
        """–°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Å fallback: —Å–Ω–∞—á–∞–ª–∞ user —Ä–µ–∂–∏–º, –ø–æ—Ç–æ–º bot"""
        try:
            # –ü—ã—Ç–∞–µ–º—Å—è —Å–∫–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –≤ user —Ä–µ–∂–∏–º–µ –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω–æ
            if user_client:
                user_scanner = UserTopicScanner(user_client)
                topics = await user_scanner.scan_topics(chat)
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞—á–µ—Å—Ç–≤–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
                regular_topics = [t for t in topics if t['id'] > 0]
                if len(regular_topics) > 1:  # –ë–æ–ª–µ–µ —á–µ–º –ø—Ä–æ—Å—Ç–æ General
                    logger.info(f"‚úÖ –£—Å–ø–µ—à–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω user —Ä–µ–∂–∏–º: {len(regular_topics)} —Ç–æ–ø–∏–∫–æ–≤")
                    return topics
            
            # Fallback –Ω–∞ bot —Ä–µ–∂–∏–º
            logger.info("üîÑ –ü–µ—Ä–µ—Ö–æ–¥ –Ω–∞ bot —Ä–µ–∂–∏–º —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è")
            bot_scanner = BotTopicScanner(bot_client)
            return await bot_scanner.scan_topics(chat)
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ scan_with_fallback: {e}")
            # –í –∫—Ä–∞–π–Ω–µ–º —Å–ª—É—á–∞–µ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –º–∏–Ω–∏–º—É–º
            return [
                {
                    'id': 1,
                    'title': 'General',
                    'created_by': 'Telegram',
                    'messages': '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ',
                    'link': LinkUtils.get_topic_link(chat, 1) if chat else '#general'
                }
            ]

# =============================================================================
# –§–£–ù–ö–¶–ò–ò –°–û–í–ú–ï–°–¢–ò–ú–û–°–¢–ò
# =============================================================================

# –û—Å–Ω–æ–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º –∫–æ–¥–æ–º
async def send_long_message(event, text: str, max_length: int = 4000, parse_mode: str = 'markdown', buttons=None):
    """–°–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å: –æ—Ç–ø—Ä–∞–≤–∫–∞ –¥–ª–∏–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è"""
    return await MessageUtils.send_long_message(event, text, max_length, parse_mode, buttons)

def format_topics_table(topics: List[Dict[str, Any]], include_links: bool = True) -> str:
    """–°–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å: —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã —Ç–æ–ø–∏–∫–æ–≤"""
    return FormatUtils.format_topics_table(topics, include_links)

def get_topic_link(chat, topic_id: int) -> str:
    """–°–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å: –≥–µ–Ω–µ—Ä–∞—Ü–∏—è —Å—Å—ã–ª–∫–∏ –Ω–∞ —Ç–æ–ø–∏–∫"""
    return LinkUtils.get_topic_link(chat, topic_id)

def get_username_display(user_data: Dict[str, Any]) -> str:
    """–°–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å: –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º–æ–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    return UserUtils.get_username_display(user_data)

def validate_chat_id(chat_id: str) -> bool:
    """–°–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å: –≤–∞–ª–∏–¥–∞—Ü–∏—è ID —á–∞—Ç–∞"""
    return ValidationUtils.validate_chat_id(chat_id)

def sanitize_text(text: str, max_length: int = 100) -> str:
    """–°–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å: –æ—á–∏—Å—Ç–∫–∞ —Ç–µ–∫—Å—Ç–∞"""
    return TextUtils.sanitize_text(text, max_length)

def format_duration(seconds: float) -> str:
    """–°–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å: —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏"""
    return FormatUtils.format_duration(seconds)

def is_forum_chat(chat) -> bool:
    """–°–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å: –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–æ—Ä—É–º–∞"""
    return ValidationUtils.is_forum_chat(chat)

def escape_markdown(text: str) -> str:
    """–°–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å: —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ markdown"""
    return TextUtils.escape_markdown(text)

def truncate_text(text: str, max_length: int = 50, suffix: str = "...") -> str:
    """–°–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å: –æ–±—Ä–µ–∑–∫–∞ —Ç–µ–∫—Å—Ç–∞"""
    return TextUtils.truncate_text(text, max_length, suffix)

# –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
def create_progress_bar(current: int, total: int, width: int = 20) -> str:
    """–°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä–∞"""
    return FormatUtils.create_progress_bar(current, total, width)

def format_number(number: int) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –±–æ–ª—å—à–∏—Ö —á–∏—Å–µ–ª"""
    return FormatUtils.format_number(number)

def clean_html_tags(text: str) -> str:
    """–£–¥–∞–ª–µ–Ω–∏–µ HTML —Ç–µ–≥–æ–≤"""
    return TextUtils.clean_html_tags(text)

def is_valid_username(username: str) -> bool:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏ username"""
    return ValidationUtils.is_valid_username(username)

def log_performance(operation: str, duration: float, details: Dict[str, Any] = None):
    """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –æ–ø–µ—Ä–∞—Ü–∏–π"""
    return LogUtils.log_performance(operation, duration, details)

def log_user_action(user_id: int, action: str, details: Optional[str] = None):
    """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
    return LogUtils.log_user_action(user_id, action, details)

def log_error(context: str, error: Exception, user_id: Optional[int] = None):
    """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—à–∏–±–æ–∫ —Å –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º"""
    return LogUtils.log_error(context, error, user_id)

def format_timestamp(timestamp: datetime) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ timestamp –≤ —á–∏—Ç–∞–µ–º—ã–π –≤–∏–¥"""
    return FormatUtils.format_timestamp(timestamp)

def format_date(date) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞—Ç—ã"""
    return FormatUtils.format_date(date)

def format_time(time) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏"""
    return FormatUtils.format_time(time)

def safe_int(value, default: int = 0) -> int:
    """–ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –≤ int"""
    return ValidationUtils.safe_int(value, default)

def safe_float(value, default: float = 0.0) -> float:
    """–ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –≤ float"""
    return ValidationUtils.safe_float(value, default)

def safe_str(value, default: str = "") -> str:
    """–ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –≤ str"""
    return TextUtils.safe_str(value, default)

def dict_get_nested(data: Dict[str, Any], path: str, default=None):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è –∏–∑ –≤–ª–æ–∂–µ–Ω–Ω–æ–≥–æ —Å–ª–æ–≤–∞—Ä—è –ø–æ –ø—É—Ç–∏"""
    return DataUtils.dict_get_nested(data, path, default)

def merge_dicts(*dicts: Dict[str, Any]) -> Dict[str, Any]:
    """–û–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ —Å–ª–æ–≤–∞—Ä–µ–π"""
    return DataUtils.merge_dicts(*dicts)

def ensure_directory_exists(path: str) -> bool:
    """–°–æ–∑–¥–∞–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç"""
    return FileUtils.ensure_directory_exists(path)

def safe_file_write(filepath: str, content: str, encoding: str = 'utf-8') -> bool:
    """–ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –∑–∞–ø–∏—Å—å –≤ —Ñ–∞–π–ª"""
    return FileUtils.safe_file_write(filepath, content, encoding)

def safe_file_read(filepath: str, encoding: str = 'utf-8') -> Optional[str]:
    """–ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ —á—Ç–µ–Ω–∏–µ —Ñ–∞–π–ª–∞"""
    return FileUtils.safe_file_read(filepath, encoding)

# =============================================================================
# –≠–ö–°–ü–û–†–¢ –í–°–ï–• –§–£–ù–ö–¶–ò–ô –ò –ö–õ–ê–°–°–û–í
# =============================================================================

__all__ = [
    # –û—Å–Ω–æ–≤–Ω—ã–µ –∫–ª–∞—Å—Å—ã —É—Ç–∏–ª–∏—Ç
    'MessageUtils',
    'FormatUtils',
    'TextUtils',
    'ValidationUtils',
    'LinkUtils',
    'UserUtils',
    'DataUtils',
    'FileUtils',
    'LogUtils',
    
    # –û—Å–Ω–æ–≤–Ω—ã–µ –∫–ª–∞—Å—Å—ã —Å–∫–∞–Ω–µ—Ä–æ–≤
    'BaseTopicScanner',
    'BotTopicScanner',
    'UserTopicScanner',
    'TopicScannerFactory',
    
    # –û—Å–Ω–æ–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
    'send_long_message',
    'format_topics_table',
    'get_topic_link',
    'get_username_display',
    'validate_chat_id',
    'sanitize_text',
    'format_duration',
    'is_forum_chat',
    'escape_markdown',
    'truncate_text',
    'get_status_emoji',
    
    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
    'create_progress_bar',
    'format_number',
    'clean_html_tags',
    'is_valid_username',
    'log_performance',
    'log_user_action',
    'log_error',
    'format_timestamp',
    'format_date',
    'format_time',
    'safe_int',
    'safe_float',
    'safe_str',
    'dict_get_nested',
    'merge_dicts',
    'ensure_directory_exists',
    'safe_file_write',
    'safe_file_read',
    
    # –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã
    'STATUS_EMOJIS',
    'MAX_MESSAGE_LENGTH',
    'TELEGRAM_USERNAME_PATTERN',
    'TELEGRAM_CHAT_ID_PATTERN'
]