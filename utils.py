#!/usr/bin/env python3
"""
–í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ Get ID Bot by Mister DMS
–û–ë–ù–û–í–õ–ï–ù–û v4.1.1: —É–ª—É—á—à–µ–Ω–Ω—ã–µ —É—Ç–∏–ª–∏—Ç—ã + –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å
"""

import logging
import json
import re
import asyncio
from datetime import datetime, timedelta
from typing import Optional, Dict, Any, List, Union
from cryptography.fernet import Fernet
import base64
import hashlib

from config import ENCRYPTION_KEY, SALT, LOG_LEVEL, DEVELOPMENT_MODE

# === –ù–ê–°–¢–†–û–ô–ö–ê –õ–û–ì–ò–†–û–í–ê–ù–ò–Ø ===

def setup_logging() -> logging.Logger:
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–∏—Å—Ç–µ–º—ã –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è"""
    
    # –°–æ–∑–¥–∞–µ–º –≥–ª–∞–≤–Ω—ã–π –ª–æ–≥–≥–µ—Ä
    logger = logging.getLogger('get_id_bot')
    logger.setLevel(getattr(logging, LOG_LEVEL.upper(), logging.INFO))
    
    # –ò–∑–±–µ–≥–∞–µ–º –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
    if logger.handlers:
        return logger
    
    # –°–æ–∑–¥–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–æ–Ω—Å–æ–ª–∏
    console_handler = logging.StreamHandler()
    console_handler.setLevel(logging.INFO)
    
    # –§–æ—Ä–º–∞—Ç –ª–æ–≥–æ–≤
    if DEVELOPMENT_MODE:
        # –ü–æ–¥—Ä–æ–±–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
        formatter = logging.Formatter(
            '%(asctime)s | %(name)s | %(levelname)s | %(funcName)s:%(lineno)d | %(message)s',
            datefmt='%H:%M:%S'
        )
    else:
        # –ö–æ–º–ø–∞–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–ª—è production
        formatter = logging.Formatter(
            '%(asctime)s | %(levelname)s | %(message)s',
            datefmt='%H:%M:%S'
        )
    
    console_handler.setFormatter(formatter)
    logger.addHandler(console_handler)
    
    # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ª–æ–≥–≥–µ—Ä—ã —Ç–µ–ª–µ–≥—Ä–∞–º –±–∏–±–ª–∏–æ—Ç–µ–∫
    logging.getLogger('telethon').setLevel(logging.WARNING)
    logging.getLogger('aiohttp').setLevel(logging.WARNING)
    
    return logger

# === –£–¢–ò–õ–ò–¢–´ –î–õ–Ø –°–û–û–ë–©–ï–ù–ò–ô ===

class MessageUtils:
    """–£—Ç–∏–ª–∏—Ç—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏ Telegram"""
    
    @staticmethod
    async def smart_reply(event, text: str, buttons=None, parse_mode='md') -> Any:
        """–£–º–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç–≤–µ—Ç–∞ —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫"""
        try:
            # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É —Å–æ–æ–±—â–µ–Ω–∏—è
            if len(text) > 4096:
                text = text[:4090] + "..."
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            if buttons:
                return await event.respond(text, buttons=buttons, parse_mode=parse_mode)
            else:
                return await event.respond(text, parse_mode=parse_mode)
                
        except Exception as e:
            logging.getLogger(__name__).error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
            
            # Fallback - –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –±–µ–∑ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
            try:
                fallback_text = "‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑."
                return await event.respond(fallback_text)
            except:
                pass  # –ï—Å–ª–∏ –∏ —ç—Ç–æ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç, –º–æ–ª—á–∞ –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º
    
    @staticmethod
    def escape_markdown(text: str) -> str:
        """–≠–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤ Markdown"""
        escape_chars = ['_', '*', '[', ']', '(', ')', '~', '`', '>', '#', '+', '-', '=', '|', '{', '}', '.', '!']
        
        for char in escape_chars:
            text = text.replace(char, f'\\{char}')
        
        return text
    
    @staticmethod
    def format_code_block(code: str, language: str = '') -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –±–ª–æ–∫–∞ –∫–æ–¥–∞"""
        return f"```{language}\n{code}\n```"
    
    @staticmethod
    def format_inline_code(code: str) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ inline –∫–æ–¥–∞"""
        return f"`{code}`"
    
    @staticmethod
    def truncate_text(text: str, max_length: int = 4000, suffix: str = "...") -> str:
        """–û–±—Ä–µ–∑–∫–∞ —Ç–µ–∫—Å—Ç–∞ —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—ã"""
        if len(text) <= max_length:
            return text
        
        # –û–±—Ä–µ–∑–∞–µ–º –ø–æ —Å–ª–æ–≤–∞–º –µ—Å–ª–∏ –≤–æ–∑–º–æ–∂–Ω–æ
        words = text[:max_length - len(suffix)].split()
        if len(words) > 1:
            words.pop()  # –£–±–∏—Ä–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–µ–µ –Ω–µ–ø–æ–ª–Ω–æ–µ —Å–ª–æ–≤–æ
            return ' '.join(words) + suffix
        
        return text[:max_length - len(suffix)] + suffix

# === –£–¢–ò–õ–ò–¢–´ –®–ò–§–†–û–í–ê–ù–ò–Ø ===

class EncryptionUtils:
    """–£—Ç–∏–ª–∏—Ç—ã –¥–ª—è —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö"""
    
    _fernet = None
    
    @classmethod
    def get_cipher(cls):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –æ–±—ä–µ–∫—Ç–∞ —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è"""
        if cls._fernet is None:
            # –°–æ–∑–¥–∞–µ–º –∫–ª—é—á –∏–∑ ENCRYPTION_KEY
            key = base64.urlsafe_b64encode(
                hashlib.sha256(ENCRYPTION_KEY.encode()).digest()
            )
            cls._fernet = Fernet(key)
        return cls._fernet
    
    @classmethod
    def encrypt(cls, data: str) -> str:
        """–®–∏—Ñ—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç—Ä–æ–∫–∏"""
        try:
            if not data:
                return ''
            
            cipher = cls.get_cipher()
            # –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–ª—å –¥–ª—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
            salted_data = f"{SALT}:{data}"
            encrypted_bytes = cipher.encrypt(salted_data.encode())
            return base64.urlsafe_b64encode(encrypted_bytes).decode()
            
        except Exception as e:
            logging.getLogger(__name__).error(f"‚ùå –û—à–∏–±–∫–∞ —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è: {e}")
            return ''
    
    @classmethod
    def decrypt(cls, encrypted_data: str) -> str:
        """–†–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∞ —Å—Ç—Ä–æ–∫–∏"""
        try:
            if not encrypted_data:
                return ''
            
            cipher = cls.get_cipher()
            encrypted_bytes = base64.urlsafe_b64decode(encrypted_data.encode())
            decrypted_data = cipher.decrypt(encrypted_bytes).decode()
            
            # –£–±–∏—Ä–∞–µ–º —Å–æ–ª—å
            if decrypted_data.startswith(f"{SALT}:"):
                return decrypted_data[len(SALT) + 1:]
            
            return decrypted_data
            
        except Exception as e:
            logging.getLogger(__name__).error(f"‚ùå –û—à–∏–±–∫–∞ —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∏: {e}")
            return ''
    
    @classmethod
    def hash_password(cls, password: str) -> str:
        """–•–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–∞—Ä–æ–ª—è"""
        return hashlib.sha256(f"{SALT}:{password}".encode()).hexdigest()

# === –£–¢–ò–õ–ò–¢–´ –í–ê–õ–ò–î–ê–¶–ò–ò ===

class ValidationUtils:
    """–£—Ç–∏–ª–∏—Ç—ã –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö"""
    
    @staticmethod
    def validate_api_credentials(api_id: str, api_hash: str) -> bool:
        """–í–∞–ª–∏–¥–∞—Ü–∏—è API credentials"""
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º API_ID
            api_id_int = int(api_id)
            if api_id_int <= 0 or api_id_int > 999999999:
                return False
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º API_HASH
            if not api_hash or len(api_hash) < 20:
                return False
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —ç—Ç–æ hex —Å—Ç—Ä–æ–∫–∞
            int(api_hash, 16)
            
            return True
            
        except (ValueError, TypeError):
            return False
    
    @staticmethod
    def validate_user_id(user_id: Union[str, int]) -> bool:
        """–í–∞–ª–∏–¥–∞—Ü–∏—è Telegram User ID"""
        try:
            user_id_int = int(user_id)
            return 0 < user_id_int < 10**12  # –†–∞–∑—É–º–Ω—ã–µ –ø—Ä–µ–¥–µ–ª—ã –¥–ª—è Telegram ID
        except (ValueError, TypeError):
            return False
    
    @staticmethod
    def validate_chat_id(chat_id: Union[str, int]) -> bool:
        """–í–∞–ª–∏–¥–∞—Ü–∏—è Telegram Chat ID"""
        try:
            chat_id_int = int(chat_id)
            # Chat ID –º–æ–∂–µ—Ç –±—ã—Ç—å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–º –¥–ª—è –≥—Ä—É–ø–ø
            return abs(chat_id_int) < 10**15
        except (ValueError, TypeError):
            return False
    
    @staticmethod
    def validate_url(url: str) -> bool:
        """–í–∞–ª–∏–¥–∞—Ü–∏—è URL"""
        url_pattern = re.compile(
            r'^https?://'  # http:// –∏–ª–∏ https://
            r'(?:(?:[A-Z0-9](?:[A-Z0-9-]{0,61}[A-Z0-9])?\.)+[A-Z]{2,6}\.?|'  # domain...
            r'localhost|'  # localhost...
            r'\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3})'  # ...–∏–ª–∏ IP
            r'(?::\d+)?'  # –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π –ø–æ—Ä—Ç
            r'(?:/?|[/?]\S+)$', re.IGNORECASE)
        
        return url_pattern.match(url) is not None
    
    @staticmethod
    def sanitize_filename(filename: str) -> str:
        """–û—á–∏—Å—Ç–∫–∞ –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞ –æ—Ç –æ–ø–∞—Å–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤"""
        # –£–±–∏—Ä–∞–µ–º –æ–ø–∞—Å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã
        sanitized = re.sub(r'[<>:"/\\|?*]', '_', filename)
        
        # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É
        if len(sanitized) > 100:
            sanitized = sanitized[:100]
        
        return sanitized

# === –£–¢–ò–õ–ò–¢–´ –§–û–†–ú–ê–¢–ò–†–û–í–ê–ù–ò–Ø ===

def format_user_info(user_data: Dict[str, Any]) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ"""
    username = user_data.get('telegram_username', 'N/A')
    first_name = user_data.get('first_name', 'N/A')
    mode = user_data.get('mode', 'bot')
    status = user_data.get('status', 'active')
    
    return f"üë§ **{first_name}** (@{username})\nü§ñ –†–µ–∂–∏–º: {mode}\nüìä –°—Ç–∞—Ç—É—Å: {status}"

def format_timespan(timestamp: Optional[datetime]) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ –ø—Ä–æ–º–µ–∂—É—Ç–∫–∞"""
    if not timestamp:
        return "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
    
    if isinstance(timestamp, str):
        try:
            timestamp = datetime.fromisoformat(timestamp.replace('Z', '+00:00'))
        except ValueError:
            return "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
    
    now = datetime.now()
    if timestamp.tzinfo:
        # –ï—Å–ª–∏ timestamp —Å timezone, –ø—Ä–∏–≤–æ–¥–∏–º now –∫ UTC
        from datetime import timezone
        now = now.replace(tzinfo=timezone.utc)
    
    delta = now - timestamp
    
    if delta.days > 0:
        return f"{delta.days} –¥–Ω. –Ω–∞–∑–∞–¥"
    elif delta.seconds > 3600:
        hours = delta.seconds // 3600
        return f"{hours} —á. –Ω–∞–∑–∞–¥"
    elif delta.seconds > 60:
        minutes = delta.seconds // 60
        return f"{minutes} –º–∏–Ω. –Ω–∞–∑–∞–¥"
    else:
        return "–¢–æ–ª—å–∫–æ —á—Ç–æ"

def format_file_size(bytes_count: int) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–∞ —Ñ–∞–π–ª–∞"""
    for unit in ['B', 'KB', 'MB', 'GB']:
        if bytes_count < 1024:
            return f"{bytes_count:.1f} {unit}"
        bytes_count /= 1024
    return f"{bytes_count:.1f} TB"

def format_number(number: int) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —á–∏—Å–µ–ª —Å —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—è–º–∏"""
    return f"{number:,}".replace(',', ' ')

# === –£–¢–ò–õ–ò–¢–´ –î–õ–Ø –†–ê–ë–û–¢–´ –° –ß–ê–¢–ê–ú–ò ===

def is_group_message(event) -> bool:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ –≥—Ä—É–ø–ø—ã"""
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø —á–∞—Ç–∞
        if hasattr(event, 'is_group') and event.is_group:
            return True
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ ID —á–∞—Ç–∞ (–æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–µ –¥–ª—è –≥—Ä—É–ø–ø)
        if hasattr(event, 'chat_id') and event.chat_id < 0:
            return True
        
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —á–µ—Ä–µ–∑ –æ–±—ä–µ–∫—Ç —á–∞—Ç–∞
        if hasattr(event, 'chat'):
            chat = event.chat
            if hasattr(chat, 'megagroup') and chat.megagroup:
                return True
            if hasattr(chat, 'broadcast') and not chat.broadcast:
                return True
        
        return False
        
    except Exception:
        return False

def extract_chat_info(event) -> Dict[str, Any]:
    """–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —á–∞—Ç–µ"""
    info = {
        'chat_id': None,
        'chat_type': 'unknown',
        'chat_title': None,
        'is_group': False,
        'is_supergroup': False,
        'is_channel': False,
        'is_private': False
    }
    
    try:
        if hasattr(event, 'chat_id'):
            info['chat_id'] = event.chat_id
        
        if hasattr(event, 'chat'):
            chat = event.chat
            
            if hasattr(chat, 'title'):
                info['chat_title'] = chat.title
            
            if hasattr(chat, 'megagroup'):
                info['is_supergroup'] = chat.megagroup
                info['is_group'] = True
                info['chat_type'] = 'supergroup'
            elif hasattr(chat, 'broadcast'):
                info['is_channel'] = chat.broadcast
                info['chat_type'] = 'channel'
            elif event.chat_id > 0:
                info['is_private'] = True
                info['chat_type'] = 'private'
            else:
                info['is_group'] = True
                info['chat_type'] = 'group'
        
        elif event.chat_id:
            if event.chat_id > 0:
                info['is_private'] = True
                info['chat_type'] = 'private'
            else:
                info['is_group'] = True
                info['chat_type'] = 'group'
    
    except Exception as e:
        logging.getLogger(__name__).debug(f"–û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —á–∞—Ç–µ: {e}")
    
    return info

# === –£–¢–ò–õ–ò–¢–´ –î–õ–Ø –†–ê–ë–û–¢–´ –° JSON ===

class JSONUtils:
    """–£—Ç–∏–ª–∏—Ç—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å JSON"""
    
    @staticmethod
    def safe_json_loads(json_str: str, default=None) -> Any:
        """–ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ JSON"""
        try:
            return json.loads(json_str)
        except (json.JSONDecodeError, TypeError):
            return default
    
    @staticmethod
    def safe_json_dumps(data: Any, default=None) -> str:
        """–ë–µ–∑–æ–ø–∞—Å–Ω–∞—è —Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏—è –≤ JSON"""
        try:
            return json.dumps(data, ensure_ascii=False, separators=(',', ':'))
        except (TypeError, ValueError):
            return json.dumps(default) if default is not None else '{}'
    
    @staticmethod
    def pretty_json(data: Any) -> str:
        """–ö—Ä–∞—Å–∏–≤–æ–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ JSON"""
        try:
            return json.dumps(data, ensure_ascii=False, indent=2)
        except (TypeError, ValueError):
            return str(data)

# === –£–¢–ò–õ–ò–¢–´ –î–õ–Ø –†–ê–ë–û–¢–´ –° ASYNC ===

class AsyncUtils:
    """–£—Ç–∏–ª–∏—Ç—ã –¥–ª—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–π —Ä–∞–±–æ—Ç—ã"""
    
    @staticmethod
    async def safe_execute(coro, timeout: int = 30, default=None):
        """–ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–æ—Ä—É—Ç–∏–Ω—ã —Å —Ç–∞–π–º–∞—É—Ç–æ–º"""
        try:
            return await asyncio.wait_for(coro, timeout=timeout)
        except asyncio.TimeoutError:
            logging.getLogger(__name__).warning(f"–¢–∞–π–º–∞—É—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ—Ä—É—Ç–∏–Ω—ã: {timeout}s")
            return default
        except Exception as e:
            logging.getLogger(__name__).error(f"–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ—Ä—É—Ç–∏–Ω—ã: {e}")
            return default
    
    @staticmethod
    async def gather_with_errors(*coros, return_exceptions=True):
        """–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –∫–æ—Ä—É—Ç–∏–Ω —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫"""
        try:
            results = await asyncio.gather(*coros, return_exceptions=return_exceptions)
            
            # –õ–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏
            for i, result in enumerate(results):
                if isinstance(result, Exception):
                    logging.getLogger(__name__).error(f"–û—à–∏–±–∫–∞ –≤ –∫–æ—Ä—É—Ç–∏–Ω–µ {i}: {result}")
            
            return results
        except Exception as e:
            logging.getLogger(__name__).error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ gather: {e}")
            return [e] * len(coros)

# === –£–¢–ò–õ–ò–¢–´ –î–õ–Ø –ü–†–û–ò–ó–í–û–î–ò–¢–ï–õ–¨–ù–û–°–¢–ò ===

class PerformanceUtils:
    """–£—Ç–∏–ª–∏—Ç—ã –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏"""
    
    @staticmethod
    def measure_time(func):
        """–î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –∏–∑–º–µ—Ä–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è"""
        async def async_wrapper(*args, **kwargs):
            start_time = datetime.now()
            try:
                result = await func(*args, **kwargs)
                return result
            finally:
                end_time = datetime.now()
                duration = (end_time - start_time).total_seconds()
                logging.getLogger(__name__).debug(
                    f"‚è±Ô∏è {func.__name__} –≤—ã–ø–æ–ª–Ω–µ–Ω –∑–∞ {duration:.3f}s"
                )
        
        def sync_wrapper(*args, **kwargs):
            start_time = datetime.now()
            try:
                result = func(*args, **kwargs)
                return result
            finally:
                end_time = datetime.now()
                duration = (end_time - start_time).total_seconds()
                logging.getLogger(__name__).debug(
                    f"‚è±Ô∏è {func.__name__} –≤—ã–ø–æ–ª–Ω–µ–Ω –∑–∞ {duration:.3f}s"
                )
        
        return async_wrapper if asyncio.iscoroutinefunction(func) else sync_wrapper

# === –≠–ö–°–ü–û–†–¢ ===

__all__ = [
    'setup_logging',
    'MessageUtils',
    'EncryptionUtils', 
    'ValidationUtils',
    'JSONUtils',
    'AsyncUtils',
    'PerformanceUtils',
    'format_user_info',
    'format_timespan',
    'format_file_size',
    'format_number',
    'is_group_message',
    'extract_chat_info'
]