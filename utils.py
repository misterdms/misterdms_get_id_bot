#!/usr/bin/env python3
"""
Topics Scanner Bot v5.16 - –£—Ç–∏–ª–∏—Ç—ã
–ü—Ä–æ—Å—Ç—ã–µ —É—Ç–∏–ª–∏—Ç—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∫–Ω–æ–ø–∫–∞–º–∏ –∏ —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏
"""

import re
import logging
from typing import List, Dict, Any
from telethon.tl.custom import Button

logger = logging.getLogger(__name__)

def create_inline_buttons(buttons_config: List[List[tuple]]) -> List[List[Button]]:
    """–°–æ–∑–¥–∞–Ω–∏–µ inline –∫–Ω–æ–ø–æ–∫ –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
    try:
        buttons = []
        for row in buttons_config:
            button_row = []
            for text, callback_data in row:
                button_row.append(Button.inline(text, callback_data))
            buttons.append(button_row)
        return buttons
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–Ω–æ–ø–æ–∫: {e}")
        return []

async def send_long_message(event, text: str, buttons=None, parse_mode='markdown', max_length=4000):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ –¥–ª–∏–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è —Å —Ä–∞–∑–±–∏–≤–∫–æ–π"""
    try:
        if len(text) <= max_length:
            await event.reply(text, buttons=buttons, parse_mode=parse_mode)
            return
        
        # –†–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ —á–∞—Å—Ç–∏
        parts = []
        current_part = ""
        lines = text.split('\n')
        
        for line in lines:
            if len(current_part) + len(line) + 1 > max_length:
                if current_part:
                    parts.append(current_part.strip())
                    current_part = line + '\n'
                else:
                    # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ —Ä–∞–∑–±–∏–≤–∞–µ–º –¥–ª–∏–Ω–Ω—É—é —Å—Ç—Ä–æ–∫—É
                    while len(line) > max_length:
                        parts.append(line[:max_length])
                        line = line[max_length:]
                    current_part = line + '\n'
            else:
                current_part += line + '\n'
        
        if current_part.strip():
            parts.append(current_part.strip())
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —á–∞—Å—Ç–∏
        for i, part in enumerate(parts):
            if i == 0:
                await event.reply(part, buttons=buttons, parse_mode=parse_mode)
            else:
                header = f"üìÑ **–ü—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ ({i+1}/{len(parts)}):**\n\n"
                await event.respond(header + part, parse_mode=parse_mode)
        
        logger.debug(f"–î–ª–∏–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Ä–∞–∑–±–∏—Ç–æ –Ω–∞ {len(parts)} —á–∞—Å—Ç–µ–π")
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –¥–ª–∏–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
        try:
            await event.reply(text[:max_length] + "...\n\n‚ùå –û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")
        except:
            await event.reply("‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è")

def format_topics_list(topics: List[Dict[str, Any]]) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Ç–æ–ø–∏–∫–æ–≤"""
    if not topics:
        return "‚ùå **–¢–æ–ø–∏–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã**"
    
    response = f"üìã **–ù–∞–π–¥–µ–Ω–æ —Ç–æ–ø–∏–∫–æ–≤: {len(topics)}**\n\n"
    
    # –¢–∞–±–ª–∏—Ü–∞ —Ç–æ–ø–∏–∫–æ–≤
    response += "| ID | –ù–∞–∑–≤–∞–Ω–∏–µ | –°—Å—ã–ª–∫–∞ |\n"
    response += "|----|---------|---------|\n"
    
    for topic in topics:
        topic_id = topic.get('id', 0)
        title = topic.get('title', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')
        link = topic.get('link', '#')
        
        # –û–±—Ä–µ–∑–∞–µ–º –¥–ª–∏–Ω–Ω—ã–µ –Ω–∞–∑–≤–∞–Ω–∏—è
        if len(title) > 30:
            title = title[:27] + "..."
        
        response += f"| {topic_id} | {title} | [—Å—Å—ã–ª–∫–∞]({link}) |\n"
    
    response += "\nüîó **–ü—Ä—è–º—ã–µ —Å—Å—ã–ª–∫–∏:**\n"
    for topic in topics:
        title = topic.get('title', '–¢–æ–ø–∏–∫')
        link = topic.get('link', '#')
        response += f"‚Ä¢ [{title}]({link})\n"
    
    return response

def validate_api_credentials(text: str) -> tuple:
    """–í–∞–ª–∏–¥–∞—Ü–∏—è API credentials –∏–∑ —Ç–µ–∫—Å—Ç–∞"""
    try:
        lines = text.strip().split('\n')
        if len(lines) != 2:
            return None, None, "–û—Ç–ø—Ä–∞–≤—å API_ID –∏ API_HASH –≤ –¥–≤—É—Ö —Å—Ç—Ä–æ–∫–∞—Ö"
        
        api_id = lines[0].strip()
        api_hash = lines[1].strip()
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ API_ID (–¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º 7-8 —Ü–∏—Ñ—Ä)
        if not api_id.isdigit() or len(api_id) < 7 or len(api_id) > 8:
            return None, None, "API_ID –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å 7-8 —Ü–∏—Ñ—Ä"
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ API_HASH (–¥–æ–ª–∂–µ–Ω –±—ã—Ç—å 32 —Å–∏–º–≤–æ–ª–∞ hex)
        if len(api_hash) != 32 or not re.match(r'^[a-f0-9]{32}$', api_hash.lower()):
            return None, None, "API_HASH –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å 32 —Å–∏–º–≤–æ–ª–∞ (hex)"
        
        return api_id, api_hash, "OK"
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ credentials: {e}")
        return None, None, f"–û—à–∏–±–∫–∞: {str(e)}"

def escape_markdown(text: str) -> str:
    """–≠–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏–º–≤–æ–ª–æ–≤ markdown"""
    if not text:
        return ""
    
    special_chars = ['*', '_', '[', ']', '(', ')', '~', '`', '>', '#', '+', '-', '=', '|', '{', '}', '.', '!']
    
    escaped_text = str(text)
    for char in special_chars:
        escaped_text = escaped_text.replace(char, f'\\{char}')
    
    return escaped_text

def get_user_mention(user) -> str:
    """–ü–æ–ª—É—á–∏—Ç—å —É–ø–æ–º–∏–Ω–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    try:
        if hasattr(user, 'username') and user.username:
            return f"@{user.username}"
        elif hasattr(user, 'first_name') and user.first_name:
            user_id = getattr(user, 'id', 0)
            first_name = user.first_name[:20]
            return f"[{first_name}](tg://user?id={user_id})"
        else:
            return "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"
    except Exception:
        return "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"

def is_private_chat(event) -> bool:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —á–∞—Ç –ø—Ä–∏–≤–∞—Ç–Ω—ã–º"""
    try:
        return event.is_private
    except:
        return False

def is_group_chat(event) -> bool:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —á–∞—Ç –≥—Ä—É–ø–ø–æ–π"""
    try:
        return event.is_group or event.is_channel
    except:
        return False

async def safe_delete_message(message, delay: int = 0):
    """–ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è"""
    try:
        if delay > 0:
            import asyncio
            await asyncio.sleep(delay)
        await message.delete()
    except Exception as e:
        logger.debug(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ: {e}")

def truncate_text(text: str, max_length: int = 50) -> str:
    """–û–±—Ä–µ–∑–∫–∞ —Ç–µ–∫—Å—Ç–∞ —Å –º–Ω–æ–≥–æ—Ç–æ—á–∏–µ–º"""
    if not text:
        return ""
    
    text = str(text)
    if len(text) <= max_length:
        return text
    
    return text[:max_length-3] + "..."

def clean_username(username: str) -> str:
    """–û—á–∏—Å—Ç–∫–∞ username"""
    if not username:
        return ""
    
    username = str(username).strip()
    if username.startswith('@'):
        username = username[1:]
    
    return username

def format_error_message(error: str) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ"""
    try:
        # –£–±–∏—Ä–∞–µ–º —Ç–µ—Ö–Ω–∏—á–µ—Å–∫—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
        error = str(error)
        if "Telethon" in error:
            error = "–û—à–∏–±–∫–∞ Telegram API"
        elif "sqlite" in error.lower():
            error = "–û—à–∏–±–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"
        elif "connection" in error.lower():
            error = "–û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è"
        
        return f"‚ùå {error}"
    except:
        return "‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞"
