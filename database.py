#!/usr/bin/env python3
"""
–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –≥–∏–±—Ä–∏–¥–Ω–æ–≥–æ Topics Scanner Bot
–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç SQLite –∏ PostgreSQL —Å –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–º–∏ –æ–ø–µ—Ä–∞—Ü–∏—è–º–∏
–ò–°–ü–†–ê–í–õ–ï–ù–û: PostgreSQL –∑–∞–ø—Ä–æ—Å—ã, –∏–º–ø–æ—Ä—Ç—ã, –≤–∞–ª–∏–¥–∞—Ü–∏—è, fallback –Ω–∞ SQLite
"""

import aiosqlite
import asyncio
import logging
from datetime import datetime, timedelta
from typing import Optional, List, Dict, Any
from contextlib import asynccontextmanager
import json
import urllib.parse as urlparse

# –ë–µ–∑–æ–ø–∞—Å–Ω—ã–µ –∏–º–ø–æ—Ä—Ç—ã
try:
    from config import DATABASE_URL, SESSION_TIMEOUT_DAYS, USER_STATUSES, TASK_STATUSES, BOT_PREFIX
except ImportError:
    # Fallback –∑–Ω–∞—á–µ–Ω–∏—è –µ—Å–ª–∏ config –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω
    DATABASE_URL = 'sqlite:///bot_data.db'
    SESSION_TIMEOUT_DAYS = 7
    USER_STATUSES = ['active', 'expired', 'error', 'blocked', 'pending']
    TASK_STATUSES = ['pending', 'processing', 'completed', 'failed', 'cancelled']
    BOT_PREFIX = 'get_id_bot'

logger = logging.getLogger(__name__)

class DatabaseManager:
    """–ú–µ–Ω–µ–¥–∂–µ—Ä –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π SQLite –∏ PostgreSQL + –ø—Ä–µ—Ñ–∏–∫—Å—ã —Ç–∞–±–ª–∏—Ü"""
    
    def __init__(self, database_url: str = DATABASE_URL, bot_prefix: str = BOT_PREFIX):
        # –í–∞–ª–∏–¥–∞—Ü–∏—è DATABASE_URL —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–æ–π
        if (not database_url or 
            'user:password@host' in database_url or 
            'presave_user:password@localhost' in database_url or
            database_url == 'postgresql://user:password@host:5432/dbname' or
            'example.com' in database_url):
            logger.warning("‚ö†Ô∏è –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π DATABASE_URL, –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –Ω–∞ SQLite")
            database_url = 'sqlite:///bot_data.db'
        
        self.database_url = database_url
        self.bot_prefix = bot_prefix.lower()
        self.db_type = 'sqlite' if database_url.startswith('sqlite') else 'postgresql'
        
        # –ò–º–µ–Ω–∞ —Ç–∞–±–ª–∏—Ü —Å –ø—Ä–µ—Ñ–∏–∫—Å–∞–º–∏
        self.tables = {
            'users': f"{self.bot_prefix}_users",
            'activity_data': f"{self.bot_prefix}_activity_data", 
            'request_queue': f"{self.bot_prefix}_request_queue",
            'bot_settings': f"{self.bot_prefix}_bot_settings",
            'bot_logs': f"{self.bot_prefix}_bot_logs"
        }
        
        logger.info(f"üóÑÔ∏è DatabaseManager –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω: {self.db_type} —Å –ø—Ä–µ—Ñ–∏–∫—Å–æ–º {self.bot_prefix}")
        
    async def initialize(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –∏ —Å–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü"""
        logger.info(f"üóÑÔ∏è –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {self.db_type} (–ø—Ä–µ—Ñ–∏–∫—Å: {self.bot_prefix})")
        
        try:
            await self.create_tables()
            await self.create_indexes()
            await self.migrate_existing_data()
            logger.info("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞ —Å –ø—Ä–µ—Ñ–∏–∫—Å–∞–º–∏")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ë–î: {e}")
            
            # –ê–≤—Ç–æ—Ñ–æ–ª–ª–±—ç–∫ –Ω–∞ SQLite –ø—Ä–∏ –ø—Ä–æ–±–ª–µ–º–∞—Ö —Å PostgreSQL
            if self.db_type == 'postgresql':
                logger.warning("üîÑ –ê–≤—Ç–æ—Ñ–æ–ª–ª–±—ç–∫ –Ω–∞ SQLite –∏–∑-–∑–∞ –ø—Ä–æ–±–ª–µ–º —Å PostgreSQL")
                self.database_url = 'sqlite:///bot_data.db'
                self.db_type = 'sqlite'
                
                try:
                    await self.create_tables()
                    await self.create_indexes()
                    logger.info("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞ –Ω–∞ SQLite (fallback)")
                    return
                except Exception as sqlite_error:
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ SQLite fallback: {sqlite_error}")
            
            raise
    
    @asynccontextmanager
    async def get_connection(self):
        """–ö–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å –ë–î"""
        if self.db_type == 'sqlite':
            db_path = self.database_url.replace('sqlite:///', '')
            async with aiosqlite.connect(db_path) as conn:
                conn.row_factory = aiosqlite.Row
                yield conn
        else:
            # PostgreSQL –ø–æ–¥–¥–µ—Ä–∂–∫–∞
            try:
                import asyncpg
            except ImportError:
                logger.error("‚ùå asyncpg –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω! –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ: pip install asyncpg")
                raise
            
            # –ü–∞—Ä—Å–∏–º DATABASE_URL
            url = urlparse.urlparse(self.database_url)
            
            conn = None
            try:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å URL
                if not url.hostname or url.hostname in ['host', 'localhost', 'example.com']:
                    raise ValueError(f"Invalid DATABASE_URL hostname: {url.hostname}")

                conn = await asyncpg.connect(
                    host=url.hostname,
                    port=url.port or 5432,
                    user=url.username,
                    password=url.password,
                    database=url.path[1:] if url.path else 'postgres',
                    timeout=10
                )
                yield conn
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ PostgreSQL: {e}")
                if 'No address associated with hostname' in str(e):
                    logger.error("üîß –ü—Ä–æ–≤–µ—Ä—å—Ç–µ DATABASE_URL –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")
                    logger.error("üí° –ù–∞ Render.com –ø–æ–ª—É—á–∏—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π URL –∏–∑ PostgreSQL addon misterdms-bots-db")
                raise
            finally:
                if conn:
                    await conn.close()
    
    async def create_tables(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –≤—Å–µ—Ö –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö —Ç–∞–±–ª–∏—Ü —Å –ø—Ä–µ—Ñ–∏–∫—Å–∞–º–∏"""
        async with self.get_connection() as conn:
            if self.db_type == 'sqlite':
                await self._create_sqlite_tables(conn)
            else:
                await self._create_postgresql_tables(conn)
    
    async def _create_sqlite_tables(self, conn):
        """–°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü –¥–ª—è SQLite —Å –ø—Ä–µ—Ñ–∏–∫—Å–∞–º–∏"""
        # –¢–∞–±–ª–∏—Ü–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        await conn.execute(f"""
            CREATE TABLE IF NOT EXISTS {self.tables['users']} (
                user_id INTEGER PRIMARY KEY,
                telegram_username TEXT,
                first_name TEXT,
                mode TEXT DEFAULT 'bot',
                api_id_encrypted TEXT,
                api_hash_encrypted TEXT,
                session_file TEXT,
                created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                last_active TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                status TEXT DEFAULT 'active'
            )
        """)
        
        # –¢–∞–±–ª–∏—Ü–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        await conn.execute(f"""
            CREATE TABLE IF NOT EXISTS {self.tables['activity_data']} (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                chat_id INTEGER NOT NULL,
                user_id INTEGER NOT NULL,
                username TEXT,
                first_name TEXT,
                message_count INTEGER DEFAULT 1,
                last_activity TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                date_tracked DATE DEFAULT CURRENT_DATE
            )
        """)
        
        # –¢–∞–±–ª–∏—Ü–∞ –æ—á–µ—Ä–µ–¥–∏ –∑–∞–ø—Ä–æ—Å–æ–≤
        await conn.execute(f"""
            CREATE TABLE IF NOT EXISTS {self.tables['request_queue']} (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                user_id INTEGER NOT NULL,
                chat_id INTEGER,
                command TEXT NOT NULL,
                parameters TEXT,
                priority INTEGER DEFAULT 2,
                status TEXT DEFAULT 'pending',
                created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                started_at TIMESTAMP,
                completed_at TIMESTAMP,
                result TEXT,
                error_message TEXT
            )
        """)
        
        # –¢–∞–±–ª–∏—Ü–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –±–æ—Ç–∞
        await conn.execute(f"""
            CREATE TABLE IF NOT EXISTS {self.tables['bot_settings']} (
                key TEXT PRIMARY KEY,
                value TEXT,
                updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
            )
        """)
        
        # –¢–∞–±–ª–∏—Ü–∞ –ª–æ–≥–æ–≤
        await conn.execute(f"""
            CREATE TABLE IF NOT EXISTS {self.tables['bot_logs']} (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                level TEXT NOT NULL,
                message TEXT NOT NULL,
                user_id INTEGER,
                chat_id INTEGER,
                command TEXT,
                timestamp TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                metadata TEXT
            )
        """)
        
        await conn.commit()
    
    async def _create_postgresql_tables(self, conn):
        """–°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü –¥–ª—è PostgreSQL —Å –ø—Ä–µ—Ñ–∏–∫—Å–∞–º–∏"""
        # –¢–∞–±–ª–∏—Ü–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        await conn.execute(f"""
            CREATE TABLE IF NOT EXISTS {self.tables['users']} (
                user_id BIGINT PRIMARY KEY,
                telegram_username TEXT,
                first_name TEXT,
                mode TEXT DEFAULT 'bot',
                api_id_encrypted TEXT,
                api_hash_encrypted TEXT,
                session_file TEXT,
                created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                last_active TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                status TEXT DEFAULT 'active'
            )
        """)
        
        # –¢–∞–±–ª–∏—Ü–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        await conn.execute(f"""
            CREATE TABLE IF NOT EXISTS {self.tables['activity_data']} (
                id SERIAL PRIMARY KEY,
                chat_id BIGINT NOT NULL,
                user_id BIGINT NOT NULL,
                username TEXT,
                first_name TEXT,
                message_count INTEGER DEFAULT 1,
                last_activity TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                date_tracked DATE DEFAULT CURRENT_DATE
            )
        """)
        
        # –¢–∞–±–ª–∏—Ü–∞ –æ—á–µ—Ä–µ–¥–∏ –∑–∞–ø—Ä–æ—Å–æ–≤
        await conn.execute(f"""
            CREATE TABLE IF NOT EXISTS {self.tables['request_queue']} (
                id SERIAL PRIMARY KEY,
                user_id BIGINT NOT NULL,
                chat_id BIGINT,
                command TEXT NOT NULL,
                parameters TEXT,
                priority INTEGER DEFAULT 2,
                status TEXT DEFAULT 'pending',
                created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                started_at TIMESTAMP,
                completed_at TIMESTAMP,
                result TEXT,
                error_message TEXT
            )
        """)
        
        # –¢–∞–±–ª–∏—Ü–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –±–æ—Ç–∞
        await conn.execute(f"""
            CREATE TABLE IF NOT EXISTS {self.tables['bot_settings']} (
                key TEXT PRIMARY KEY,
                value TEXT,
                updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
            )
        """)
        
        # –¢–∞–±–ª–∏—Ü–∞ –ª–æ–≥–æ–≤
        await conn.execute(f"""
            CREATE TABLE IF NOT EXISTS {self.tables['bot_logs']} (
                id SERIAL PRIMARY KEY,
                level TEXT NOT NULL,
                message TEXT NOT NULL,
                user_id BIGINT,
                chat_id BIGINT,
                command TEXT,
                timestamp TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                metadata TEXT
            )
        """)
    
    async def create_indexes(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω–¥–µ–∫—Å–æ–≤ –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –∑–∞–ø—Ä–æ—Å–æ–≤ —Å –ø—Ä–µ—Ñ–∏–∫—Å–∞–º–∏"""
        async with self.get_connection() as conn:
            indexes = [
                f"CREATE INDEX IF NOT EXISTS idx_{self.bot_prefix}_users_mode ON {self.tables['users']}(mode)",
                f"CREATE INDEX IF NOT EXISTS idx_{self.bot_prefix}_users_status ON {self.tables['users']}(status)",
                f"CREATE INDEX IF NOT EXISTS idx_{self.bot_prefix}_users_last_active ON {self.tables['users']}(last_active)",
                f"CREATE INDEX IF NOT EXISTS idx_{self.bot_prefix}_activity_chat_id ON {self.tables['activity_data']}(chat_id)",
                f"CREATE INDEX IF NOT EXISTS idx_{self.bot_prefix}_activity_date ON {self.tables['activity_data']}(date_tracked)",
                f"CREATE INDEX IF NOT EXISTS idx_{self.bot_prefix}_queue_status ON {self.tables['request_queue']}(status)",
                f"CREATE INDEX IF NOT EXISTS idx_{self.bot_prefix}_queue_priority ON {self.tables['request_queue']}(priority)",
                f"CREATE INDEX IF NOT EXISTS idx_{self.bot_prefix}_queue_user ON {self.tables['request_queue']}(user_id)",
                f"CREATE INDEX IF NOT EXISTS idx_{self.bot_prefix}_logs_timestamp ON {self.tables['bot_logs']}(timestamp)",
                f"CREATE INDEX IF NOT EXISTS idx_{self.bot_prefix}_logs_user ON {self.tables['bot_logs']}(user_id)"
            ]
            
            for index_sql in indexes:
                try:
                    if self.db_type == 'sqlite':
                        await conn.execute(index_sql)
                    else:
                        await conn.execute(index_sql)
                except Exception as e:
                    logger.debug(f"–ò–Ω–¥–µ–∫—Å —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: {e}")
            
            if self.db_type == 'sqlite':
                await conn.commit()
    
    async def migrate_existing_data(self):
        """–ú–∏–≥—Ä–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –∏–∑ —Ç–∞–±–ª–∏—Ü –±–µ–∑ –ø—Ä–µ—Ñ–∏–∫—Å–æ–≤ (–µ—Å–ª–∏ –æ–Ω–∏ —Å—É—â–µ—Å—Ç–≤—É—é—Ç)"""
        try:
            async with self.get_connection() as conn:
                old_tables = ['users', 'activity_data', 'request_queue', 'bot_settings', 'bot_logs']
                
                for old_table in old_tables:
                    new_table = self.tables[old_table]
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Å—Ç–∞—Ä–æ–π —Ç–∞–±–ª–∏—Ü—ã
                    if self.db_type == 'sqlite':
                        check_query = f"SELECT name FROM sqlite_master WHERE type='table' AND name='{old_table}'"
                        cursor = await conn.execute(check_query)
                        exists = await cursor.fetchone()
                    else:
                        check_query = f"SELECT EXISTS (SELECT FROM information_schema.tables WHERE table_name = $1)"
                        exists = await conn.fetchval(check_query, old_table)
                    
                    if exists:
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –¥–∞–Ω–Ω—ã–µ –≤ —Å—Ç–∞—Ä–æ–π —Ç–∞–±–ª–∏—Ü–µ
                        count_query = f"SELECT COUNT(*) FROM {old_table}"
                        if self.db_type == 'sqlite':
                            cursor = await conn.execute(count_query)
                            count = (await cursor.fetchone())[0]
                        else:
                            count = await conn.fetchval(count_query)
                        
                        if count > 0:
                            logger.info(f"üîÑ –ú–∏–≥—Ä–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö: {old_table} ‚Üí {new_table} ({count} –∑–∞–ø–∏—Å–µ–π)")
                            
                            # –ö–æ–ø–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ
                            copy_query = f"INSERT INTO {new_table} SELECT * FROM {old_table}"
                            
                            if self.db_type == 'sqlite':
                                await conn.execute(copy_query)
                                await conn.commit()
                            else:
                                await conn.execute(copy_query)
                            
                            # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—É—é —Ç–∞–±–ª–∏—Ü—É
                            drop_query = f"DROP TABLE {old_table}"
                            if self.db_type == 'sqlite':
                                await conn.execute(drop_query)
                                await conn.commit()
                            else:
                                await conn.execute(drop_query)
                            
                            logger.info(f"‚úÖ –ú–∏–≥—Ä–∞—Ü–∏—è {old_table} –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
                
        except Exception as e:
            logger.debug(f"–ú–∏–≥—Ä–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö: {e} (–Ω–æ—Ä–º–∞–ª—å–Ω–æ, –µ—Å–ª–∏ —Ç–∞–±–ª–∏—Ü –±–µ–∑ –ø—Ä–µ—Ñ–∏–∫—Å–∞ –Ω–µ—Ç)")
    
    # === –£–ù–ò–í–ï–†–°–ê–õ–¨–ù–´–ï –ú–ï–¢–û–î–´ –î–õ–Ø –û–ë–ï–ò–• –ë–î ===
    
    async def _execute_query(self, query: str, params: tuple = None, fetch_one: bool = False, fetch_all: bool = False):
        """–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –º–µ—Ç–æ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–æ–≤ - –ò–°–ü–†–ê–í–õ–ï–ù"""
        async with self.get_connection() as conn:
            if self.db_type == 'sqlite':
                cursor = await conn.execute(query, params or ())
                
                if fetch_one:
                    result = await cursor.fetchone()
                    return dict(result) if result else None
                elif fetch_all:
                    rows = await cursor.fetchall()
                    return [dict(row) for row in rows]
                else:
                    await conn.commit()
                    return cursor.rowcount
            else:
                # PostgreSQL - –ò–°–ü–†–ê–í–õ–ï–ù–´ –ü–ê–†–ê–ú–ï–¢–†–´
                if fetch_one:
                    result = await conn.fetchrow(query, *(params or ()))
                    return dict(result) if result else None
                elif fetch_all:
                    rows = await conn.fetch(query, *(params or ()))
                    return [dict(row) for row in rows]
                else:
                    result = await conn.execute(query, *(params or ()))
                    # –ò–∑–≤–ª–µ–∫–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞—Ç—Ä–æ–Ω—É—Ç—ã—Ö —Å—Ç—Ä–æ–∫
                    if hasattr(result, 'split'):
                        # –î–ª—è INSERT/UPDATE/DELETE —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤—ã–≥–ª—è–¥–∏—Ç –∫–∞–∫ "INSERT 0 1"
                        parts = result.split()
                        return int(parts[-1]) if parts else 1
                    return 1
    
    # === –£–ü–†–ê–í–õ–ï–ù–ò–ï –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø–ú–ò ===
    
    async def get_user(self, user_id: int) -> Optional[Dict[str, Any]]:
        """–ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ"""
        if self.db_type == 'postgresql':
            query = f"SELECT * FROM {self.tables['users']} WHERE user_id = $1"
        else:
            query = f"SELECT * FROM {self.tables['users']} WHERE user_id = ?"
        
        return await self._execute_query(query, (user_id,), fetch_one=True)
    
    async def create_or_update_user(self, user_id: int, telegram_username: str = None, 
                                  first_name: str = None, mode: str = 'bot') -> bool:
        """–°–æ–∑–¥–∞—Ç—å –∏–ª–∏ –æ–±–Ω–æ–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        if self.db_type == 'postgresql':
            query = f"""
                INSERT INTO {self.tables['users']} (user_id, telegram_username, first_name, mode, last_active)
                VALUES ($1, $2, $3, $4, $5)
                ON CONFLICT (user_id) DO UPDATE SET
                    telegram_username = EXCLUDED.telegram_username,
                    first_name = EXCLUDED.first_name,
                    mode = EXCLUDED.mode,
                    last_active = EXCLUDED.last_active
            """
        else:
            query = f"""
                INSERT OR REPLACE INTO {self.tables['users']} 
                (user_id, telegram_username, first_name, mode, last_active)
                VALUES (?, ?, ?, ?, ?)
            """
        
        await self._execute_query(query, (user_id, telegram_username, first_name, mode, datetime.now()))
        return True
    
    async def save_user_credentials(self, user_id: int, api_id_encrypted: str, 
                                  api_hash_encrypted: str, session_file: str) -> bool:
        """–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω—ã–µ credentials –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        if self.db_type == 'postgresql':
            query = f"""
                UPDATE {self.tables['users']} SET 
                    api_id_encrypted = $1,
                    api_hash_encrypted = $2,
                    session_file = $3,
                    mode = 'user',
                    status = 'active',
                    last_active = $4
                WHERE user_id = $5
            """
        else:
            query = f"""
                UPDATE {self.tables['users']} SET 
                    api_id_encrypted = ?,
                    api_hash_encrypted = ?,
                    session_file = ?,
                    mode = 'user',
                    status = 'active',
                    last_active = ?
                WHERE user_id = ?
            """
        
        await self._execute_query(query, (api_id_encrypted, api_hash_encrypted, session_file, datetime.now(), user_id))
        return True
    
    async def update_user_status(self, user_id: int, status: str) -> bool:
        """–û–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        if status not in USER_STATUSES:
            raise ValueError(f"–ù–µ–≤–µ—Ä–Ω—ã–π —Å—Ç–∞—Ç—É—Å: {status}")
        
        if self.db_type == 'postgresql':
            query = f"""
                UPDATE {self.tables['users']} SET status = $1, last_active = $2
                WHERE user_id = $3
            """
        else:
            query = f"""
                UPDATE {self.tables['users']} SET status = ?, last_active = ?
                WHERE user_id = ?
            """
        
        await self._execute_query(query, (status, datetime.now(), user_id))
        return True
    
    async def get_users_by_mode(self, mode: str) -> List[Dict[str, Any]]:
        """–ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ —Ä–µ–∂–∏–º—É"""
        if self.db_type == 'postgresql':
            query = f"""
                SELECT * FROM {self.tables['users']} WHERE mode = $1 AND status = 'active'
            """
        else:
            query = f"""
                SELECT * FROM {self.tables['users']} WHERE mode = ? AND status = 'active'
            """
        
        return await self._execute_query(query, (mode,), fetch_all=True)
    
    async def cleanup_expired_users(self) -> int:
        """–û—á–∏—Å—Ç–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –∏—Å—Ç–µ–∫—à–∏–º–∏ —Å–µ—Å—Å–∏—è–º–∏"""
        expiry_date = datetime.now() - timedelta(days=SESSION_TIMEOUT_DAYS)
        
        if self.db_type == 'postgresql':
            query = f"""
                UPDATE {self.tables['users']} SET status = 'expired'
                WHERE last_active < $1 AND status = 'active' AND mode = 'user'
            """
        else:
            query = f"""
                UPDATE {self.tables['users']} SET status = 'expired'
                WHERE last_active < ? AND status = 'active' AND mode = 'user'
            """
        
        return await self._execute_query(query, (expiry_date,))
    
    # === –ê–ö–¢–ò–í–ù–û–°–¢–¨ –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ï–ô ===
    
    async def add_user_activity(self, chat_id: int, user_id: int, username: str = None, 
                               first_name: str = None) -> bool:
        """–î–æ–±–∞–≤–∏—Ç—å –∏–ª–∏ –æ–±–Ω–æ–≤–∏—Ç—å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        today = datetime.now().date()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∑–∞–ø–∏—Å—å –∑–∞ —Å–µ–≥–æ–¥–Ω—è
        if self.db_type == 'postgresql':
            check_query = f"""
                SELECT id, message_count FROM {self.tables['activity_data']} 
                WHERE chat_id = $1 AND user_id = $2 AND date_tracked = $3
            """
        else:
            check_query = f"""
                SELECT id, message_count FROM {self.tables['activity_data']} 
                WHERE chat_id = ? AND user_id = ? AND date_tracked = ?
            """
        
        existing = await self._execute_query(check_query, (chat_id, user_id, today), fetch_one=True)
        
        if existing:
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –∑–∞–ø–∏—Å—å
            if self.db_type == 'postgresql':
                update_query = f"""
                    UPDATE {self.tables['activity_data']} SET 
                        message_count = message_count + 1,
                        last_activity = $1,
                        username = COALESCE($2, username),
                        first_name = COALESCE($3, first_name)
                    WHERE id = $4
                """
            else:
                update_query = f"""
                    UPDATE {self.tables['activity_data']} SET 
                        message_count = message_count + 1,
                        last_activity = ?,
                        username = COALESCE(?, username),
                        first_name = COALESCE(?, first_name)
                    WHERE id = ?
                """
            
            await self._execute_query(update_query, (datetime.now(), username, first_name, existing['id']))
        else:
            # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å
            if self.db_type == 'postgresql':
                insert_query = f"""
                    INSERT INTO {self.tables['activity_data']} 
                    (chat_id, user_id, username, first_name, date_tracked, last_activity)
                    VALUES ($1, $2, $3, $4, $5, $6)
                """
            else:
                insert_query = f"""
                    INSERT INTO {self.tables['activity_data']} 
                    (chat_id, user_id, username, first_name, date_tracked, last_activity)
                    VALUES (?, ?, ?, ?, ?, ?)
                """
            
            await self._execute_query(insert_query, (chat_id, user_id, username, first_name, today, datetime.now()))
        
        return True
    
    async def get_active_users(self, chat_id: int, date: datetime.date = None) -> List[Dict[str, Any]]:
        """–ü–æ–ª—É—á–∏—Ç—å –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∑–∞ –¥–µ–Ω—å"""
        if date is None:
            date = datetime.now().date()
        
        if self.db_type == 'postgresql':
            query = f"""
                SELECT * FROM {self.tables['activity_data']} 
                WHERE chat_id = $1 AND date_tracked = $2
                ORDER BY message_count DESC, last_activity DESC
            """
        else:
            query = f"""
                SELECT * FROM {self.tables['activity_data']} 
                WHERE chat_id = ? AND date_tracked = ?
                ORDER BY message_count DESC, last_activity DESC
            """
        
        return await self._execute_query(query, (chat_id, date), fetch_all=True)
    
    async def get_activity_stats(self, chat_id: int, date: datetime.date = None) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏"""
        if date is None:
            date = datetime.now().date()
        
        if self.db_type == 'postgresql':
            query = f"""
                SELECT 
                    COUNT(*) as total_users,
                    SUM(message_count) as total_messages,
                    MAX(message_count) as max_messages,
                    AVG(message_count) as avg_messages
                FROM {self.tables['activity_data']} 
                WHERE chat_id = $1 AND date_tracked = $2
            """
        else:
            query = f"""
                SELECT 
                    COUNT(*) as total_users,
                    SUM(message_count) as total_messages,
                    MAX(message_count) as max_messages,
                    AVG(message_count) as avg_messages
                FROM {self.tables['activity_data']} 
                WHERE chat_id = ? AND date_tracked = ?
            """
        
        result = await self._execute_query(query, (chat_id, date), fetch_one=True)
        
        if result and result['total_users'] > 0:
            return {
                'total_users': result['total_users'],
                'total_messages': result['total_messages'] or 0,
                'max_messages': result['max_messages'] or 0,
                'avg_messages': round(float(result['avg_messages']) if result['avg_messages'] else 0, 1),
                'date': date.strftime('%d.%m.%Y')
            }
        else:
            return {
                'total_users': 0,
                'total_messages': 0,
                'max_messages': 0,
                'avg_messages': 0,
                'date': date.strftime('%d.%m.%Y')
            }
    
    # === –ó–ê–î–ê–ß–ò –í –û–ß–ï–†–ï–î–ò ===
    
    async def add_task(self, user_id: int, command: str, chat_id: int = None, 
                      parameters: str = None, priority: int = 2) -> int:
        """–î–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É –≤ –æ—á–µ—Ä–µ–¥—å"""
        if self.db_type == 'postgresql':
            query = f"""
                INSERT INTO {self.tables['request_queue']} 
                (user_id, chat_id, command, parameters, priority, status, created_at)
                VALUES ($1, $2, $3, $4, $5, 'pending', $6)
                RETURNING id
            """
        else:
            query = f"""
                INSERT INTO {self.tables['request_queue']} 
                (user_id, chat_id, command, parameters, priority, status, created_at)
                VALUES (?, ?, ?, ?, ?, 'pending', ?)
            """
        
        if self.db_type == 'postgresql':
            result = await self._execute_query(query, (user_id, chat_id, command, parameters, priority, datetime.now()), fetch_one=True)
            return result['id'] if result else 0
        else:
            await self._execute_query(query, (user_id, chat_id, command, parameters, priority, datetime.now()))
            # –î–ª—è SQLite –ø–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π ID
            cursor_query = "SELECT last_insert_rowid()"
            result = await self._execute_query(cursor_query, fetch_one=True)
            return result['last_insert_rowid()'] if result else 0
    
    async def complete_task(self, task_id: int, result: str = None, error: str = None) -> bool:
        """–ó–∞–≤–µ—Ä—à–∏—Ç—å –∑–∞–¥–∞—á—É"""
        if self.db_type == 'postgresql':
            query = f"""
                UPDATE {self.tables['request_queue']} SET 
                    status = 'completed',
                    completed_at = $1,
                    result = $2,
                    error_message = $3
                WHERE id = $4
            """
        else:
            query = f"""
                UPDATE {self.tables['request_queue']} SET 
                    status = 'completed',
                    completed_at = ?,
                    result = ?,
                    error_message = ?
                WHERE id = ?
            """
        
        await self._execute_query(query, (datetime.now(), result, error, task_id))
        return True
    
    async def get_database_stats(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
        stats = {}
        
        # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π –≤ —Ç–∞–±–ª–∏—Ü–∞—Ö
        for table_key, table_name in self.tables.items():
            query = f"SELECT COUNT(*) as count FROM {table_name}"
            try:
                result = await self._execute_query(query, fetch_one=True)
                stats[f'{table_key}_count'] = result['count'] if result else 0
            except Exception as e:
                logger.debug(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –¥–ª—è {table_name}: {e}")
                stats[f'{table_key}_count'] = 0
        
        # –ê–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏
        active_query = f"""
            SELECT COUNT(*) as count FROM {self.tables['users']} WHERE status = 'active'
        """
        try:
            result = await self._execute_query(active_query, fetch_one=True)
            stats['active_users'] = result['count'] if result else 0
        except:
            stats['active_users'] = 0
        
        # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –≤ user mode
        user_mode_query = f"""
            SELECT COUNT(*) as count FROM {self.tables['users']} WHERE mode = 'user' AND status = 'active'
        """
        try:
            result = await self._execute_query(user_mode_query, fetch_one=True)
            stats['user_mode_users'] = result['count'] if result else 0
        except:
            stats['user_mode_users'] = 0
        
        return stats
    
    async def health_check(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
        try:
            if self.db_type == 'postgresql':
                await self._execute_query("SELECT 1", fetch_one=True)
            else:
                await self._execute_query("SELECT 1", fetch_one=True)
            return True
        except Exception as e:
            logger.error(f"‚ùå Health check –ë–î –Ω–µ—É–¥–∞—á–µ–Ω: {e}")
            return False

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –ë–î
db_manager = DatabaseManager()

# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞
async def init_database():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
    await db_manager.initialize()

async def get_db():
    """–ü–æ–ª—É—á–∏—Ç—å –º–µ–Ω–µ–¥–∂–µ—Ä –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
    return db_manager