#!/usr/bin/env python3
"""
–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö –¥–ª—è Topics Scanner Bot
–ü–æ–¥–¥–µ—Ä–∂–∫–∞ PostgreSQL –∏ SQLite —Å –∞–≤—Ç–æ—Ñ–æ–ª–ª–±—ç–∫–æ–º
–ò–°–ü–†–ê–í–õ–ï–ù–û v4.1.2: –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è save_user_credentials –∏ _execute_query —Å –ø–æ–¥—Ä–æ–±–Ω—ã–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º
"""

import os
import logging
import aiosqlite
from contextlib import asynccontextmanager
from datetime import datetime, timedelta
from typing import Dict, List, Optional, Any
from urllib.parse import urlparse

from config import (
    DATABASE_URL, DATABASE_POOL_SIZE, BOT_PREFIX,
    SESSION_TIMEOUT_DAYS
)

logger = logging.getLogger(__name__)

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
USER_MODES = ['bot', 'user']
USER_STATUSES = ['active', 'inactive', 'banned', 'expired']

class DatabaseManager:
    """–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π PostgreSQL –∏ SQLite"""
    
    def __init__(self):
        self.database_url = DATABASE_URL
        self.pool = None
        self.db_type = None
        self.tables = {}
        self._determine_db_type()
        self._setup_table_names()
    
    def _determine_db_type(self):
        """–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–∏–ø–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
        if self.database_url.startswith('postgresql://') or self.database_url.startswith('postgres://'):
            self.db_type = 'postgresql'
        else:
            self.db_type = 'sqlite'
        
        logger.info(f"üóÑÔ∏è DatabaseManager –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω: {self.db_type} —Å –ø—Ä–µ—Ñ–∏–∫—Å–æ–º {BOT_PREFIX}")
    
    def _setup_table_names(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∏–º–µ–Ω —Ç–∞–±–ª–∏—Ü —Å –ø—Ä–µ—Ñ–∏–∫—Å–∞–º–∏"""
        self.tables = {
            'users': f'{BOT_PREFIX}_users',
            'activity_data': f'{BOT_PREFIX}_activity_data',
            'request_queue': f'{BOT_PREFIX}_request_queue'
        }
    
    async def initialize(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
        try:
            logger.info(f"üóÑÔ∏è –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {self.db_type} (–ø—Ä–µ—Ñ–∏–∫—Å: {BOT_PREFIX})")
            
            if self.db_type == 'postgresql':
                await self._init_postgresql()
            else:
                await self._init_sqlite()
            
            await self.create_tables()
            await self.create_indexes()
            await self._migrate_old_data()
            
            logger.info("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞ —Å –ø—Ä–µ—Ñ–∏–∫—Å–∞–º–∏")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {e}")
            
            # –ê–≤—Ç–æ—Ñ–æ–ª–ª–±—ç–∫ –Ω–∞ SQLite –ø—Ä–∏ –ø—Ä–æ–±–ª–µ–º–∞—Ö —Å PostgreSQL
            if self.db_type == 'postgresql':
                logger.warning("üîÑ –ê–≤—Ç–æ—Ñ–æ–ª–ª–±—ç–∫ –Ω–∞ SQLite –∏–∑-–∑–∞ –ø—Ä–æ–±–ª–µ–º —Å PostgreSQL")
                self.database_url = 'sqlite:///bot_data.db'
                self.db_type = 'sqlite'
                
                try:
                    await self.create_tables()
                    await self.create_indexes()
                    logger.info("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞ –Ω–∞ SQLite (fallback)")
                    return
                except Exception as sqlite_error:
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ SQLite fallback: {sqlite_error}")
            
            raise
    
    async def _init_postgresql(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è PostgreSQL"""
        try:
            import asyncpg
            
            # –°–æ–∑–¥–∞–µ–º –ø—É–ª —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π
            self.pool = await asyncpg.create_pool(
                self.database_url,
                min_size=1,
                max_size=DATABASE_POOL_SIZE,
                command_timeout=30
            )
            
            logger.info(f"‚úÖ PostgreSQL –ø—É–ª —Å–æ–∑–¥–∞–Ω (—Ä–∞–∑–º–µ—Ä: {DATABASE_POOL_SIZE})")
            
        except ImportError:
            logger.error("‚ùå asyncpg –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω! pip install asyncpg")
            raise
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ PostgreSQL: {e}")
            raise
    
    async def _init_sqlite(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è SQLite"""
        db_path = self.database_url.replace('sqlite:///', '')
        
        # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
        os.makedirs(os.path.dirname(db_path) if os.path.dirname(db_path) else '.', exist_ok=True)
        
        logger.info(f"‚úÖ SQLite –ø—É—Ç—å: {db_path}")
    
    @asynccontextmanager
    async def get_connection(self):
        """–ö–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å –ë–î"""
        if self.db_type == 'sqlite':
            db_path = self.database_url.replace('sqlite:///', '')
            async with aiosqlite.connect(db_path) as conn:
                conn.row_factory = aiosqlite.Row
                yield conn
        else:
            # PostgreSQL –ø–æ–¥–¥–µ—Ä–∂–∫–∞
            try:
                import asyncpg
            except ImportError:
                logger.error("‚ùå asyncpg –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!")
                raise
            
            async with self.pool.acquire() as conn:
                yield conn
    
    async def create_tables(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü —Å –ø—Ä–µ—Ñ–∏–∫—Å–∞–º–∏"""
        async with self.get_connection() as conn:
            
            # –¢–∞–±–ª–∏—Ü–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            if self.db_type == 'postgresql':
                users_query = f"""
                    CREATE TABLE IF NOT EXISTS {self.tables['users']} (
                        user_id BIGINT PRIMARY KEY,
                        telegram_username VARCHAR(100),
                        first_name VARCHAR(255),
                        mode VARCHAR(20) NOT NULL DEFAULT 'bot',
                        status VARCHAR(20) NOT NULL DEFAULT 'active',
                        api_id_encrypted TEXT,
                        api_hash_encrypted TEXT,
                        session_file VARCHAR(255),
                        created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                        last_active TIMESTAMP DEFAULT CURRENT_TIMESTAMP
                    )
                """
            else:
                users_query = f"""
                    CREATE TABLE IF NOT EXISTS {self.tables['users']} (
                        user_id INTEGER PRIMARY KEY,
                        telegram_username TEXT,
                        first_name TEXT,
                        mode TEXT NOT NULL DEFAULT 'bot',
                        status TEXT NOT NULL DEFAULT 'active',
                        api_id_encrypted TEXT,
                        api_hash_encrypted TEXT,
                        session_file TEXT,
                        created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                        last_active TIMESTAMP DEFAULT CURRENT_TIMESTAMP
                    )
                """
            
            # –¢–∞–±–ª–∏—Ü–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
            if self.db_type == 'postgresql':
                activity_query = f"""
                    CREATE TABLE IF NOT EXISTS {self.tables['activity_data']} (
                        id SERIAL PRIMARY KEY,
                        chat_id BIGINT NOT NULL,
                        user_id BIGINT NOT NULL,
                        username VARCHAR(100),
                        first_name VARCHAR(255),
                        message_count INTEGER DEFAULT 1,
                        date_tracked DATE NOT NULL,
                        last_activity TIMESTAMP DEFAULT CURRENT_TIMESTAMP
                    )
                """
            else:
                activity_query = f"""
                    CREATE TABLE IF NOT EXISTS {self.tables['activity_data']} (
                        id INTEGER PRIMARY KEY AUTOINCREMENT,
                        chat_id INTEGER NOT NULL,
                        user_id INTEGER NOT NULL,
                        username TEXT,
                        first_name TEXT,
                        message_count INTEGER DEFAULT 1,
                        date_tracked DATE NOT NULL,
                        last_activity TIMESTAMP DEFAULT CURRENT_TIMESTAMP
                    )
                """
            
            # –¢–∞–±–ª–∏—Ü–∞ –æ—á–µ—Ä–µ–¥–∏ –∑–∞–ø—Ä–æ—Å–æ–≤
            if self.db_type == 'postgresql':
                queue_query = f"""
                    CREATE TABLE IF NOT EXISTS {self.tables['request_queue']} (
                        id SERIAL PRIMARY KEY,
                        user_id BIGINT NOT NULL,
                        chat_id BIGINT NOT NULL,
                        command VARCHAR(100) NOT NULL,
                        parameters TEXT,
                        priority INTEGER DEFAULT 1,
                        status VARCHAR(20) DEFAULT 'pending',
                        created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                        completed_at TIMESTAMP,
                        result TEXT,
                        error_message TEXT
                    )
                """
            else:
                queue_query = f"""
                    CREATE TABLE IF NOT EXISTS {self.tables['request_queue']} (
                        id INTEGER PRIMARY KEY AUTOINCREMENT,
                        user_id INTEGER NOT NULL,
                        chat_id INTEGER NOT NULL,
                        command TEXT NOT NULL,
                        parameters TEXT,
                        priority INTEGER DEFAULT 1,
                        status TEXT DEFAULT 'pending',
                        created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                        completed_at TIMESTAMP,
                        result TEXT,
                        error_message TEXT
                    )
                """
            
            # –í—ã–ø–æ–ª–Ω—è–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü
            if self.db_type == 'sqlite':
                await conn.execute(users_query)
                await conn.execute(activity_query)
                await conn.execute(queue_query)
                await conn.commit()
            else:
                await conn.execute(users_query)
                await conn.execute(activity_query)
                await conn.execute(queue_query)
    
    async def create_indexes(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω–¥–µ–∫—Å–æ–≤ –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏"""
        async with self.get_connection() as conn:
            indexes = [
                f"CREATE INDEX IF NOT EXISTS idx_{self.tables['users']}_mode ON {self.tables['users']} (mode)",
                f"CREATE INDEX IF NOT EXISTS idx_{self.tables['users']}_status ON {self.tables['users']} (status)",
                f"CREATE INDEX IF NOT EXISTS idx_{self.tables['activity_data']}_chat_user_date ON {self.tables['activity_data']} (chat_id, user_id, date_tracked)",
                f"CREATE INDEX IF NOT EXISTS idx_{self.tables['request_queue']}_user_status ON {self.tables['request_queue']} (user_id, status)"
            ]
            
            for index_query in indexes:
                if self.db_type == 'sqlite':
                    await conn.execute(index_query)
                else:
                    await conn.execute(index_query)
            
            if self.db_type == 'sqlite':
                await conn.commit()
    
    async def _migrate_old_data(self):
        """–ú–∏–≥—Ä–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –∏–∑ —Å—Ç–∞—Ä—ã—Ö —Ç–∞–±–ª–∏—Ü –±–µ–∑ –ø—Ä–µ—Ñ–∏–∫—Å–æ–≤"""
        try:
            old_tables = ['users', 'activity_data', 'request_queue']
            
            for old_table in old_tables:
                new_table = self.tables[old_table]
                
                async with self.get_connection() as conn:
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Å—Ç–∞—Ä–∞—è —Ç–∞–±–ª–∏—Ü–∞
                    if self.db_type == 'sqlite':
                        check_query = f"SELECT name FROM sqlite_master WHERE type='table' AND name='{old_table}'"
                        cursor = await conn.execute(check_query)
                        exists = await cursor.fetchone()
                    else:
                        check_query = f"SELECT EXISTS (SELECT FROM information_schema.tables WHERE table_name = $1)"
                        exists = await conn.fetchval(check_query, old_table)
                    
                    if exists:
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –¥–∞–Ω–Ω—ã–µ –≤ —Å—Ç–∞—Ä–æ–π —Ç–∞–±–ª–∏—Ü–µ
                        count_query = f"SELECT COUNT(*) FROM {old_table}"
                        if self.db_type == 'sqlite':
                            cursor = await conn.execute(count_query)
                            count = (await cursor.fetchone())[0]
                        else:
                            count = await conn.fetchval(count_query)
                        
                        if count > 0:
                            logger.info(f"üîÑ –ú–∏–≥—Ä–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö: {old_table} ‚Üí {new_table} ({count} –∑–∞–ø–∏—Å–µ–π)")
                            
                            # –ö–æ–ø–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ
                            copy_query = f"INSERT INTO {new_table} SELECT * FROM {old_table}"
                            
                            if self.db_type == 'sqlite':
                                await conn.execute(copy_query)
                                await conn.commit()
                            else:
                                await conn.execute(copy_query)
                            
                            # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—É—é —Ç–∞–±–ª–∏—Ü—É
                            drop_query = f"DROP TABLE {old_table}"
                            if self.db_type == 'sqlite':
                                await conn.execute(drop_query)
                                await conn.commit()
                            else:
                                await conn.execute(drop_query)
                            
                            logger.info(f"‚úÖ –ú–∏–≥—Ä–∞—Ü–∏—è {old_table} –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
                
        except Exception as e:
            logger.debug(f"–ú–∏–≥—Ä–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö: {e} (–Ω–æ—Ä–º–∞–ª—å–Ω–æ, –µ—Å–ª–∏ —Ç–∞–±–ª–∏—Ü –±–µ–∑ –ø—Ä–µ—Ñ–∏–∫—Å–∞ –Ω–µ—Ç)")
    
    # === –£–ù–ò–í–ï–†–°–ê–õ–¨–ù–´–ï –ú–ï–¢–û–î–´ –î–õ–Ø –û–ë–ï–ò–• –ë–î ===
    
    async def _execute_query(self, query: str, params: tuple = None, fetch_one: bool = False, fetch_all: bool = False):
        """–ò–°–ü–†–ê–í–õ–ï–ù–û v4.1.2: –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –º–µ—Ç–æ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–æ–≤ —Å –ø–æ–¥—Ä–æ–±–Ω—ã–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º"""
        logger.debug(f"üîê DB: –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–∞: {query[:100]}...")
        logger.debug(f"üîê DB: –ü–∞—Ä–∞–º–µ—Ç—Ä—ã: {params}")
        
        async with self.get_connection() as conn:
            if self.db_type == 'sqlite':
                logger.debug(f"üîê DB: –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ SQLite")
                cursor = await conn.execute(query, params or ())
                
                if fetch_one:
                    result = await cursor.fetchone()
                    result_dict = dict(result) if result else None
                    logger.debug(f"üîê DB: SQLite fetch_one —Ä–µ–∑—É–ª—å—Ç–∞—Ç: {result_dict}")
                    return result_dict
                elif fetch_all:
                    rows = await cursor.fetchall()
                    result_list = [dict(row) for row in rows]
                    logger.debug(f"üîê DB: SQLite fetch_all —Ä–µ–∑—É–ª—å—Ç–∞—Ç: {len(result_list)} —Å—Ç—Ä–æ–∫")
                    return result_list
                else:
                    await conn.commit()
                    rowcount = cursor.rowcount
                    logger.debug(f"üîê DB: SQLite rowcount: {rowcount}")
                    return rowcount
            else:
                # PostgreSQL - –ò–°–ü–†–ê–í–õ–ï–ù–´ –ü–ê–†–ê–ú–ï–¢–†–´
                logger.debug(f"üîê DB: –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ PostgreSQL")
                try:
                    if fetch_one:
                        if params:
                            result = await conn.fetchrow(query, *params)
                        else:
                            result = await conn.fetchrow(query)
                        result_dict = dict(result) if result else None
                        logger.debug(f"üîê DB: PostgreSQL fetch_one —Ä–µ–∑—É–ª—å—Ç–∞—Ç: {result_dict}")
                        return result_dict
                    elif fetch_all:
                        if params:
                            rows = await conn.fetch(query, *params)
                        else:
                            rows = await conn.fetch(query)
                        result_list = [dict(row) for row in rows]
                        logger.debug(f"üîê DB: PostgreSQL fetch_all —Ä–µ–∑—É–ª—å—Ç–∞—Ç: {len(result_list)} —Å—Ç—Ä–æ–∫")
                        return result_list
                    else:
                        if params:
                            result = await conn.execute(query, *params)
                        else:
                            result = await conn.execute(query)
                        
                        logger.debug(f"üîê DB: PostgreSQL execute —Ä–µ–∑—É–ª—å—Ç–∞—Ç: {result}")
                        
                        # –ò–∑–≤–ª–µ–∫–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞—Ç—Ä–æ–Ω—É—Ç—ã—Ö —Å—Ç—Ä–æ–∫
                        if isinstance(result, str):
                            if 'UPDATE' in result or 'INSERT' in result or 'DELETE' in result:
                                parts = result.split()
                                rowcount = int(parts[-1]) if parts and parts[-1].isdigit() else 1
                                logger.debug(f"üîê DB: PostgreSQL –∏–∑–≤–ª–µ—á–µ–Ω–Ω—ã–π rowcount: {rowcount}")
                                return rowcount
                        return 1
                except Exception as e:
                    logger.error(f"‚ùå DB: –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è PostgreSQL –∑–∞–ø—Ä–æ—Å–∞: {e}")
                    logger.error(f"‚ùå DB: Query: {query}")
                    logger.error(f"‚ùå DB: Params: {params}")
                    logger.error(f"‚ùå DB: –¢—Ä–∞—Å—Å–∏—Ä–æ–≤–∫–∞ PostgreSQL: ", exc_info=True)
                    raise
    
    # === –£–ü–†–ê–í–õ–ï–ù–ò–ï –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø–ú–ò ===
    
    async def get_user(self, user_id: int) -> Optional[Dict[str, Any]]:
        """–ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ"""
        query = f"SELECT * FROM {self.tables['users']} WHERE user_id = " + ("$1" if self.db_type == 'postgresql' else "?")
        return await self._execute_query(query, (user_id,), fetch_one=True)
    
    async def create_or_update_user(self, user_id: int, telegram_username: str = None, 
                                  first_name: str = None, mode: str = 'bot') -> bool:
        """–ò–°–ü–†–ê–í–õ–ï–ù–û: –°–æ–∑–¥–∞—Ç—å –∏–ª–∏ –æ–±–Ω–æ–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –ª–æ–≥–∏–∫–æ–π UPSERT"""
        try:
            # –°–Ω–∞—á–∞–ª–∞ –ø—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            existing_user = await self.get_user(user_id)
            
            if existing_user:
                # –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                if self.db_type == 'postgresql':
                    query = f"""
                        UPDATE {self.tables['users']} SET
                            telegram_username = $1,
                            first_name = $2,
                            mode = $3,
                            last_active = $4
                        WHERE user_id = $5
                    """
                    params = (telegram_username, first_name, mode, datetime.now(), user_id)
                else:
                    query = f"""
                        UPDATE {self.tables['users']} SET
                            telegram_username = ?,
                            first_name = ?,
                            mode = ?,
                            last_active = ?
                        WHERE user_id = ?
                    """
                    params = (telegram_username, first_name, mode, datetime.now(), user_id)
                
                await self._execute_query(query, params)
                logger.debug(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –æ–±–Ω–æ–≤–ª–µ–Ω")
                
            else:
                # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                if self.db_type == 'postgresql':
                    query = f"""
                        INSERT INTO {self.tables['users']} 
                        (user_id, telegram_username, first_name, mode, last_active, created_at)
                        VALUES ($1, $2, $3, $4, $5, $6)
                    """
                    params = (user_id, telegram_username, first_name, mode, datetime.now(), datetime.now())
                else:
                    query = f"""
                        INSERT INTO {self.tables['users']} 
                        (user_id, telegram_username, first_name, mode, last_active, created_at)
                        VALUES (?, ?, ?, ?, ?, ?)
                    """
                    params = (user_id, telegram_username, first_name, mode, datetime.now(), datetime.now())
                
                await self._execute_query(query, params)
                logger.debug(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} —Å–æ–∑–¥–∞–Ω")
            
            return True
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ create_or_update_user –¥–ª—è {user_id}: {e}")
            return False
    
    async def save_user_credentials(self, user_id: int, api_id_encrypted: str, 
                                  api_hash_encrypted: str, session_file: str) -> bool:
        """–ò–°–ü–†–ê–í–õ–ï–ù–û v4.1.2: –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω—ã–µ credentials –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        try:
            logger.info(f"üîê DB: –ù–∞—á–∞–ª–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è credentials –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
            logger.info(f"üîê DB: –¢–∏–ø –ë–î: {self.db_type}")
            
            # –°–Ω–∞—á–∞–ª–∞ —É–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
            logger.info(f"üîê DB: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
            existing_user = await self.get_user(user_id)
            
            if not existing_user:
                logger.warning(f"‚ö†Ô∏è DB: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –Ω–µ –Ω–∞–π–¥–µ–Ω, —Å–æ–∑–¥–∞–µ–º")
                # –°–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                await self.create_or_update_user(user_id, mode='bot')
                logger.info(f"‚úÖ DB: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} —Å–æ–∑–¥–∞–Ω")
            else:
                logger.info(f"‚úÖ DB: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –Ω–∞–π–¥–µ–Ω")
            
            # –û–±–Ω–æ–≤–ª—è–µ–º credentials
            logger.info(f"üîê DB: –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ credentials –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
            
            if self.db_type == 'postgresql':
                query = f"""
                    UPDATE {self.tables['users']} SET 
                        api_id_encrypted = $1,
                        api_hash_encrypted = $2,
                        session_file = $3,
                        mode = 'user',
                        status = 'active',
                        last_active = $4
                    WHERE user_id = $5
                """
                params = (api_id_encrypted, api_hash_encrypted, session_file, datetime.now(), user_id)
            else:
                query = f"""
                    UPDATE {self.tables['users']} SET 
                        api_id_encrypted = ?,
                        api_hash_encrypted = ?,
                        session_file = ?,
                        mode = 'user',
                        status = 'active',
                        last_active = ?
                    WHERE user_id = ?
                """
                params = (api_id_encrypted, api_hash_encrypted, session_file, datetime.now(), user_id)
            
            logger.info(f"üîê DB: –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ SQL –∑–∞–ø—Ä–æ—Å–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
            logger.debug(f"üîê DB: Query: {query}")
            logger.debug(f"üîê DB: Params: {[str(p)[:50] + '...' if len(str(p)) > 50 else str(p) for p in params]}")
            
            rows_affected = await self._execute_query(query, params)
            
            logger.info(f"üîê DB: –ó–∞—Ç—Ä–æ–Ω—É—Ç–æ —Å—Ç—Ä–æ–∫: {rows_affected}")
            
            if rows_affected > 0:
                logger.info(f"‚úÖ DB: Credentials —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –¥–∞–Ω–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Å–æ—Ö—Ä–∞–Ω–∏–ª–∏—Å—å
                logger.info(f"üîê DB: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
                updated_user = await self.get_user(user_id)
                
                if updated_user:
                    logger.info(f"‚úÖ DB: –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ–π–¥–µ–Ω–∞ - —Ä–µ–∂–∏–º: {updated_user.get('mode')}, –µ—Å—Ç—å credentials: {bool(updated_user.get('api_id_encrypted'))}")
                    return True
                else:
                    logger.error(f"‚ùå DB: –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–µ –ø—Ä–æ–π–¥–µ–Ω–∞ - –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –ø–æ—Å–ª–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è")
                    return False
            else:
                logger.error(f"‚ùå DB: –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å credentials –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} - –Ω–µ –∑–∞—Ç—Ä–æ–Ω—É—Ç–æ –Ω–∏ –æ–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏")
                return False
            
        except Exception as e:
            logger.error(f"‚ùå DB: –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ save_user_credentials –¥–ª—è {user_id}: {e}")
            logger.error(f"‚ùå DB: –¢—Ä–∞—Å—Å–∏—Ä–æ–≤–∫–∞: ", exc_info=True)
            return False
    
    async def update_user_status(self, user_id: int, status: str) -> bool:
        """–û–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        if status not in USER_STATUSES:
            raise ValueError(f"–ù–µ–≤–µ—Ä–Ω—ã–π —Å—Ç–∞—Ç—É—Å: {status}")
        
        query = f"""
            UPDATE {self.tables['users']} SET status = {('$1' if self.db_type == 'postgresql' else '?')}, 
            last_active = {('$2' if self.db_type == 'postgresql' else '?')}
            WHERE user_id = {('$3' if self.db_type == 'postgresql' else '?')}
        """
        
        await self._execute_query(query, (status, datetime.now(), user_id))
        return True
    
    async def get_users_by_mode(self, mode: str) -> List[Dict[str, Any]]:
        """–ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ —Ä–µ–∂–∏–º—É"""
        query = f"""
            SELECT * FROM {self.tables['users']} WHERE mode = {('$1' if self.db_type == 'postgresql' else '?')} AND status = 'active'
        """
        
        return await self._execute_query(query, (mode,), fetch_all=True)
    
    async def cleanup_expired_users(self) -> int:
        """–û—á–∏—Å—Ç–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –∏—Å—Ç–µ–∫—à–∏–º–∏ —Å–µ—Å—Å–∏—è–º–∏"""
        expiry_date = datetime.now() - timedelta(days=SESSION_TIMEOUT_DAYS)
        
        query = f"""
            UPDATE {self.tables['users']} SET status = 'expired'
            WHERE last_active < {('$1' if self.db_type == 'postgresql' else '?')} AND status = 'active' AND mode = 'user'
        """
        
        return await self._execute_query(query, (expiry_date,))
    
    # === –ê–ö–¢–ò–í–ù–û–°–¢–¨ –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ï–ô ===
    
    async def add_user_activity(self, chat_id: int, user_id: int, username: str = None, 
                               first_name: str = None) -> bool:
        """–î–æ–±–∞–≤–∏—Ç—å –∏–ª–∏ –æ–±–Ω–æ–≤–∏—Ç—å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        today = datetime.now().date()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∑–∞–ø–∏—Å—å –∑–∞ —Å–µ–≥–æ–¥–Ω—è
        check_query = f"""
            SELECT id, message_count FROM {self.tables['activity_data']} 
            WHERE chat_id = {('$1' if self.db_type == 'postgresql' else '?')} AND 
                  user_id = {('$2' if self.db_type == 'postgresql' else '?')} AND 
                  date_tracked = {('$3' if self.db_type == 'postgresql' else '?')}
        """
        
        existing = await self._execute_query(check_query, (chat_id, user_id, today), fetch_one=True)
        
        if existing:
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –∑–∞–ø–∏—Å—å
            update_query = f"""
                UPDATE {self.tables['activity_data']} SET 
                    message_count = message_count + 1,
                    last_activity = {('$1' if self.db_type == 'postgresql' else '?')},
                    username = COALESCE({('$2' if self.db_type == 'postgresql' else '?')}, username),
                    first_name = COALESCE({('$3' if self.db_type == 'postgresql' else '?')}, first_name)
                WHERE id = {('$4' if self.db_type == 'postgresql' else '?')}
            """
            
            await self._execute_query(update_query, (datetime.now(), username, first_name, existing['id']))
        else:
            # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å
            insert_query = f"""
                INSERT INTO {self.tables['activity_data']} 
                (chat_id, user_id, username, first_name, date_tracked, last_activity)
                VALUES ({('$1' if self.db_type == 'postgresql' else '?')}, 
                        {('$2' if self.db_type == 'postgresql' else '?')}, 
                        {('$3' if self.db_type == 'postgresql' else '?')}, 
                        {('$4' if self.db_type == 'postgresql' else '?')}, 
                        {('$5' if self.db_type == 'postgresql' else '?')}, 
                        {('$6' if self.db_type == 'postgresql' else '?')})
            """
            
            await self._execute_query(insert_query, (chat_id, user_id, username, first_name, today, datetime.now()))
        
        return True
    
    async def get_active_users(self, chat_id: int, date: datetime.date = None) -> List[Dict[str, Any]]:
        """–ü–æ–ª—É—á–∏—Ç—å –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∑–∞ –¥–µ–Ω—å"""
        if date is None:
            date = datetime.now().date()
        
        query = f"""
            SELECT * FROM {self.tables['activity_data']} 
            WHERE chat_id = {('$1' if self.db_type == 'postgresql' else '?')} AND 
                  date_tracked = {('$2' if self.db_type == 'postgresql' else '?')}
            ORDER BY message_count DESC
        """
        
        return await self._execute_query(query, (chat_id, date), fetch_all=True)
    
    # === –û–ß–ï–†–ï–î–¨ –ó–ê–ü–†–û–°–û–í ===
    
    async def add_task(self, user_id: int, chat_id: int, command: str, 
                      parameters: str = None, priority: int = 1) -> int:
        """–î–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É –≤ –æ—á–µ—Ä–µ–¥—å"""
        if self.db_type == 'postgresql':
            query = f"""
                INSERT INTO {self.tables['request_queue']} 
                (user_id, chat_id, command, parameters, priority, created_at)
                VALUES ($1, $2, $3, $4, $5, $6)
                RETURNING id
            """
            result = await self._execute_query(query, 
                (user_id, chat_id, command, parameters, priority, datetime.now()), fetch_one=True)
            return result['id'] if result else 0
        else:
            # SQLite
            query = f"""
                INSERT INTO {self.tables['request_queue']} 
                (user_id, chat_id, command, parameters, priority, created_at)
                VALUES (?, ?, ?, ?, ?, ?)
            """
            await self._execute_query(query, (user_id, chat_id, command, parameters, priority, datetime.now()))
            
            # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π ID –¥–ª—è SQLite
            last_id_query = "SELECT last_insert_rowid() as id"
            result = await self._execute_query(last_id_query, fetch_one=True)
            return result['id'] if result else 0
    
    async def complete_task(self, task_id: int, result: str = None, error: str = None) -> bool:
        """–ó–∞–≤–µ—Ä—à–∏—Ç—å –∑–∞–¥–∞—á—É"""
        if self.db_type == 'postgresql':
            query = f"""
                UPDATE {self.tables['request_queue']} SET 
                    status = 'completed',
                    completed_at = $1,
                    result = $2,
                    error_message = $3
                WHERE id = $4
            """
        else:
            query = f"""
                UPDATE {self.tables['request_queue']} SET 
                    status = 'completed',
                    completed_at = ?,
                    result = ?,
                    error_message = ?
                WHERE id = ?
            """
        
        rows_affected = await self._execute_query(query, (datetime.now(), result, error, task_id))
        return rows_affected > 0
    
    async def get_pending_tasks(self, limit: int = 10) -> List[Dict[str, Any]]:
        """–ü–æ–ª—É—á–∏—Ç—å –∑–∞–¥–∞—á–∏ –≤ –æ–∂–∏–¥–∞–Ω–∏–∏"""
        query = f"""
            SELECT * FROM {self.tables['request_queue']} 
            WHERE status = 'pending'
            ORDER BY priority DESC, created_at ASC
            LIMIT {('$1' if self.db_type == 'postgresql' else '?')}
        """
        
        return await self._execute_query(query, (limit,), fetch_all=True)
    
    async def cleanup_old_tasks(self, days: int = 7) -> int:
        """–û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á"""
        cutoff_date = datetime.now() - timedelta(days=days)
        
        query = f"""
            DELETE FROM {self.tables['request_queue']} 
            WHERE status = 'completed' AND completed_at < {('$1' if self.db_type == 'postgresql' else '?')}
        """
        
        return await self._execute_query(query, (cutoff_date,))

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä
db_manager = DatabaseManager()

async def init_database():
    """–§—É–Ω–∫—Ü–∏—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
    await db_manager.initialize()
