#!/usr/bin/env python3
"""
–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö –¥–ª—è Get ID Bot by Mister DMS
–û–ë–ù–û–í–õ–ï–ù–û v4.1.1: —Ä–∞–±–æ—Ç–∞ —Å –æ–±—â–µ–π misterdms-bots-db + —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ + –ø—Ä–µ—Ñ–∏–∫—Å—ã
"""

import aiosqlite
import asyncio
import logging
import urllib.parse as urlparse
from datetime import datetime, timedelta
from typing import Optional, List, Dict, Any, Union
from contextlib import asynccontextmanager
import json

from config import DATABASE_URL, BOT_PREFIX
from utils import JSONUtils, PerformanceUtils

logger = logging.getLogger(__name__)

class DatabaseManager:
    """–ú–µ–Ω–µ–¥–∂–µ—Ä –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –æ–±—â–µ–π misterdms-bots-db + —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"""
    
    def __init__(self, database_url: str = DATABASE_URL, bot_prefix: str = BOT_PREFIX):
        # –í–∞–ª–∏–¥–∞—Ü–∏—è –∏ fallback
        if not database_url or 'user:password@host' in database_url:
            logger.warning("‚ö†Ô∏è –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π DATABASE_URL, –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –Ω–∞ SQLite")
            database_url = 'sqlite:///bot_data.db'
        
        self.database_url = database_url
        self.bot_prefix = bot_prefix.lower()
        self.db_type = 'sqlite' if database_url.startswith('sqlite') else 'postgresql'
        
        # –ò–º–µ–Ω–∞ —Ç–∞–±–ª–∏—Ü —Å –ø—Ä–µ—Ñ–∏–∫—Å–∞–º–∏ –¥–ª—è –∏–∑–æ–ª—è—Ü–∏–∏ –≤ –æ–±—â–µ–π –ë–î
        self.tables = {
            'users': f"{self.bot_prefix}_users",
            'activity_data': f"{self.bot_prefix}_activity_data",
            'request_queue': f"{self.bot_prefix}_request_queue",
            'bot_settings': f"{self.bot_prefix}_bot_settings",
            'bot_logs': f"{self.bot_prefix}_bot_logs",
            'command_stats': f"{self.bot_prefix}_command_stats",
            'user_sessions': f"{self.bot_prefix}_user_sessions",
            'performance_metrics': f"{self.bot_prefix}_performance_metrics"
        }
        
        self._connection_pool = None
        logger.info(f"üóÑÔ∏è DatabaseManager –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω: {self.db_type} (–ø—Ä–µ—Ñ–∏–∫—Å: {self.bot_prefix})")
    
    async def initialize(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –∏ —Å–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü"""
        logger.info(f"üóÑÔ∏è –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {self.db_type}")
        
        try:
            await self.create_tables()
            await self.create_indexes()
            await self.cleanup_old_data()
            logger.info("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞ —Å –ø—Ä–µ—Ñ–∏–∫—Å–∞–º–∏")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ë–î: {e}")
            
            # –ê–≤—Ç–æ—Ñ–æ–ª–ª–±—ç–∫ –Ω–∞ SQLite –ø—Ä–∏ –ø—Ä–æ–±–ª–µ–º–∞—Ö —Å PostgreSQL
            if self.db_type == 'postgresql' and ('hostname' in str(e) or 'address' in str(e)):
                logger.warning("üîÑ –ê–≤—Ç–æ—Ñ–æ–ª–ª–±—ç–∫ –Ω–∞ SQLite –∏–∑-–∑–∞ –ø—Ä–æ–±–ª–µ–º —Å PostgreSQL")
                self.database_url = 'sqlite:///bot_data.db'
                self.db_type = 'sqlite'
                
                try:
                    await self.create_tables()
                    await self.create_indexes()
                    logger.info("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞ –Ω–∞ SQLite (fallback)")
                    return
                except Exception as sqlite_error:
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ SQLite fallback: {sqlite_error}")
            
            raise
    
    @asynccontextmanager
    async def get_connection(self):
        """–ö–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å –ë–î"""
        if self.db_type == 'sqlite':
            db_path = self.database_url.replace('sqlite:///', '')
            async with aiosqlite.connect(db_path) as conn:
                conn.row_factory = aiosqlite.Row
                yield conn
        else:
            # PostgreSQL –ø–æ–¥–¥–µ—Ä–∂–∫–∞ –¥–ª—è misterdms-bots-db
            try:
                import asyncpg
            except ImportError:
                logger.error("‚ùå asyncpg –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω! –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ: pip install asyncpg")
                raise
            
            url = urlparse.urlparse(self.database_url)
            
            conn = None
            try:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å URL
                if not url.hostname or url.hostname in ['host', 'localhost', 'example.com']:
                    raise ValueError(f"Invalid DATABASE_URL hostname: {url.hostname}")

                conn = await asyncpg.connect(
                    host=url.hostname,
                    port=url.port or 5432,
                    user=url.username,
                    password=url.password,
                    database=url.path[1:] if url.path else 'postgres',
                    timeout=10
                )
                yield conn
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ PostgreSQL: {e}")
                if 'No address associated with hostname' in str(e):
                    logger.error("üîß –ü—Ä–æ–≤–µ—Ä—å—Ç–µ DATABASE_URL –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")
                raise
            finally:
                if conn:
                    await conn.close()
    
    async def create_tables(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –≤—Å–µ—Ö —Ç–∞–±–ª–∏—Ü —Å –ø—Ä–µ—Ñ–∏–∫—Å–∞–º–∏"""
        
        # SQL —Å—Ö–µ–º—ã –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ –ë–î
        if self.db_type == 'sqlite':
            await self._create_sqlite_tables()
        else:
            await self._create_postgresql_tables()
    
    async def _create_sqlite_tables(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü –¥–ª—è SQLite"""
        async with self.get_connection() as conn:
            
            # –¢–∞–±–ª–∏—Ü–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            await conn.execute(f"""
                CREATE TABLE IF NOT EXISTS {self.tables['users']} (
                    user_id INTEGER PRIMARY KEY,
                    telegram_username TEXT,
                    first_name TEXT,
                    mode TEXT DEFAULT 'bot',
                    api_id_encrypted TEXT,
                    api_hash_encrypted TEXT,
                    session_file TEXT,
                    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                    last_active TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                    status TEXT DEFAULT 'active',
                    security_level TEXT DEFAULT 'normal',
                    total_commands INTEGER DEFAULT 0,
                    favorite_command TEXT DEFAULT 'scan'
                )
            """)
            
            # –¢–∞–±–ª–∏—Ü–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
            await conn.execute(f"""
                CREATE TABLE IF NOT EXISTS {self.tables['activity_data']} (
                    id INTEGER PRIMARY KEY AUTOINCREMENT,
                    chat_id INTEGER NOT NULL,
                    user_id INTEGER NOT NULL,
                    username TEXT,
                    first_name TEXT,
                    message_count INTEGER DEFAULT 1,
                    last_activity TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                    date_tracked DATE DEFAULT CURRENT_DATE,
                    topics_scanned INTEGER DEFAULT 0,
                    command_type TEXT DEFAULT 'scan'
                )
            """)
            
            # –¢–∞–±–ª–∏—Ü–∞ –æ—á–µ—Ä–µ–¥–∏ –∑–∞–ø—Ä–æ—Å–æ–≤
            await conn.execute(f"""
                CREATE TABLE IF NOT EXISTS {self.tables['request_queue']} (
                    id INTEGER PRIMARY KEY AUTOINCREMENT,
                    user_id INTEGER NOT NULL,
                    chat_id INTEGER,
                    command TEXT NOT NULL,
                    priority INTEGER DEFAULT 1,
                    status TEXT DEFAULT 'pending',
                    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                    started_at TIMESTAMP,
                    completed_at TIMESTAMP,
                    result TEXT,
                    correlation_id TEXT
                )
            """)
            
            # –¢–∞–±–ª–∏—Ü–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∫–æ–º–∞–Ω–¥
            await conn.execute(f"""
                CREATE TABLE IF NOT EXISTS {self.tables['command_stats']} (
                    id INTEGER PRIMARY KEY AUTOINCREMENT,
                    user_id INTEGER NOT NULL,
                    command TEXT NOT NULL,
                    executed_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                    success BOOLEAN DEFAULT TRUE,
                    execution_time_ms INTEGER,
                    chat_type TEXT DEFAULT 'private',
                    error_message TEXT
                )
            """)
            
            # –¢–∞–±–ª–∏—Ü–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –±–æ—Ç–∞
            await conn.execute(f"""
                CREATE TABLE IF NOT EXISTS {self.tables['bot_settings']} (
                    key TEXT PRIMARY KEY,
                    value TEXT NOT NULL,
                    description TEXT,
                    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                    updated_by INTEGER
                )
            """)
            
            # –¢–∞–±–ª–∏—Ü–∞ –ª–æ–≥–æ–≤
            await conn.execute(f"""
                CREATE TABLE IF NOT EXISTS {self.tables['bot_logs']} (
                    id INTEGER PRIMARY KEY AUTOINCREMENT,
                    level TEXT NOT NULL,
                    message TEXT NOT NULL,
                    user_id INTEGER,
                    chat_id INTEGER,
                    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                    module TEXT,
                    function_name TEXT
                )
            """)
            
            # –¢–∞–±–ª–∏—Ü–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö —Å–µ—Å—Å–∏–π
            await conn.execute(f"""
                CREATE TABLE IF NOT EXISTS {self.tables['user_sessions']} (
                    id INTEGER PRIMARY KEY AUTOINCREMENT,
                    user_id INTEGER NOT NULL,
                    session_type TEXT DEFAULT 'bot',
                    started_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                    last_activity TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                    status TEXT DEFAULT 'active',
                    metadata TEXT
                )
            """)
            
            # –¢–∞–±–ª–∏—Ü–∞ –º–µ—Ç—Ä–∏–∫ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
            await conn.execute(f"""
                CREATE TABLE IF NOT EXISTS {self.tables['performance_metrics']} (
                    id INTEGER PRIMARY KEY AUTOINCREMENT,
                    metric_name TEXT NOT NULL,
                    metric_value REAL NOT NULL,
                    timestamp TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                    tags TEXT,
                    user_id INTEGER
                )
            """)
            
            await conn.commit()
    
    async def _create_postgresql_tables(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü –¥–ª—è PostgreSQL"""
        async with self.get_connection() as conn:
            
            # –¢–∞–±–ª–∏—Ü–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            await conn.execute(f"""
                CREATE TABLE IF NOT EXISTS {self.tables['users']} (
                    user_id BIGINT PRIMARY KEY,
                    telegram_username TEXT,
                    first_name TEXT,
                    mode TEXT DEFAULT 'bot',
                    api_id_encrypted TEXT,
                    api_hash_encrypted TEXT,
                    session_file TEXT,
                    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                    last_active TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                    status TEXT DEFAULT 'active',
                    security_level TEXT DEFAULT 'normal',
                    total_commands INTEGER DEFAULT 0,
                    favorite_command TEXT DEFAULT 'scan'
                )
            """)
            
            # –û—Å—Ç–∞–ª—å–Ω—ã–µ —Ç–∞–±–ª–∏—Ü—ã –∞–Ω–∞–ª–æ–≥–∏—á–Ω–æ SQLite, –Ω–æ —Å BIGINT –¥–ª—è ID
            await conn.execute(f"""
                CREATE TABLE IF NOT EXISTS {self.tables['activity_data']} (
                    id SERIAL PRIMARY KEY,
                    chat_id BIGINT NOT NULL,
                    user_id BIGINT NOT NULL,
                    username TEXT,
                    first_name TEXT,
                    message_count INTEGER DEFAULT 1,
                    last_activity TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                    date_tracked DATE DEFAULT CURRENT_DATE,
                    topics_scanned INTEGER DEFAULT 0,
                    command_type TEXT DEFAULT 'scan'
                )
            """)
            
            await conn.execute(f"""
                CREATE TABLE IF NOT EXISTS {self.tables['request_queue']} (
                    id SERIAL PRIMARY KEY,
                    user_id BIGINT NOT NULL,
                    chat_id BIGINT,
                    command TEXT NOT NULL,
                    priority INTEGER DEFAULT 1,
                    status TEXT DEFAULT 'pending',
                    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                    started_at TIMESTAMP,
                    completed_at TIMESTAMP,
                    result TEXT,
                    correlation_id TEXT
                )
            """)
            
            await conn.execute(f"""
                CREATE TABLE IF NOT EXISTS {self.tables['command_stats']} (
                    id SERIAL PRIMARY KEY,
                    user_id BIGINT NOT NULL,
                    command TEXT NOT NULL,
                    executed_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                    success BOOLEAN DEFAULT TRUE,
                    execution_time_ms INTEGER,
                    chat_type TEXT DEFAULT 'private',
                    error_message TEXT
                )
            """)
            
            await conn.execute(f"""
                CREATE TABLE IF NOT EXISTS {self.tables['bot_settings']} (
                    key TEXT PRIMARY KEY,
                    value TEXT NOT NULL,
                    description TEXT,
                    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                    updated_by BIGINT
                )
            """)
            
            await conn.execute(f"""
                CREATE TABLE IF NOT EXISTS {self.tables['bot_logs']} (
                    id SERIAL PRIMARY KEY,
                    level TEXT NOT NULL,
                    message TEXT NOT NULL,
                    user_id BIGINT,
                    chat_id BIGINT,
                    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                    module TEXT,
                    function_name TEXT
                )
            """)
            
            await conn.execute(f"""
                CREATE TABLE IF NOT EXISTS {self.tables['user_sessions']} (
                    id SERIAL PRIMARY KEY,
                    user_id BIGINT NOT NULL,
                    session_type TEXT DEFAULT 'bot',
                    started_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                    last_activity TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                    status TEXT DEFAULT 'active',
                    metadata TEXT
                )
            """)
            
            await conn.execute(f"""
                CREATE TABLE IF NOT EXISTS {self.tables['performance_metrics']} (
                    id SERIAL PRIMARY KEY,
                    metric_name TEXT NOT NULL,
                    metric_value REAL NOT NULL,
                    timestamp TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                    tags TEXT,
                    user_id BIGINT
                )
            """)
    
    async def create_indexes(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω–¥–µ–∫—Å–æ–≤ –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏"""
        async with self.get_connection() as conn:
            try:
                if self.db_type == 'sqlite':
                    # SQLite –∏–Ω–¥–µ–∫—Å—ã
                    await conn.execute(f"CREATE INDEX IF NOT EXISTS idx_{self.bot_prefix}_users_last_active ON {self.tables['users']} (last_active)")
                    await conn.execute(f"CREATE INDEX IF NOT EXISTS idx_{self.bot_prefix}_activity_chat_user ON {self.tables['activity_data']} (chat_id, user_id)")
                    await conn.execute(f"CREATE INDEX IF NOT EXISTS idx_{self.bot_prefix}_command_stats_user ON {self.tables['command_stats']} (user_id, command)")
                    await conn.execute(f"CREATE INDEX IF NOT EXISTS idx_{self.bot_prefix}_request_queue_status ON {self.tables['request_queue']} (status)")
                    await conn.commit()
                else:
                    # PostgreSQL –∏–Ω–¥–µ–∫—Å—ã
                    await conn.execute(f"CREATE INDEX IF NOT EXISTS idx_{self.bot_prefix}_users_last_active ON {self.tables['users']} (last_active)")
                    await conn.execute(f"CREATE INDEX IF NOT EXISTS idx_{self.bot_prefix}_activity_chat_user ON {self.tables['activity_data']} (chat_id, user_id)")
                    await conn.execute(f"CREATE INDEX IF NOT EXISTS idx_{self.bot_prefix}_command_stats_user ON {self.tables['command_stats']} (user_id, command)")
                    await conn.execute(f"CREATE INDEX IF NOT EXISTS idx_{self.bot_prefix}_request_queue_status ON {self.tables['request_queue']} (status)")
                
                logger.debug("‚úÖ –ò–Ω–¥–µ–∫—Å—ã —Å–æ–∑–¥–∞–Ω—ã")
            except Exception as e:
                logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∏–Ω–¥–µ–∫—Å—ã: {e}")
    
    # === –ú–ï–¢–û–î–´ –î–õ–Ø –†–ê–ë–û–¢–´ –° –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø–ú–ò ===
    
    @PerformanceUtils.measure_time
    async def save_user(self, user_id: int, username: str = None, first_name: str = None, mode: str = 'bot'):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏–ª–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        async with self.get_connection() as conn:
            try:
                if self.db_type == 'sqlite':
                    await conn.execute(f"""
                        INSERT OR REPLACE INTO {self.tables['users']} 
                        (user_id, telegram_username, first_name, mode, last_active)
                        VALUES (?, ?, ?, ?, CURRENT_TIMESTAMP)
                    """, (user_id, username, first_name, mode))
                    await conn.commit()
                else:
                    await conn.execute(f"""
                        INSERT INTO {self.tables['users']} 
                        (user_id, telegram_username, first_name, mode, last_active)
                        VALUES ($1, $2, $3, $4, CURRENT_TIMESTAMP)
                        ON CONFLICT (user_id) DO UPDATE SET
                            telegram_username = EXCLUDED.telegram_username,
                            first_name = EXCLUDED.first_name,
                            last_active = CURRENT_TIMESTAMP
                    """, user_id, username, first_name, mode)
                
                logger.debug(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} —Å–æ—Ö—Ä–∞–Ω–µ–Ω")
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
    
    async def get_user(self, user_id: int) -> Optional[Dict[str, Any]]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        async with self.get_connection() as conn:
            try:
                if self.db_type == 'sqlite':
                    async with conn.execute(f"""
                        SELECT * FROM {self.tables['users']} WHERE user_id = ?
                    """, (user_id,)) as cursor:
                        row = await cursor.fetchone()
                else:
                    row = await conn.fetchrow(f"""
                        SELECT * FROM {self.tables['users']} WHERE user_id = $1
                    """, user_id)
                
                if row:
                    return dict(row) if self.db_type == 'sqlite' else dict(row)
                return None
                
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
                return None
    
    async def update_user_mode(self, user_id: int, mode: str):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ä–µ–∂–∏–º–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        async with self.get_connection() as conn:
            try:
                if self.db_type == 'sqlite':
                    await conn.execute(f"""
                        UPDATE {self.tables['users']} 
                        SET mode = ?, last_active = CURRENT_TIMESTAMP
                        WHERE user_id = ?
                    """, (mode, user_id))
                    await conn.commit()
                else:
                    await conn.execute(f"""
                        UPDATE {self.tables['users']} 
                        SET mode = $1, last_active = CURRENT_TIMESTAMP
                        WHERE user_id = $2
                    """, mode, user_id)
                
                logger.debug(f"‚úÖ –†–µ–∂–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –æ–±–Ω–æ–≤–ª–µ–Ω: {mode}")
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ä–µ–∂–∏–º–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
    
    async def save_user_credentials(self, user_id: int, encrypted_api_id: str, encrypted_api_hash: str, group_link: str = None):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω—ã—Ö credentials –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        async with self.get_connection() as conn:
            try:
                if self.db_type == 'sqlite':
                    await conn.execute(f"""
                        UPDATE {self.tables['users']} 
                        SET api_id_encrypted = ?, api_hash_encrypted = ?, 
                            session_file = ?, last_active = CURRENT_TIMESTAMP
                        WHERE user_id = ?
                    """, (encrypted_api_id, encrypted_api_hash, group_link, user_id))
                    await conn.commit()
                else:
                    await conn.execute(f"""
                        UPDATE {self.tables['users']} 
                        SET api_id_encrypted = $1, api_hash_encrypted = $2, 
                            session_file = $3, last_active = CURRENT_TIMESTAMP
                        WHERE user_id = $4
                    """, encrypted_api_id, encrypted_api_hash, group_link, user_id)
                
                logger.debug(f"‚úÖ Credentials –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã")
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è credentials –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
    
    # === –ú–ï–¢–û–î–´ –î–õ–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ò ===
    
    async def log_command_usage(self, user_id: int, command: str, success: bool = True, 
                              execution_time_ms: int = None, chat_type: str = 'private', 
                              error_message: str = None):
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –∫–æ–º–∞–Ω–¥"""
        async with self.get_connection() as conn:
            try:
                if self.db_type == 'sqlite':
                    await conn.execute(f"""
                        INSERT INTO {self.tables['command_stats']} 
                        (user_id, command, success, execution_time_ms, chat_type, error_message)
                        VALUES (?, ?, ?, ?, ?, ?)
                    """, (user_id, command, success, execution_time_ms, chat_type, error_message))
                    await conn.commit()
                else:
                    await conn.execute(f"""
                        INSERT INTO {self.tables['command_stats']} 
                        (user_id, command, success, execution_time_ms, chat_type, error_message)
                        VALUES ($1, $2, $3, $4, $5, $6)
                    """, user_id, command, success, execution_time_ms, chat_type, error_message)
                
                # –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                await self._update_user_command_count(user_id, command)
                
            except Exception as e:
                logger.debug(f"–û—à–∏–±–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã: {e}")
    
    async def _update_user_command_count(self, user_id: int, command: str):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—á–µ—Ç—á–∏–∫–∞ –∫–æ–º–∞–Ω–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        async with self.get_connection() as conn:
            try:
                if self.db_type == 'sqlite':
                    await conn.execute(f"""
                        UPDATE {self.tables['users']} 
                        SET total_commands = total_commands + 1,
                            favorite_command = ?,
                            last_active = CURRENT_TIMESTAMP
                        WHERE user_id = ?
                    """, (command, user_id))
                    await conn.commit()
                else:
                    await conn.execute(f"""
                        UPDATE {self.tables['users']} 
                        SET total_commands = total_commands + 1,
                            favorite_command = $1,
                            last_active = CURRENT_TIMESTAMP
                        WHERE user_id = $2
                    """, command, user_id)
            except Exception as e:
                logger.debug(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—á–µ—Ç—á–∏–∫–∞ –∫–æ–º–∞–Ω–¥: {e}")
    
    async def get_user_stats(self, user_id: int) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        async with self.get_connection() as conn:
            try:
                if self.db_type == 'sqlite':
                    async with conn.execute(f"""
                        SELECT 
                            COUNT(*) as total_commands,
                            COUNT(CASE WHEN success = 1 THEN 1 END) as successful_commands,
                            AVG(execution_time_ms) as avg_execution_time,
                            command as favorite_command,
                            COUNT(*) as command_count
                        FROM {self.tables['command_stats']} 
                        WHERE user_id = ?
                        GROUP BY command
                        ORDER BY command_count DESC
                        LIMIT 1
                    """, (user_id,)) as cursor:
                        row = await cursor.fetchone()
                else:
                    row = await conn.fetchrow(f"""
                        SELECT 
                            COUNT(*) as total_commands,
                            COUNT(CASE WHEN success = true THEN 1 END) as successful_commands,
                            AVG(execution_time_ms) as avg_execution_time,
                            command as favorite_command,
                            COUNT(*) as command_count
                        FROM {self.tables['command_stats']} 
                        WHERE user_id = $1
                        GROUP BY command
                        ORDER BY command_count DESC
                        LIMIT 1
                    """, user_id)
                
                if row:
                    return dict(row)
                
                return {
                    'total_commands': 0,
                    'successful_commands': 0,
                    'avg_execution_time': 0,
                    'favorite_command': 'scan'
                }
                
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
                return {}
    
    async def get_bot_stats(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –æ–±—â–µ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –±–æ—Ç–∞"""
        async with self.get_connection() as conn:
            try:
                stats = {}
                
                # –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
                if self.db_type == 'sqlite':
                    async with conn.execute(f"SELECT COUNT(*) FROM {self.tables['users']}") as cursor:
                        row = await cursor.fetchone()
                        stats['total_users'] = row[0] if row else 0
                else:
                    row = await conn.fetchval(f"SELECT COUNT(*) FROM {self.tables['users']}")
                    stats['total_users'] = row or 0
                
                # –ê–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 24 —á–∞—Å–∞
                if self.db_type == 'sqlite':
                    async with conn.execute(f"""
                        SELECT COUNT(*) FROM {self.tables['users']} 
                        WHERE last_active > datetime('now', '-1 day')
                    """) as cursor:
                        row = await cursor.fetchone()
                        stats['active_users_24h'] = row[0] if row else 0
                else:
                    row = await conn.fetchval(f"""
                        SELECT COUNT(*) FROM {self.tables['users']} 
                        WHERE last_active > NOW() - INTERVAL '1 day'
                    """)
                    stats['active_users_24h'] = row or 0
                
                # –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–º–∞–Ω–¥
                if self.db_type == 'sqlite':
                    async with conn.execute(f"SELECT COUNT(*) FROM {self.tables['command_stats']}") as cursor:
                        row = await cursor.fetchone()
                        stats['total_commands'] = row[0] if row else 0
                else:
                    row = await conn.fetchval(f"SELECT COUNT(*) FROM {self.tables['command_stats']}")
                    stats['total_commands'] = row or 0
                
                return stats
                
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –±–æ—Ç–∞: {e}")
                return {}
    
    # === –ú–ï–¢–û–î–´ –û–ß–ò–°–¢–ö–ò ===
    
    async def cleanup_old_data(self):
        """–û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –¥–∞–Ω–Ω—ã—Ö"""
        async with self.get_connection() as conn:
            try:
                # –£–¥–∞–ª—è–µ–º –ª–æ–≥–∏ —Å—Ç–∞—Ä—à–µ 30 –¥–Ω–µ–π
                if self.db_type == 'sqlite':
                    await conn.execute(f"""
                        DELETE FROM {self.tables['bot_logs']} 
                        WHERE created_at < datetime('now', '-30 days')
                    """)
                    
                    # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ –º–µ—Ç—Ä–∏–∫–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
                    await conn.execute(f"""
                        DELETE FROM {self.tables['performance_metrics']} 
                        WHERE timestamp < datetime('now', '-7 days')
                    """)
                    
                    await conn.commit()
                else:
                    await conn.execute(f"""
                        DELETE FROM {self.tables['bot_logs']} 
                        WHERE created_at < NOW() - INTERVAL '30 days'
                    """)
                    
                    await conn.execute(f"""
                        DELETE FROM {self.tables['performance_metrics']} 
                        WHERE timestamp < NOW() - INTERVAL '7 days'
                    """)
                
                logger.debug("‚úÖ –°—Ç–∞—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ –æ—á–∏—â–µ–Ω—ã")
            except Exception as e:
                logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ —Å—Ç–∞—Ä—ã—Ö –¥–∞–Ω–Ω—ã—Ö: {e}")
    
    async def close(self):
        """–ó–∞–∫—Ä—ã—Ç–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π —Å –ë–î"""
        try:
            # –î–ª—è asyncpg pool –±—É–¥–µ—Ç –∑–¥–µ—Å—å –ª–æ–≥–∏–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è
            logger.info("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –∑–∞–∫—Ä—ã—Ç–∞")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è –ë–î: {e}")

    # === –ó–ê–ì–õ–£–®–ö–ò –î–õ–Ø –ë–£–î–£–©–ò–• –ú–ï–¢–û–î–û–í ===
    
    async def add_to_queue(self, user_id: int, chat_id: int, command: str, priority: int = 1):
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏ –≤ –æ—á–µ—Ä–µ–¥—å"""
        # TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å
        pass
    
    async def get_queue_status(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –æ—á–µ—Ä–µ–¥–∏"""
        # TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å
        return {'pending': 0, 'processing': 0, 'completed': 0}
    
    async def save_activity_data(self, chat_id: int, user_id: int, username: str = None, 
                               first_name: str = None, message_count: int = 1):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏"""
        # TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å
        pass