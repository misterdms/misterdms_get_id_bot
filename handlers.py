#!/usr/bin/env python3
"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ Get ID Bot by Mister DMS
–û–ë–ù–û–í–õ–ï–ù–û v4.1.1: –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è + –∫–Ω–æ–ø–æ—á–Ω–æ–µ –º–µ–Ω—é + –≤—Å–µ –∫–æ–º–∞–Ω–¥—ã
"""

import asyncio
import logging
import json
from datetime import datetime, timedelta
from typing import Optional, Dict, Any

from telethon import TelegramClient, events, Button
from telethon.errors import SessionPasswordNeededError, ApiIdInvalidError
from telethon.tl.types import User, Chat, Channel

from config import (
    BOT_TOKEN, API_ID, API_HASH, MESSAGES, INLINE_KEYBOARDS,
    ADMIN_USER_ID, BUSINESS_CONTACT_ID, APP_VERSION, DEVELOPER
)
from utils import (
    MessageUtils, EncryptionUtils, ValidationUtils, 
    format_user_info, format_timespan, is_group_message
)
from scanner_utils import TopicScanner
from database import DatabaseManager

logger = logging.getLogger(__name__)

class BotHandlers:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ –±–æ—Ç–∞ —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å—é"""
    
    def __init__(self, db_manager: DatabaseManager):
        self.db_manager = db_manager
        self.bot_client = None
        self.topic_scanner = None
        self.active_sessions = {}  # –ê–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ —Å–µ—Å—Å–∏–∏
        
    async def initialize(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤"""
        try:
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Telegram –∫–ª–∏–µ–Ω—Ç–∞
            self.bot_client = TelegramClient(
                'bot_session',
                API_ID,
                API_HASH
            )
            
            await self.bot_client.start(bot_token=BOT_TOKEN)
            
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–∫–∞–Ω–µ—Ä–∞ —Ç–æ–ø–∏–∫–æ–≤
            self.topic_scanner = TopicScanner(self.db_manager)
            
            # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
            self.register_handlers()
            
            logger.info("‚úÖ –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤: {e}")
            raise
    
    def register_handlers(self):
        """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –≤—Å–µ—Ö –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥"""
        
        # === –û–°–ù–û–í–ù–´–ï –ö–û–ú–ê–ù–î–´ ===
        @self.bot_client.on(events.NewMessage(pattern='/start'))
        async def cmd_start(event):
            await self.handle_start(event)
        
        @self.bot_client.on(events.NewMessage(pattern='/help'))
        async def cmd_help(event):
            await self.handle_help(event)
        
        @self.bot_client.on(events.NewMessage(pattern='/stats'))
        async def cmd_stats(event):
            await self.handle_stats(event)
        
        @self.bot_client.on(events.NewMessage(pattern='/faq'))
        async def cmd_faq(event):
            await self.handle_faq(event)
        
        # === –ö–û–ú–ê–ù–î–´ –°–ö–ê–ù–ò–†–û–í–ê–ù–ò–Ø ===
        @self.bot_client.on(events.NewMessage(pattern=r'/(?:scan|list)(?:@\w+)?'))
        async def cmd_scan(event):
            await self.handle_scan(event)
        
        @self.bot_client.on(events.NewMessage(pattern=r'/get_all(?:@\w+)?'))
        async def cmd_get_all(event):
            await self.handle_get_all(event)
        
        @self.bot_client.on(events.NewMessage(pattern=r'/get_users(?:@\w+)?'))
        async def cmd_get_users(event):
            await self.handle_get_users(event)
        
        @self.bot_client.on(events.NewMessage(pattern=r'/get_ids(?:@\w+)?'))
        async def cmd_get_ids(event):
            await self.handle_get_ids(event)
        
        # === –ö–û–ú–ê–ù–î–´ –£–ü–†–ê–í–õ–ï–ù–ò–Ø ===
        @self.bot_client.on(events.NewMessage(pattern='/switch_mode'))
        async def cmd_switch_mode(event):
            await self.handle_switch_mode(event)
        
        @self.bot_client.on(events.NewMessage(pattern='/my_status'))
        async def cmd_my_status(event):
            await self.handle_my_status(event)
        
        @self.bot_client.on(events.NewMessage(pattern='/logout'))
        async def cmd_logout(event):
            await self.handle_logout(event)
        
        @self.bot_client.on(events.NewMessage(pattern='/renew_my_api_hash'))
        async def cmd_renew_credentials(event):
            await self.handle_renew_credentials(event)
        
        # === –ö–û–ú–ê–ù–î–´ –°–í–Ø–ó–ò v4.1 ===
        @self.bot_client.on(events.NewMessage(pattern='/yo_bro'))
        async def cmd_yo_bro(event):
            await self.handle_yo_bro(event)
        
        @self.bot_client.on(events.NewMessage(pattern='/buy_bots'))
        async def cmd_buy_bots(event):
            await self.handle_buy_bots(event)
        
        @self.bot_client.on(events.NewMessage(pattern='/donate'))
        async def cmd_donate(event):
            await self.handle_donate(event)
        
        # === –ö–û–ú–ê–ù–î–´ –û–¢–õ–ê–î–ö–ò ===
        @self.bot_client.on(events.NewMessage(pattern='/debug'))
        async def cmd_debug(event):
            await self.handle_debug(event)
        
        @self.bot_client.on(events.NewMessage(pattern='/health'))
        async def cmd_health(event):
            await self.handle_health(event)
        
        # === CALLBACK –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò ===
        @self.bot_client.on(events.CallbackQuery)
        async def callback_handler(event):
            await self.handle_callback(event)
        
        # === –û–ë–†–ê–ë–û–¢–ß–ò–ö API CREDENTIALS ===
        @self.bot_client.on(events.NewMessage(func=lambda e: self.is_credentials_message(e)))
        async def handle_credentials(event):
            await self.process_credentials(event)
    
    # === –û–°–ù–û–í–ù–´–ï –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò ===
    
    async def handle_start(self, event):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start —Å –∫–Ω–æ–ø–æ—á–Ω—ã–º –º–µ–Ω—é"""
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø —á–∞—Ç–∞
            if is_group_message(event):
                # –í –≥—Ä—É–ø–ø–µ –∫—Ä–∞—Ç–∫–∏–π –æ—Ç–≤–µ—Ç
                await MessageUtils.smart_reply(
                    event, 
                    "üëã –ü—Ä–∏–≤–µ—Ç! –ò—Å–ø–æ–ª—å–∑—É–π –∫–æ–º–∞–Ω–¥—ã —Å —É–ø–æ–º–∏–Ω–∞–Ω–∏–µ–º: `/scan@misterdms_topic_id_get_bot`"
                )
                return
            
            # –í –õ–° –ø–æ–ª–Ω–æ–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ —Å –º–µ–Ω—é
            user_id = event.sender_id
            user = await event.get_sender()
            username = getattr(user, 'username', 'Anonymous')
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º/–æ–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î
            await self.db_manager.save_user(user_id, username, user.first_name)
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏
            buttons = self.create_inline_keyboard('main_menu')
            
            await MessageUtils.smart_reply(
                event,
                MESSAGES['welcome'],
                buttons=buttons
            )
            
            # –õ–æ–≥–∏—Ä—É–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            await self.log_command_usage(user_id, 'start')
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ /start: {e}")
            await MessageUtils.smart_reply(event, MESSAGES['error'])
    
    async def handle_help(self, event):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /help"""
        try:
            if is_group_message(event):
                # –í –≥—Ä—É–ø–ø–µ –∫—Ä–∞—Ç–∫–∞—è —Å–ø—Ä–∞–≤–∫–∞
                await MessageUtils.smart_reply(
                    event,
                    "‚ùì **–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:**\n"
                    "/scan@misterdms_topic_id_get_bot - —Å–∫–∞–Ω–∏—Ä–æ–≤–∞—Ç—å —Ç–æ–ø–∏–∫–∏\n"
                    "/get_all@misterdms_topic_id_get_bot - –≤—Å–µ –¥–∞–Ω–Ω—ã–µ\n"
                    "–ü–æ–ª–Ω–∞—è —Å–ø—Ä–∞–≤–∫–∞ –≤ –õ–°: /start"
                )
                return
            
            # –í –õ–° –ø–æ–¥—Ä–æ–±–Ω–∞—è —Å–ø—Ä–∞–≤–∫–∞ —Å –º–µ–Ω—é
            buttons = self.create_inline_keyboard('help_menu')
            
            await MessageUtils.smart_reply(
                event,
                MESSAGES['help'],
                buttons=buttons
            )
            
            await self.log_command_usage(event.sender_id, 'help')
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ /help: {e}")
            await MessageUtils.smart_reply(event, MESSAGES['error'])
    
    async def handle_stats(self, event):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /stats"""
        try:
            user_id = event.sender_id
            user = await event.get_sender()
            
            # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏–∑ –ë–î
            user_data = await self.db_manager.get_user(user_id)
            if not user_data:
                await MessageUtils.smart_reply(event, "‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É–π /start")
                return
            
            # –ü–æ–ª—É—á–∞–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            stats = await self.db_manager.get_user_stats(user_id)
            
            stats_text = MESSAGES['stats_basic'].format(
                username=getattr(user, 'username', 'Anonymous'),
                mode=user_data.get('mode', 'bot'),
                join_date=format_timespan(user_data.get('created_at')),
                last_active=format_timespan(user_data.get('last_active')),
                total_commands=stats.get('total_commands', 0),
                favorite_command=stats.get('favorite_command', 'scan'),
                status=user_data.get('status', 'active')
            )
            
            await MessageUtils.smart_reply(event, stats_text)
            await self.log_command_usage(user_id, 'stats')
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ /stats: {e}")
            await MessageUtils.smart_reply(event, MESSAGES['error'])
    
    async def handle_faq(self, event):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /faq"""
        faq_text = """ü§î **–ß–ê–°–¢–´–ï –í–û–ü–†–û–°–´**

**Q: –ó–∞—á–µ–º –Ω—É–∂–Ω—ã API_ID –∏ API_HASH?**
A: –î–ª—è —Ä–µ–∂–∏–º–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, —á—Ç–æ–±—ã –≤–∏–¥–µ—Ç—å –≤—Å–µ –≥—Ä—É–ø–ø—ã –∏ –ø–æ–ª—É—á–∞—Ç—å –±–æ–ª—å—à–µ –¥–∞–Ω–Ω—ã—Ö.

**Q: –ë–µ–∑–æ–ø–∞—Å–Ω–æ –ª–∏ –¥–∞–≤–∞—Ç—å API –∫–ª—é—á–∏?**
A: –î–∞! –û–Ω–∏ —à–∏—Ñ—Ä—É—é—Ç—Å—è –∏ —Ö—Ä–∞–Ω—è—Ç—Å—è –±–µ–∑–æ–ø–∞—Å–Ω–æ. –ú–æ–∂–µ—à—å –ø–æ–º–µ–Ω—è—Ç—å –≤ –ª—é–±–æ–π –º–æ–º–µ–Ω—Ç.

**Q: –ü–æ—á–µ–º—É –±–æ—Ç –Ω–µ –≤–∏–¥–∏—Ç –º–æ—é –≥—Ä—É–ø–ø—É?**
A: –°–¥–µ–ª–∞–π –º–µ–Ω—è –∞–¥–º–∏–Ω–æ–º —Å –ø–æ–ª–Ω—ã–º–∏ –ø—Ä–∞–≤–∞–º–∏ –≤ —Å—É–ø–µ—Ä–≥—Ä—É–ø–ø–µ.

**Q: –†–∞–±–æ—Ç–∞–µ—Ç –ª–∏ —Å –ø—Ä–∏–≤–∞—Ç–Ω—ã–º–∏ –≥—Ä—É–ø–ø–∞–º–∏?**
A: –í —Ä–µ–∂–∏–º–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è - –¥–∞, –≤ —Ä–µ–∂–∏–º–µ –±–æ—Ç–∞ - —Ç–æ–ª—å–∫–æ –ø—É–±–ª–∏—á–Ω—ã–µ.

**Q: –ö–∞–∫ —Å–≤—è–∑–∞—Ç—å—Å—è —Å —Å–æ–∑–¥–∞—Ç–µ–ª–µ–º?**
A: –ò—Å–ø–æ–ª—å–∑—É–π /yo_bro –¥–ª—è –ø—Ä—è–º–æ–π —Å–≤—è–∑–∏!

–ï—â–µ –≤–æ–ø—Ä–æ—Å—ã? –ü–∏—à–∏ /yo_bro! üòä"""
        
        await MessageUtils.smart_reply(event, faq_text)
        await self.log_command_usage(event.sender_id, 'faq')
    
    # === –ö–û–ú–ê–ù–î–´ –°–ö–ê–ù–ò–†–û–í–ê–ù–ò–Ø ===
    
    async def handle_scan(self, event):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–æ–ø–∏–∫–æ–≤"""
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –≤ –≥—Ä—É–ø–ø–µ
            if is_group_message(event):
                # –í –≥—Ä—É–ø–ø–µ —Ä–∞–±–æ—Ç–∞–µ–º —Ç–æ–ª—å–∫–æ —Å —É–ø–æ–º–∏–Ω–∞–Ω–∏–µ–º
                if '@misterdms_topic_id_get_bot' not in event.text:
                    return  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –∫–æ–º–∞–Ω–¥—ã –±–µ–∑ —É–ø–æ–º–∏–Ω–∞–Ω–∏—è
                
                chat = await event.get_chat()
                if not await self.check_admin_rights(chat.id):
                    await MessageUtils.smart_reply(event, MESSAGES['not_admin'])
                    return
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
            progress_msg = await MessageUtils.smart_reply(event, MESSAGES['scanning_in_progress'])
            
            # –í—ã–ø–æ–ª–Ω—è–µ–º —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ
            user_id = event.sender_id
            chat_id = event.chat_id if is_group_message(event) else None
            
            if not chat_id and is_group_message(event):
                chat_id = event.chat_id
            
            # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
            user_data = await self.db_manager.get_user(user_id)
            mode = user_data.get('mode', 'bot') if user_data else 'bot'
            
            # –°–∫–∞–Ω–∏—Ä—É–µ–º —Ç–æ–ø–∏–∫–∏
            result = await self.topic_scanner.scan_topics(chat_id, user_id, mode)
            
            if result['success']:
                # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
                topics = result['data']['topics']
                
                if not topics:
                    response = "ü§∑‚Äç‚ôÇÔ∏è **–¢–æ–ø–∏–∫–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ**\n\n–í–æ–∑–º–æ–∂–Ω–æ –≥—Ä—É–ø–ø–∞ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç —Ç–æ–ø–∏–∫–∏."
                else:
                    response = f"üìã **–ù–ê–ô–î–ï–ù–û –¢–û–ü–ò–ö–û–í: {len(topics)}**\n\n"
                    
                    for topic in topics[:10]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 10
                        response += f"üìå **{topic['title']}**\n"
                        response += f"   ID: `{topic['id']}`\n"
                        response += f"   –°–æ–æ–±—â–µ–Ω–∏–π: {topic.get('message_count', 0)}\n\n"
                    
                    if len(topics) > 10:
                        response += f"... –∏ –µ—â–µ {len(topics) - 10} —Ç–æ–ø–∏–∫–æ–≤\n\n"
                    
                    response += "–ò—Å–ø–æ–ª—å–∑—É–π /get_all –¥–ª—è –ø–æ–ª–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏!"
                
                # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
                await progress_msg.edit(response)
            else:
                await progress_msg.edit(f"‚ùå –û—à–∏–±–∫–∞ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è: {result.get('error', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')}")
            
            await self.log_command_usage(user_id, 'scan')
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ /scan: {e}")
            await MessageUtils.smart_reply(event, MESSAGES['error'])
    
    # === –ö–û–ú–ê–ù–î–´ –°–í–Ø–ó–ò v4.1 ===
    
    async def handle_yo_bro(self, event):
        """–ö–æ–º–∞–Ω–¥–∞ —Å–≤—è–∑–∏ —Å —Å–æ–∑–¥–∞—Ç–µ–ª–µ–º"""
        try:
            await MessageUtils.smart_reply(event, MESSAGES['yo_bro'])
            
            # –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–∞
            await self.notify_admin(
                f"üëã **–ù–æ–≤–æ–µ –æ–±—Ä–∞—â–µ–Ω–∏–µ**\n\n"
                f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {event.sender_id}\n"
                f"Username: @{getattr(await event.get_sender(), 'username', 'None')}\n"
                f"–ö–æ–º–∞–Ω–¥–∞: /yo_bro\n"
                f"–í—Ä–µ–º—è: {datetime.now().strftime('%d.%m.%Y %H:%M')}"
            )
            
            await self.log_command_usage(event.sender_id, 'yo_bro')
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ /yo_bro: {e}")
            await MessageUtils.smart_reply(event, MESSAGES['error'])
    
    async def handle_buy_bots(self, event):
        """–ö–æ–º–∞–Ω–¥–∞ –∑–∞–∫–∞–∑–∞ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ –±–æ—Ç–æ–≤"""
        try:
            await MessageUtils.smart_reply(event, MESSAGES['buy_bots'])
            
            # –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–∞ –æ –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–æ–º –∑–∞–∫–∞–∑–µ
            await self.notify_admin(
                f"üíº **–ü–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–π –∑–∞–∫–∞–∑!**\n\n"
                f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {event.sender_id}\n"
                f"Username: @{getattr(await event.get_sender(), 'username', 'None')}\n"
                f"–ö–æ–º–∞–Ω–¥–∞: /buy_bots\n"
                f"–í—Ä–µ–º—è: {datetime.now().strftime('%d.%m.%Y %H:%M')}"
            )
            
            await self.log_command_usage(event.sender_id, 'buy_bots')
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ /buy_bots: {e}")
            await MessageUtils.smart_reply(event, MESSAGES['error'])
    
    async def handle_donate(self, event):
        """–ö–æ–º–∞–Ω–¥–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –ø—Ä–æ–µ–∫—Ç–∞"""
        try:
            await MessageUtils.smart_reply(event, MESSAGES['donate'])
            
            # –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–∞
            await self.notify_admin(
                f"üíù **–ò–Ω—Ç–µ—Ä–µ—Å –∫ –¥–æ–Ω–∞—Ç–∞–º**\n\n"
                f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {event.sender_id}\n"
                f"Username: @{getattr(await event.get_sender(), 'username', 'None')}\n"
                f"–í—Ä–µ–º—è: {datetime.now().strftime('%d.%m.%Y %H:%M')}"
            )
            
            await self.log_command_usage(event.sender_id, 'donate')
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ /donate: {e}")
            await MessageUtils.smart_reply(event, MESSAGES['error'])
    
    # === CALLBACK –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò ===
    
    async def handle_callback(self, event):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏"""
        try:
            data = event.data.decode('utf-8')
            user_id = event.sender_id
            
            if data == 'mode_bot':
                await self.set_bot_mode(event, user_id)
            elif data == 'mode_user':
                await self.set_user_mode(event, user_id)
            elif data == 'help':
                await self.show_help_menu(event)
            elif data == 'stats':
                await self.show_stats(event, user_id)
            elif data == 'yo_bro':
                await event.answer()
                await self.handle_yo_bro(event)
            elif data == 'buy_bots':
                await event.answer()
                await self.handle_buy_bots(event)
            elif data == 'main_menu':
                await self.show_main_menu(event)
            else:
                await event.answer("üîß –§—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ!")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ callback: {e}")
            await event.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")
    
    # === –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –ú–ï–¢–û–î–´ ===
    
    def create_inline_keyboard(self, keyboard_name: str):
        """–°–æ–∑–¥–∞–Ω–∏–µ inline –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã"""
        if keyboard_name not in INLINE_KEYBOARDS:
            return None
        
        buttons = []
        for row in INLINE_KEYBOARDS[keyboard_name]:
            button_row = []
            for text, data in row:
                button_row.append(Button.inline(text, data))
            buttons.append(button_row)
        
        return buttons
    
    async def set_bot_mode(self, event, user_id):
        """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ä–µ–∂–∏–º–∞ –±–æ—Ç–∞"""
        await self.db_manager.update_user_mode(user_id, 'bot')
        
        buttons = self.create_inline_keyboard('bot_mode_menu')
        await event.edit(MESSAGES['bot_mode_selected'], buttons=buttons)
    
    async def set_user_mode(self, event, user_id):
        """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ä–µ–∂–∏–º–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        await self.db_manager.update_user_mode(user_id, 'user')
        await event.edit(MESSAGES['user_mode_setup'])
    
    async def show_main_menu(self, event):
        """–ü–æ–∫–∞–∑ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é"""
        buttons = self.create_inline_keyboard('main_menu')
        await event.edit(MESSAGES['welcome'], buttons=buttons)
    
    async def notify_admin(self, message: str):
        """–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
        try:
            if ADMIN_USER_ID:
                await self.bot_client.send_message(ADMIN_USER_ID, message)
        except Exception as e:
            logger.debug(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É: {e}")
    
    async def log_command_usage(self, user_id: int, command: str):
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –∫–æ–º–∞–Ω–¥"""
        try:
            await self.db_manager.log_command_usage(user_id, command)
        except Exception as e:
            logger.debug(f"–û—à–∏–±–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã: {e}")
    
    async def check_admin_rights(self, chat_id: int) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω—ã—Ö –ø—Ä–∞–≤ –±–æ—Ç–∞"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–æ—Ç–µ –≤ —á–∞—Ç–µ
            me = await self.bot_client.get_me()
            member = await self.bot_client.get_permissions(chat_id, me.id)
            
            return member.is_admin
        except:
            return False
    
    def is_credentials_message(self, event) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ credentials"""
        if is_group_message(event):
            return False
        
        text = event.text.strip()
        return ('API_ID:' in text and 'API_HASH:' in text) or \
               ('api_id' in text.lower() and 'api_hash' in text.lower())
    
    async def process_credentials(self, event):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö credentials"""
        try:
            text = event.text.strip()
            user_id = event.sender_id
            
            # –ü–∞—Ä—Å–∏–º credentials
            lines = text.split('\n')
            api_id = None
            api_hash = None
            group_link = None
            
            for line in lines:
                line = line.strip()
                if 'api_id' in line.lower():
                    api_id = line.split(':')[-1].strip()
                elif 'api_hash' in line.lower():
                    api_hash = line.split(':')[-1].strip()
                elif any(x in line.lower() for x in ['–≥—Ä—É–ø–ø–∞', 'group', 'http', 't.me']):
                    group_link = line
            
            if not api_id or not api_hash:
                await MessageUtils.smart_reply(
                    event,
                    "‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç! –ü—Ä–∏–º–µ—Ä:\n\n"
                    "API_ID: 12345678\n"
                    "API_HASH: abcdef123456\n"
                    "–ì–†–£–ü–ü–ê: https://t.me/your_group"
                )
                return
            
            # –í–∞–ª–∏–¥–∞—Ü–∏—è API credentials
            if not ValidationUtils.validate_api_credentials(api_id, api_hash):
                await MessageUtils.smart_reply(event, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–µ API credentials!")
                return
            
            # –®–∏—Ñ—Ä—É–µ–º –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º
            encrypted_id = EncryptionUtils.encrypt(api_id)
            encrypted_hash = EncryptionUtils.encrypt(api_hash)
            
            await self.db_manager.save_user_credentials(
                user_id, encrypted_id, encrypted_hash, group_link
            )
            
            await MessageUtils.smart_reply(event, MESSAGES['credentials_saved'])
            await self.log_command_usage(user_id, 'credentials_saved')
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ credentials: {e}")
            await MessageUtils.smart_reply(event, MESSAGES['error'])
    
    async def shutdown(self):
        """–ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã"""
        try:
            if self.bot_client:
                await self.bot_client.disconnect()
            logger.info("‚úÖ –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω—ã")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤: {e}")

    # –ó–∞–≥–ª—É—à–∫–∏ –¥–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –º–µ—Ç–æ–¥–æ–≤ (–±—É–¥—É—Ç —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω—ã –ø–æ–∑–∂–µ)
    async def handle_get_all(self, event): 
        await MessageUtils.smart_reply(event, "üîß –ö–æ–º–∞–Ω–¥–∞ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ!")
    
    async def handle_get_users(self, event): 
        await MessageUtils.smart_reply(event, "üîß –ö–æ–º–∞–Ω–¥–∞ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ!")
    
    async def handle_get_ids(self, event): 
        await MessageUtils.smart_reply(event, "üîß –ö–æ–º–∞–Ω–¥–∞ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ!")
    
    async def handle_switch_mode(self, event): 
        await MessageUtils.smart_reply(event, "üîß –ö–æ–º–∞–Ω–¥–∞ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ!")
    
    async def handle_my_status(self, event): 
        await MessageUtils.smart_reply(event, "üîß –ö–æ–º–∞–Ω–¥–∞ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ!")
    
    async def handle_logout(self, event): 
        await MessageUtils.smart_reply(event, "üîß –ö–æ–º–∞–Ω–¥–∞ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ!")
    
    async def handle_renew_credentials(self, event): 
        await MessageUtils.smart_reply(event, "üîß –ö–æ–º–∞–Ω–¥–∞ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ!")
    
    async def handle_debug(self, event): 
        await MessageUtils.smart_reply(event, "üîß –ö–æ–º–∞–Ω–¥–∞ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ!")
    
    async def handle_health(self, event): 
        await MessageUtils.smart_reply(event, "üîß –ö–æ–º–∞–Ω–¥–∞ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ!")
    
    async def show_help_menu(self, event): 
        await event.answer("üîß –í —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ!")
    
    async def show_stats(self, event, user_id): 
        await event.answer("üîß –í —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ!")