#!/usr/bin/env python3
"""
Topics Scanner Bot v5.16 - –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
–ü—Ä–æ—Å—Ç—ã–µ –∏ –Ω–∞–¥–µ–∂–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –≤—Å–µ—Ö –∫–æ–º–∞–Ω–¥
"""

import logging
from telethon import events
from telethon.tl.types import Channel

from config import MESSAGES, BUTTONS
from database import db
from scanner import scanner
from utils import (
    create_inline_buttons, send_long_message, format_topics_list,
    validate_api_credentials, is_private_chat, is_group_chat, 
    format_error_message
)

logger = logging.getLogger(__name__)

class BotHandlers:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ –±–æ—Ç–∞"""
    
    def __init__(self, bot_client):
        self.bot = bot_client
        self.setup_handlers()
    
    def setup_handlers(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≤—Å–µ—Ö –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤"""
        
        # === –ö–û–ú–ê–ù–î–´ ===
        @self.bot.on(events.NewMessage(pattern='/start'))
        async def handle_start(event):
            """–ö–æ–º–∞–Ω–¥–∞ /start"""
            try:
                if is_private_chat(event):
                    # –í –õ–° –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ —Ä–µ–∂–∏–º–∞
                    await self._show_main_menu(event)
                else:
                    # –í –≥—Ä—É–ø–ø–∞—Ö –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫—Ä–∞—Ç–∫—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
                    await event.reply(
                        "ü§ñ **Topics Scanner Bot v5.16**\n\n"
                        "–ö–æ–º–∞–Ω–¥—ã:\n"
                        "‚Ä¢ /find_ids - —Å–∫–∞–Ω–∏—Ä–æ–≤–∞—Ç—å —Ç–æ–ø–∏–∫–∏\n"
                        "‚Ä¢ /start - –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ (–≤ –õ–°)"
                    )
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ /start: {e}")
                await event.reply(format_error_message(e))
        
        @self.bot.on(events.NewMessage(pattern='/find_ids'))
        async def handle_find_ids(event):
            """–ö–æ–º–∞–Ω–¥–∞ /find_ids - —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–æ–ø–∏–∫–æ–≤"""
            try:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–æ–º–∞–Ω–¥–∞ –≤ –≥—Ä—É–ø–ø–µ
                if is_private_chat(event):
                    await event.reply(MESSAGES['find_ids_group_only'])
                    return
                
                # –ü–æ–ª—É—á–∞–µ–º —á–∞—Ç
                chat = await event.get_chat()
                if not isinstance(chat, Channel) or not chat.megagroup:
                    await event.reply("‚ö†Ô∏è **–ö–æ–º–∞–Ω–¥–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –≤ —Å—É–ø–µ—Ä–≥—Ä—É–ø–ø–∞—Ö!**")
                    return
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
                status_msg = await event.reply(MESSAGES['scanning_topics'])
                
                try:
                    # –°–∫–∞–Ω–∏—Ä—É–µ–º —Ç–æ–ø–∏–∫–∏
                    topics = await scanner.scan_topics(event.sender_id, self.bot, chat)
                    
                    if topics:
                        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
                        result_text = format_topics_list(topics)
                        await status_msg.delete()
                        await send_long_message(event, result_text)
                    else:
                        await status_msg.edit(MESSAGES['no_topics_found'])
                
                except Exception as scan_error:
                    await status_msg.edit(MESSAGES['error_occurred'].format(
                        error=format_error_message(scan_error)
                    ))
            
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ /find_ids: {e}")
                await event.reply(format_error_message(e))
        
        # === CALLBACK –ö–ù–û–ü–ö–ò ===
        @self.bot.on(events.CallbackQuery)
        async def handle_callback(event):
            """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏"""
            try:
                data = event.data.decode('utf-8')
                user_id = event.sender_id
                
                logger.info(f"üîò Callback {data} –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
                
                if data == 'main_menu':
                    await self._show_main_menu(event, edit=True)
                
                elif data == 'bot_api':
                    await self._set_bot_api_mode(event, user_id)
                
                elif data == 'user_api':
                    await self._set_user_api_mode(event, user_id)
                
                elif data == 'change_mode':
                    await self._show_main_menu(event, edit=True)
                
                elif data == 'help':
                    await self._show_help(event)
                
                else:
                    await event.answer("‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞")
            
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ callback: {e}")
                await event.answer(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")
        
        # === –û–ë–†–ê–ë–û–¢–ö–ê CREDENTIALS ===
        @self.bot.on(events.NewMessage)
        async def handle_credentials(event):
            """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ API credentials"""
            try:
                # –¢–æ–ª—å–∫–æ –≤ –õ–° –∏ —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
                if not is_private_chat(event) or not event.text:
                    return
                
                # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∫–æ–º–∞–Ω–¥—ã
                if event.text.startswith('/'):
                    return
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –æ–∂–∏–¥–∞–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–≤–æ–¥ credentials
                user = await db.get_user(event.sender_id)
                if not user or user.get('api_mode') != 'waiting_credentials':
                    return
                
                # –í–∞–ª–∏–¥–∏—Ä—É–µ–º credentials
                api_id, api_hash, message = validate_api_credentials(event.text)
                
                if api_id and api_hash:
                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º credentials
                    success = await db.save_user_credentials(event.sender_id, api_id, api_hash)
                    
                    if success:
                        await event.reply(MESSAGES['user_api_saved'])
                    else:
                        await event.reply("‚ùå **–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è**\n\n–ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑")
                else:
                    await event.reply(f"‚ùå **–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç**\n\n{message}")
            
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ credentials: {e}")
    
    async def _show_main_menu(self, event, edit=False):
        """–ü–æ–∫–∞–∑–∞—Ç—å –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
        try:
            buttons = create_inline_buttons(BUTTONS['main_menu'])
            
            if edit and hasattr(event, 'edit'):
                await event.edit(MESSAGES['welcome'], buttons=buttons, parse_mode='markdown')
            else:
                await event.reply(MESSAGES['welcome'], buttons=buttons, parse_mode='markdown')
        
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é: {e}")
    
    async def _set_bot_api_mode(self, event, user_id: int):
        """–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ä–µ–∂–∏–º Bot API"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
            sender = event.sender
            username = getattr(sender, 'username', None)
            first_name = getattr(sender, 'first_name', None)
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Ä–µ–∂–∏–º–µ bot
            await db.save_user(user_id, username, first_name, 'bot')
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫
            buttons = create_inline_buttons(BUTTONS['settings_menu'])
            
            await event.edit(
                MESSAGES['bot_api_selected'], 
                buttons=buttons, 
                parse_mode='markdown'
            )
        
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ Bot API –¥–ª—è {user_id}: {e}")
            await event.answer("‚ùå –û—à–∏–±–∫–∞")
    
    async def _set_user_api_mode(self, event, user_id: int):
        """–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ä–µ–∂–∏–º User API"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
            sender = event.sender
            username = getattr(sender, 'username', None)
            first_name = getattr(sender, 'first_name', None)
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Ä–µ–∂–∏–º–µ –æ–∂–∏–¥–∞–Ω–∏—è credentials
            await db.save_user(user_id, username, first_name, 'waiting_credentials')
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏
            buttons = create_inline_buttons(BUTTONS['back_to_main'])
            
            await event.edit(
                MESSAGES['user_api_setup'], 
                buttons=buttons, 
                parse_mode='markdown'
            )
        
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ User API –¥–ª—è {user_id}: {e}")
            await event.answer("‚ùå –û—à–∏–±–∫–∞")
    
    async def _show_help(self, event):
        """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø—Ä–∞–≤–∫—É"""
        try:
            help_text = """üìã **–°–ø—Ä–∞–≤–∫–∞ –ø–æ Topics Scanner Bot v5.16**

ü§ñ **Bot API —Ä–µ–∂–∏–º:**
‚Ä¢ –ë—ã—Å—Ç—Ä–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞
‚Ä¢ –û–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏
‚Ä¢ –ú–æ–∂–µ—Ç –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å –Ω–µ –≤—Å–µ —Ç–æ–ø–∏–∫–∏

üë§ **User API —Ä–µ–∂–∏–º:**
‚Ä¢ –¢—Ä–µ–±—É–µ—Ç API credentials
‚Ä¢ –ü–æ–ª–Ω—ã–π –¥–æ—Å—Ç—É–ø –∫ —Ç–æ–ø–∏–∫–∞–º
‚Ä¢ –ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–∞ https://my.telegram.org

üìù **–ö–æ–º–∞–Ω–¥—ã:**
‚Ä¢ /start - –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ (–≤ –õ–°)
‚Ä¢ /find_ids - —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–æ–ø–∏–∫–æ–≤ (–≤ –≥—Ä—É–ø–ø–µ)

‚ö†Ô∏è **–í–∞–∂–Ω–æ:**
‚Ä¢ –ö–æ–º–∞–Ω–¥–∞ /find_ids —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –≤ —Å—É–ø–µ—Ä–≥—Ä—É–ø–ø–∞—Ö-—Ñ–æ—Ä—É–º–∞—Ö
‚Ä¢ –î–ª—è User API –Ω—É–∂–Ω—ã –≤–∞—à–∏ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–µ API –¥–∞–Ω–Ω—ã–µ
‚Ä¢ Bot API –º–æ–∂–µ—Ç –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å –Ω–µ –≤—Å–µ —Ç–æ–ø–∏–∫–∏ –∏–∑-–∑–∞ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π Telegram"""
            
            buttons = create_inline_buttons(BUTTONS['back_to_main'])
            
            await event.edit(help_text, buttons=buttons, parse_mode='markdown')
        
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ —Å–ø—Ä–∞–≤–∫–∏: {e}")
