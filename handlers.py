#!/usr/bin/env python3
"""
–û–±—ä–µ–¥–∏–Ω–µ–Ω–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ –¥–ª—è –≥–∏–±—Ä–∏–¥–Ω–æ–≥–æ Topics Scanner Bot
–°–æ–¥–µ—Ä–∂–∏—Ç –ª–æ–≥–∏–∫—É –¥–ª—è —Ä–µ–∂–∏–º–∞ –±–æ—Ç–∞ –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ —Ä–µ–∂–∏–º–∞
–ò–°–ü–†–ê–í–õ–ï–ù–û: –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –∏–º–ø–æ—Ä—Ç TopicScannerFactory –∏–∑ utils, –¥–æ–±–∞–≤–ª–µ–Ω–∞ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å security/analytics
"""

import logging
import asyncio
from datetime import datetime
from typing import Optional, List, Dict, Any
from telethon import TelegramClient
from telethon.tl.types import Channel
from telethon.tl.functions.channels import GetFullChannelRequest, GetForumTopicsRequest
from telethon.tl.functions.messages import GetHistoryRequest
from telethon.errors import ChatAdminRequiredError, ChannelPrivateError

from config import API_LIMITS, MESSAGES, BOT_MODES
from database import db_manager
from utils import TopicScannerFactory, send_long_message, format_topics_table  # –ò–°–ü–†–ê–í–õ–ï–ù –ò–ú–ü–û–†–¢

logger = logging.getLogger(__name__)

class CommandHandler:
    """–ï–¥–∏–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –¥–≤—É—Ö —Ä–µ–∂–∏–º–æ–≤"""
    
    def __init__(self):
        self.bot_mode = BotModeHandler()
        self.user_mode = UserModeHandler()
        self.auth_manager = None
        self.api_limiter = None
        self.activity_tracker = None
        
    async def initialize(self, bot_client: TelegramClient, auth_manager, api_limiter, activity_tracker):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞"""
        self.auth_manager = auth_manager
        self.api_limiter = api_limiter
        self.activity_tracker = activity_tracker
        
        await self.bot_mode.initialize(bot_client, api_limiter)
        await self.user_mode.initialize(auth_manager, api_limiter)
        
        logger.info("‚úÖ CommandHandler –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
    
    async def route_command(self, command: str, event, user_mode: str = 'bot') -> bool:
        """–ú–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏—è –∫–æ–º–∞–Ω–¥—ã –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–µ–∂–∏–º–∞"""
        try:
            if user_mode == 'user':
                return await self.user_mode.handle_command(command, event)
            else:
                return await self.bot_mode.handle_command(command, event)
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏–∏ –∫–æ–º–∞–Ω–¥—ã {command}: {e}")
            await event.reply(MESSAGES['error_general'].format(error_message=str(e)))
            return False
    
    async def handle_start(self, event, user_mode: str = 'bot') -> bool:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start"""
        if user_mode == 'user':
            return await self.user_mode.handle_start(event)
        else:
            return await self.bot_mode.handle_start(event)

class BaseModeHandler:
    """–ë–∞–∑–æ–≤—ã–π –∫–ª–∞—Å—Å –¥–ª—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Ä–µ–∂–∏–º–æ–≤"""
    
    def __init__(self):
        self.client: Optional[TelegramClient] = None
        self.api_limiter = None
        
    async def _validate_group_chat(self, event) -> tuple[bool, Optional[Channel]]:
        """–í–∞–ª–∏–¥–∞—Ü–∏—è –≥—Ä—É–ø–ø–æ–≤–æ–≥–æ —á–∞—Ç–∞"""
        if event.is_private:
            await event.reply("‚ö†Ô∏è **–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –≤ —Å—É–ø–µ—Ä–≥—Ä—É–ø–ø–∞—Ö!**")
            return False, None
        
        chat = await event.get_chat()
        if not isinstance(chat, Channel) or not chat.megagroup:
            await event.reply("‚ö†Ô∏è **–†–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –≤ —Å—É–ø–µ—Ä–≥—Ä—É–ø–ø–∞—Ö!**")
            return False, None
            
        return True, chat
    
    async def _get_participants_count(self, chat) -> int:
        """–ü–æ–ª—É—á–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤"""
        try:
            if hasattr(chat, 'participants_count') and chat.participants_count:
                return chat.participants_count
            
            try:
                full_channel = await self.client(GetFullChannelRequest(chat))
                if hasattr(full_channel, 'full_chat'):
                    return full_channel.full_chat.participants_count
            except:
                pass
            
            return 0
            
        except Exception as e:
            logger.debug(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {e}")
            return 0
    
    async def _auto_adjust_limits(self, event, participants_count: int, request_type: str):
        """–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –ª–∏–º–∏—Ç–æ–≤"""
        try:
            if not self.api_limiter.auto_mode_enabled or participants_count <= 0:
                return
            
            complexity = 'heavy' if request_type in ['get_all', 'full_scan'] else 'normal'
            mode_changed = self.api_limiter.auto_adjust_mode(participants_count, complexity)
            
            if mode_changed and participants_count > 200:
                mode_name = self.api_limiter.get_status()['mode_name']
                warning_msg = (
                    f"üîß **–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –ª–∏–º–∏—Ç–æ–≤**\n\n"
                    f"üìä –£—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –≤ –≥—Ä—É–ø–ø–µ: {participants_count}\n"
                    f"üîß –ù–æ–≤—ã–π —Ä–µ–∂–∏–º: {mode_name}\n\n"
                    "–≠—Ç–æ –æ–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç —Å—Ç–∞–±–∏–ª—å–Ω—É—é —Ä–∞–±–æ—Ç—É. –ù–µ–º–Ω–æ–≥–æ –ø–æ–¥–æ–∂–¥–∏—Ç–µ! üôè"
                )
                await event.reply(warning_msg, parse_mode='markdown')
                await asyncio.sleep(2)
                
        except Exception as e:
            logger.debug(f"–û—à–∏–±–∫–∞ –∞–≤—Ç–æ–ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –ª–∏–º–∏—Ç–æ–≤: {e}")

class BotModeHandler(BaseModeHandler):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥ –≤ —Ä–µ–∂–∏–º–µ –±–æ—Ç–∞ (–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω—ã–π)"""
    
    async def initialize(self, client: TelegramClient, api_limiter):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ —Ä–µ–∂–∏–º–∞ –±–æ—Ç–∞"""
        self.client = client
        self.api_limiter = api_limiter
        logger.info("‚úÖ BotModeHandler –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
    
    async def handle_command(self, command: str, event) -> bool:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã –≤ —Ä–µ–∂–∏–º–µ –±–æ—Ç–∞"""
        try:
            if command == 'scan':
                return await self.handle_scan(event)
            elif command == 'get_all':
                return await self.handle_get_all(event)
            elif command == 'get_users':
                return await self.handle_get_users(event)
            elif command == 'get_ids':
                return await self.handle_get_ids(event)
            else:
                logger.warning(f"‚ö†Ô∏è –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞: {command}")
                return False
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–∞–Ω–¥—ã {command}: {e}")
            await event.reply(MESSAGES['error_general'].format(error_message=str(e)))
            return False
    
    async def handle_start(self, event) -> bool:
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ /start –≤ —Ä–µ–∂–∏–º–µ –±–æ—Ç–∞"""
        try:
            start_time = datetime.now()
            user_id = event.sender_id
            
            logger.info(f"ü§ñ /start (bot mode) –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–∏–º–∏—Ç–æ–≤
            if not self.api_limiter.can_make_request():
                await event.reply("‚ö†Ô∏è **–ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤**\n\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ")
                return False
            
            self.api_limiter.record_request()
            
            # –í–∞–ª–∏–¥–∞—Ü–∏—è —á–∞—Ç–∞
            is_valid, chat = await self._validate_group_chat(event)
            if not is_valid:
                return False
            
            # –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —á–∞—Ç–µ
            participants_count = await self._get_participants_count(chat)
            await self._auto_adjust_limits(event, participants_count, 'full_scan')
            
            # –°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–æ–ø–∏–∫–æ–≤
            scanner = TopicScannerFactory.create_scanner(self.client, 'bot')
            topics_data = await scanner.scan_topics(chat)
            
            # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞
            response = self._build_start_response(chat, participants_count, topics_data, start_time)
            
            await send_long_message(event, response)
            
            duration = (datetime.now() - start_time).total_seconds()
            logger.info(f"‚ö° /start (bot mode) –≤—ã–ø–æ–ª–Ω–µ–Ω –∑–∞ {duration:.2f}—Å")
            
            return True
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ handle_start (bot mode): {e}")
            await event.reply(MESSAGES['error_general'].format(error_message=str(e)))
            return False
    
    async def handle_scan(self, event) -> bool:
        """–°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–æ–ø–∏–∫–æ–≤ –≤ —Ä–µ–∂–∏–º–µ –±–æ—Ç–∞"""
        try:
            logger.info(f"ü§ñ /scan (bot mode) –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {event.sender_id}")
            
            if not self.api_limiter.can_make_request():
                await event.reply("‚ö†Ô∏è **–ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤**")
                return False
            
            self.api_limiter.record_request()
            
            is_valid, chat = await self._validate_group_chat(event)
            if not is_valid:
                return False
            
            participants_count = await self._get_participants_count(chat)
            await self._auto_adjust_limits(event, participants_count, 'scan')
            
            scanner = TopicScannerFactory.create_scanner(self.client, 'bot')
            topics_data = await scanner.scan_topics(chat)
            
            response = self._build_scan_response(chat, participants_count, topics_data)
            await send_long_message(event, response)
            
            return True
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ handle_scan (bot mode): {e}")
            await event.reply(MESSAGES['error_general'].format(error_message=str(e)))
            return False
    
    async def handle_get_all(self, event) -> bool:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö –≤ —Ä–µ–∂–∏–º–µ –±–æ—Ç–∞"""
        try:
            logger.info(f"ü§ñ /get_all (bot mode) –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {event.sender_id}")
            
            if not self.api_limiter.can_make_request():
                await event.reply("‚ö†Ô∏è **–ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤**")
                return False
            
            self.api_limiter.record_request()
            
            is_valid, chat = await self._validate_group_chat(event)
            if not is_valid:
                return False
            
            processing_msg = await event.reply("üîÑ **–ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö (—Ä–µ–∂–∏–º –±–æ—Ç–∞)...**")
            
            # –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
            scanner = TopicScannerFactory.create_scanner(self.client, 'bot')
            topics_data = await scanner.scan_topics(chat)
            active_users = await db_manager.get_active_users(event.chat_id)
            activity_stats = await db_manager.get_activity_stats(event.chat_id)
            
            response = self._build_get_all_response(chat, topics_data, active_users, activity_stats)
            
            await processing_msg.delete()
            await send_long_message(event, response)
            
            return True
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ handle_get_all (bot mode): {e}")
            await event.reply(MESSAGES['error_general'].format(error_message=str(e)))
            return False
    
    async def handle_get_users(self, event) -> bool:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
        try:
            logger.info(f"ü§ñ /get_users (bot mode) –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {event.sender_id}")
            
            is_valid, _ = await self._validate_group_chat(event)
            if not is_valid:
                return False
            
            active_users = await db_manager.get_active_users(event.chat_id)
            activity_stats = await db_manager.get_activity_stats(event.chat_id)
            
            response = self._build_users_response(active_users, activity_stats)
            await send_long_message(event, response)
            
            return True
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ handle_get_users (bot mode): {e}")
            await event.reply(MESSAGES['error_general'].format(error_message=str(e)))
            return False
    
    async def handle_get_ids(self, event) -> bool:
        """–ü–æ–≤—Ç–æ—Ä–Ω–æ–µ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ ID"""
        try:
            logger.info(f"ü§ñ /get_ids (bot mode) –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {event.sender_id}")
            
            if not self.api_limiter.can_make_request():
                await event.reply("‚ö†Ô∏è **–ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤**")
                return False
            
            self.api_limiter.record_request()
            
            is_valid, chat = await self._validate_group_chat(event)
            if not is_valid:
                return False
            
            scanner = TopicScannerFactory.create_scanner(self.client, 'bot')
            topics_data = await scanner.scan_topics(chat)
            
            response = self._build_ids_response(chat, topics_data)
            await send_long_message(event, response)
            
            return True
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ handle_get_ids (bot mode): {e}")
            await event.reply(MESSAGES['error_general'].format(error_message=str(e)))
            return False
    
    def _build_start_response(self, chat, participants_count, topics_data, start_time) -> str:
        """–ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞ –¥–ª—è /start"""
        response = "ü§ñ **TOPICS SCANNER BOT - –†–ï–ñ–ò–ú –ë–û–¢–ê**\n\n"
        response += "‚ö†Ô∏è **–†–µ–∂–∏–º:** –û–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω—ã–π (Bot API)\n\n"
        
        response += f"üè¢ **–°—É–ø–µ—Ä–≥—Ä—É–ø–ø–∞:** {chat.title}\n"
        response += f"üÜî **ID –≥—Ä—É–ø–ø—ã:** `{chat.id}`\n"
        response += f"üë• **–£—á–∞—Å—Ç–Ω–∏–∫–æ–≤:** {participants_count if participants_count > 0 else '–æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç—Å—è...'}\n"
        response += f"üïí **–í—Ä–µ–º—è —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è:** {start_time.strftime('%d.%m.%Y %H:%M:%S')}\n\n"
        
        if topics_data:
            regular_topics = [t for t in topics_data if t['id'] > 0]
            system_topics = [t for t in topics_data if t['id'] <= 0]
            
            response += f"üìä **–ù–ê–ô–î–ï–ù–û –¢–û–ü–ò–ö–û–í: {len(regular_topics)}**\n"
            
            if system_topics:
                response += "‚ö†Ô∏è **–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ:** –ò–∑-–∑–∞ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π Bot API –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–æ–ø–∏–∫–∏ –º–æ–≥—É—Ç –±—ã—Ç—å –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã.\n\n"
            
            response += format_topics_table(regular_topics)
            
            if system_topics:
                response += "\n‚ÑπÔ∏è **–°–ò–°–¢–ï–ú–ù–ê–Ø –ò–ù–§–û–†–ú–ê–¶–ò–Ø:**\n"
                for topic in system_topics:
                    response += f"‚Ä¢ {topic['title']}\n"
                response += "\nüí° **–°–æ–≤–µ—Ç:** –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π —Ä–µ–∂–∏–º –¥–ª—è –ø–æ–ª–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞.\n\n"
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–º–∞–Ω–¥–∞—Ö
        response += "üìã **–ö–û–ú–ê–ù–î–´ (–†–ï–ñ–ò–ú –ë–û–¢–ê):**\n"
        response += "‚Ä¢ `/scan` - —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–æ–ø–∏–∫–æ–≤\n"
        response += "‚Ä¢ `/get_users` - –∞–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏\n" 
        response += "‚Ä¢ `/get_all` - –≤—Å–µ –¥–∞–Ω–Ω—ã–µ\n"
        response += "‚Ä¢ `/switch_mode` - –ø–µ—Ä–µ–∫–ª—é—á–∏—Ç—å –Ω–∞ user —Ä–µ–∂–∏–º\n"
        response += "‚Ä¢ `/help` - –ø–æ–¥—Ä–æ–±–Ω–∞—è —Å–ø—Ä–∞–≤–∫–∞\n\n"
        
        response += "üí° **–î–ª—è –ø–æ–ª–Ω–æ–≥–æ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–∞ –ø–µ—Ä–µ–∫–ª—é—á–∏—Ç–µ—Å—å –Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π —Ä–µ–∂–∏–º!**"
        
        return response
    
    def _build_scan_response(self, chat, participants_count, topics_data) -> str:
        """–ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞ –¥–ª—è /scan"""
        response = f"ü§ñ **–°–ö–ê–ù–ò–†–û–í–ê–ù–ò–ï –¢–û–ü–ò–ö–û–í (–†–ï–ñ–ò–ú –ë–û–¢–ê)**\n\n"
        response += f"üè¢ **–ì—Ä—É–ø–ø–∞:** {chat.title}\n"
        response += f"üë• **–£—á–∞—Å—Ç–Ω–∏–∫–æ–≤:** {participants_count}\n"
        response += f"üïí **–í—Ä–µ–º—è:** {datetime.now().strftime('%H:%M:%S')}\n\n"
        
        if topics_data:
            regular_topics = [t for t in topics_data if t['id'] > 0]
            response += f"üìä **–ù–ê–ô–î–ï–ù–û: {len(regular_topics)} —Ç–æ–ø–∏–∫–æ–≤**\n\n"
            response += format_topics_table(regular_topics)
            
            response += "\n‚ö†Ô∏è **–†–µ–∂–∏–º –±–æ—Ç–∞:** –ú–æ–≥—É—Ç –±—ã—Ç—å –ø–æ–∫–∞–∑–∞–Ω—ã –Ω–µ –≤—Å–µ —Ç–æ–ø–∏–∫–∏\n"
            response += "üí° **–°–æ–≤–µ—Ç:** –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ `/switch_mode` –¥–ª—è –ø–æ–ª–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞"
        else:
            response += "‚ùå **–¢–æ–ø–∏–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã**\n"
            response += "–í–æ–∑–º–æ–∂–Ω–æ, –≥—Ä—É–ø–ø–∞ –Ω–µ —è–≤–ª—è–µ—Ç—Å—è —Ñ–æ—Ä—É–º–æ–º –∏–ª–∏ —Ç–æ–ø–∏–∫–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã –¥–ª—è –±–æ—Ç–æ–≤."
        
        return response
    
    def _build_get_all_response(self, chat, topics_data, active_users, activity_stats) -> str:
        """–ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞ –¥–ª—è /get_all"""
        response = f"ü§ñ **–ü–û–õ–ù–´–ô –û–¢–ß–ï–¢ (–†–ï–ñ–ò–ú –ë–û–¢–ê)**\n\n"
        response += f"üè¢ **–ì—Ä—É–ø–ø–∞:** {chat.title}\n"
        response += f"üïí **–í—Ä–µ–º—è:** {datetime.now().strftime('%d.%m.%Y %H:%M:%S')}\n\n"
        
        # –°–µ–∫—Ü–∏—è —Ç–æ–ø–∏–∫–æ–≤
        regular_topics = [t for t in topics_data if t['id'] > 0]
        if regular_topics:
            response += f"üìã **–¢–û–ü–ò–ö–ò ({len(regular_topics)}):**\n\n"
            for topic in regular_topics:
                response += f"‚Ä¢ **{topic['title']}** (ID: {topic['id']})\n"
                response += f"  ‚îî –°–æ–∑–¥–∞—Ç–µ–ª—å: {topic['created_by']}\n"
                response += f"  ‚îî –°—Å—ã–ª–∫–∞: {topic['link']}\n"
            response += "\n"
        
        # –°–µ–∫—Ü–∏—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
        response += f"üë• **–ê–ö–¢–ò–í–ù–û–°–¢–¨ –ó–ê –°–ï–ì–û–î–ù–Ø:**\n"
        response += f"‚Ä¢ –í—Å–µ–≥–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö: {activity_stats['total_users']}\n"
        response += f"‚Ä¢ –í—Å–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–π: {activity_stats['total_messages']}\n\n"
        
        if active_users:
            top_users = sorted(active_users, key=lambda x: x['message_count'], reverse=True)[:10]
            response += "üèÜ **–¢–û–ü-10 –ê–ö–¢–ò–í–ù–´–•:**\n"
            response += "| ‚Ññ | Username | –°–æ–æ–±—â–µ–Ω–∏–π |\n"
            response += "|---|----------|----------|\n"
            
            for i, user in enumerate(top_users, 1):
                username = f"@{user['username']}" if user['username'] else (user['first_name'] or '–ë–µ–∑ –∏–º–µ–Ω–∏')
                username = username[:15] + "..." if len(username) > 15 else username
                response += f"| {i} | {username} | {user['message_count']} |\n"
            
            response += "\n"
        
        response += "‚ö†Ô∏è **–†–µ–∂–∏–º –±–æ—Ç–∞:** –û–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è\n"
        response += "üí° **–î–ª—è –ø–æ–ª–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö:** `/switch_mode` ‚Üí –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π —Ä–µ–∂–∏–º"
        
        return response
    
    def _build_users_response(self, active_users, activity_stats) -> str:
        """–ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞ –¥–ª—è /get_users"""
        response = f"ü§ñ **–ê–ö–¢–ò–í–ù–´–ï –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ò (–†–ï–ñ–ò–ú –ë–û–¢–ê)**\n\n"
        response += f"üìÖ **–ó–∞ —Å–µ–≥–æ–¥–Ω—è ({activity_stats['date']}):**\n"
        response += f"‚Ä¢ –í—Å–µ–≥–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö: {activity_stats['total_users']}\n"
        response += f"‚Ä¢ –í—Å–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–π: {activity_stats['total_messages']}\n\n"
        
        if active_users:
            response += "| Username | User ID | –°–æ–æ–±—â–µ–Ω–∏–π |\n"
            response += "|----------|---------|----------|\n"
            
            for user in active_users:
                username = f"@{user['username']}" if user['username'] else (user['first_name'] or '–ë–µ–∑ –∏–º–µ–Ω–∏')
                username = username[:20] + "..." if len(username) > 20 else username
                response += f"| {username} | `{user['user_id']}` | {user['message_count']} |\n"
            
            # –¢–æ–ø-5 –∞–∫—Ç–∏–≤–Ω—ã—Ö
            if len(active_users) > 1:
                top_users = sorted(active_users, key=lambda x: x['message_count'], reverse=True)[:5]
                response += "\nüèÜ **–¢–û–ü-5 –ê–ö–¢–ò–í–ù–´–•:**\n"
                for i, user in enumerate(top_users, 1):
                    username = f"@{user['username']}" if user['username'] else (user['first_name'] or '–ë–µ–∑ –∏–º–µ–Ω–∏')
                    response += f"{i}. {username} - {user['message_count']} —Å–æ–æ–±—â–µ–Ω–∏–π\n"
        else:
            response += "üò¥ **–ü–æ–∫–∞ –Ω–∏–∫—Ç–æ –Ω–µ –ø—Ä–æ—è–≤–∏–ª –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å —Å–µ–≥–æ–¥–Ω—è**\n"
        
        response += "\n‚ÑπÔ∏è **–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:**\n"
        response += "‚Ä¢ –î–∞–Ω–Ω—ã–µ –æ–±–Ω–æ–≤–ª—è—é—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏\n"
        response += "‚Ä¢ –°–±—Ä–æ—Å –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ 00:00\n"
        response += "‚Ä¢ –ö–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞ –Ω–µ —Å—á–∏—Ç–∞—é—Ç—Å—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å—é"
        
        return response
    
    def _build_ids_response(self, chat, topics_data) -> str:
        """–ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞ –¥–ª—è /get_ids"""
        response = f"ü§ñ **–ü–û–í–¢–û–†–ù–û–ï –°–ö–ê–ù–ò–†–û–í–ê–ù–ò–ï ID (–†–ï–ñ–ò–ú –ë–û–¢–ê)**\n\n"
        response += f"üè¢ **–ì—Ä—É–ø–ø–∞:** {chat.title}\n"
        response += f"üÜî **ID –≥—Ä—É–ø–ø—ã:** `{chat.id}`\n"
        response += f"üïí **–í—Ä–µ–º—è:** {datetime.now().strftime('%H:%M:%S')}\n\n"
        
        if topics_data:
            regular_topics = [t for t in topics_data if t['id'] > 0]
            response += f"üìä **–ù–ê–ô–î–ï–ù–û: {len(regular_topics)} —Ç–æ–ø–∏–∫–æ–≤**\n\n"
            
            response += "| ID | –ù–∞–∑–≤–∞–Ω–∏–µ | –°—Å—ã–ª–∫–∞ |\n"
            response += "|----|----------|--------|\n"
            
            for topic in regular_topics:
                title = topic['title'][:25] + "..." if len(topic['title']) > 25 else topic['title']
                response += f"| {topic['id']} | {title} | {topic['link']} |\n"
            
            response += "\nüîó **–í—Å–µ —Å—Å—ã–ª–∫–∏ –≥–æ—Ç–æ–≤—ã –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é!**"
        else:
            response += "‚ùå **–¢–æ–ø–∏–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã**"
        
        response += "\n\n‚ö†Ô∏è **–†–µ–∂–∏–º –±–æ—Ç–∞:** –ú–æ–≥—É—Ç –±—ã—Ç—å –ø–æ–∫–∞–∑–∞–Ω—ã –Ω–µ –≤—Å–µ —Ç–æ–ø–∏–∫–∏"
        
        return response

class UserModeHandler(BaseModeHandler):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥ –≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–º —Ä–µ–∂–∏–º–µ"""
    
    def __init__(self):
        super().__init__()
        self.auth_manager = None
        
    async def initialize(self, auth_manager, api_limiter):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ —Ä–µ–∂–∏–º–∞"""
        self.auth_manager = auth_manager
        self.api_limiter = api_limiter
        logger.info("‚úÖ UserModeHandler –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
    
    async def handle_command(self, command: str, event, task_id: int = None) -> bool:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã –≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–º —Ä–µ–∂–∏–º–µ"""
        try:
            user_id = event.sender_id
            
            # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫—É—é —Å–µ—Å—Å–∏—é
            user_client = await self.auth_manager.get_user_session(user_id)
            if not user_client:
                await event.reply("‚ùå **–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫—É—é —Å–µ—Å—Å–∏—é**\n\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ `/renew_my_api_hash`")
                if task_id:
                    await db_manager.complete_task(task_id, error="–ù–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–π —Å–µ—Å—Å–∏–∏")
                return False
            
            self.client = user_client
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—É
            success = False
            if command == 'scan':
                success = await self.handle_scan(event)
            elif command == 'get_all':
                success = await self.handle_get_all(event)
            elif command == 'get_users':
                success = await self.handle_get_users(event)
            elif command == 'get_ids':
                success = await self.handle_get_ids(event)
            else:
                logger.warning(f"‚ö†Ô∏è –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ –≤ user —Ä–µ–∂–∏–º–µ: {command}")
                if task_id:
                    await db_manager.complete_task(task_id, error=f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞: {command}")
                return False
            
            if success and task_id:
                await db_manager.complete_task(task_id, result="–ö–æ–º–∞–Ω–¥–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
            
            return success
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–∞–Ω–¥—ã {command} –≤ user —Ä–µ–∂–∏–º–µ: {e}")
            await event.reply(MESSAGES['error_general'].format(error_message=str(e)))
            if task_id:
                await db_manager.complete_task(task_id, error=str(e))
            return False
    
    async def handle_start(self, event) -> bool:
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ /start –≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–º —Ä–µ–∂–∏–º–µ"""
        try:
            start_time = datetime.now()
            user_id = event.sender_id
            
            logger.info(f"üë§ /start (user mode) –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
            
            # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫—É—é —Å–µ—Å—Å–∏—é
            user_client = await self.auth_manager.get_user_session(user_id)
            if not user_client:
                await event.reply("‚ùå **–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∞—è —Å–µ—Å—Å–∏—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞**\n\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ `/renew_my_api_hash` –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏")
                return False
            
            self.client = user_client
            
            # –í–∞–ª–∏–¥–∞—Ü–∏—è —á–∞—Ç–∞
            is_valid, chat = await self._validate_group_chat(event)
            if not is_valid:
                return False
            
            # –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
            try:
                full_chat = await user_client(GetFullChannelRequest(chat))
                participants_count = full_chat.full_chat.participants_count
            except:
                participants_count = getattr(chat, 'participants_count', 0)
            
            await self._auto_adjust_limits(event, participants_count, 'full_scan')
            
            # –ü–æ–ª–Ω–æ–µ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–æ–ø–∏–∫–æ–≤
            scanner = TopicScannerFactory.create_scanner(user_client, 'user')
            topics_data = await scanner.scan_topics(chat)
            
            # –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
            activity_stats = await db_manager.get_activity_stats(event.chat_id)
            
            response = self._build_start_response(chat, participants_count, topics_data, activity_stats, start_time)
            await send_long_message(event, response)
            
            duration = (datetime.now() - start_time).total_seconds()
            logger.info(f"‚ö° /start (user mode) –≤—ã–ø–æ–ª–Ω–µ–Ω –∑–∞ {duration:.2f}—Å")
            
            return True
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ handle_start (user mode): {e}")
            await event.reply(MESSAGES['error_general'].format(error_message=str(e)))
            return False
    
    async def handle_scan(self, event) -> bool:
        """–°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–æ–ø–∏–∫–æ–≤ –≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–º —Ä–µ–∂–∏–º–µ"""
        try:
            logger.info(f"üë§ /scan (user mode) –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {event.sender_id}")
            
            is_valid, chat = await self._validate_group_chat(event)
            if not is_valid:
                return False
            
            # –ü–æ–ª—É—á–∞–µ–º –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
            try:
                full_chat = await self.client(GetFullChannelRequest(chat))
                participants_count = full_chat.full_chat.participants_count
                about = getattr(full_chat.full_chat, 'about', '')
            except:
                participants_count = getattr(chat, 'participants_count', 0)
                about = ''
            
            await self._auto_adjust_limits(event, participants_count, 'scan')
            
            # –ü–æ–ª–Ω–æ–µ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ
            scanner = TopicScannerFactory.create_scanner(self.client, 'user')
            topics_data = await scanner.scan_topics(chat)
            
            response = self._build_scan_response(chat, participants_count, topics_data, about)
            await send_long_message(event, response)
            
            return True
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ handle_scan (user mode): {e}")
            await event.reply(MESSAGES['error_general'].format(error_message=str(e)))
            return False
    
    async def handle_get_all(self, event) -> bool:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö –≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–º —Ä–µ–∂–∏–º–µ"""
        try:
            logger.info(f"üë§ /get_all (user mode) –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {event.sender_id}")
            
            is_valid, chat = await self._validate_group_chat(event)
            if not is_valid:
                return False
            
            processing_msg = await event.reply("üîÑ **–ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–ª–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö (user —Ä–µ–∂–∏–º)...**\n\n–≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥...")
            
            # –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
            try:
                full_chat = await self.client(GetFullChannelRequest(chat))
                participants_count = full_chat.full_chat.participants_count
            except:
                participants_count = 0
            
            await self._auto_adjust_limits(event, participants_count, 'get_all')
            
            # –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö
            scanner = TopicScannerFactory.create_scanner(self.client, 'user')
            topics_data = await scanner.scan_topics(chat)
            active_users = await db_manager.get_active_users(event.chat_id)
            activity_stats = await db_manager.get_activity_stats(event.chat_id)
            
            response = self._build_get_all_response(chat, participants_count, topics_data, active_users, activity_stats)
            
            await processing_msg.delete()
            await send_long_message(event, response)
            
            return True
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ handle_get_all (user mode): {e}")
            await event.reply(MESSAGES['error_general'].format(error_message=str(e)))
            return False
    
    async def handle_get_users(self, event) -> bool:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π"""
        try:
            logger.info(f"üë§ /get_users (user mode) –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {event.sender_id}")
            
            is_valid, _ = await self._validate_group_chat(event)
            if not is_valid:
                return False
            
            active_users = await db_manager.get_active_users(event.chat_id)
            activity_stats = await db_manager.get_activity_stats(event.chat_id)
            
            response = self._build_users_response(active_users, activity_stats)
            await send_long_message(event, response)
            
            return True
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ handle_get_users (user mode): {e}")
            await event.reply(MESSAGES['error_general'].format(error_message=str(e)))
            return False
    
    async def handle_get_ids(self, event) -> bool:
        """–ü–æ–≤—Ç–æ—Ä–Ω–æ–µ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ ID —Å –ø–æ–ª–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π"""
        try:
            logger.info(f"üë§ /get_ids (user mode) –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {event.sender_id}")
            
            is_valid, chat = await self._validate_group_chat(event)
            if not is_valid:
                return False
            
            scanner = TopicScannerFactory.create_scanner(self.client, 'user')
            topics_data = await scanner.scan_topics(chat)
            
            response = self._build_ids_response(chat, topics_data)
            await send_long_message(event, response)
            
            return True
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ handle_get_ids (user mode): {e}")
            await event.reply(MESSAGES['error_general'].format(error_message=str(e)))
            return False
    
    def _build_start_response(self, chat, participants_count, topics_data, activity_stats, start_time) -> str:
        """–ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞ –¥–ª—è /start –≤ user —Ä–µ–∂–∏–º–µ"""
        response = "üë§ **TOPICS SCANNER BOT - –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–¨–°–ö–ò–ô –†–ï–ñ–ò–ú**\n\n"
        response += "‚ú® **–†–µ–∂–∏–º:** –ü–æ–ª–Ω—ã–π –¥–æ—Å—Ç—É–ø (MTProto API)\n\n"
        
        response += f"üè¢ **–°—É–ø–µ—Ä–≥—Ä—É–ø–ø–∞:** {chat.title}\n"
        response += f"üÜî **ID –≥—Ä—É–ø–ø—ã:** `{chat.id}`\n"
        response += f"üë• **–£—á–∞—Å—Ç–Ω–∏–∫–æ–≤:** {participants_count}\n"
        response += f"üïí **–í—Ä–µ–º—è —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è:** {start_time.strftime('%d.%m.%Y %H:%M:%S')}\n\n"
        
        # –ü–æ–ª–Ω–æ–µ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–æ–ø–∏–∫–æ–≤
        if topics_data:
            topics_data.sort(key=lambda x: x['id'])
            
            response += f"üìä **–ù–ê–ô–î–ï–ù–û –¢–û–ü–ò–ö–û–í: {len(topics_data)}**\n"
            response += "‚úÖ **–ü–æ–ª–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –¥–æ—Å—Ç—É–ø–Ω–∞ –≤ user —Ä–µ–∂–∏–º–µ**\n\n"
            
            # –î–µ—Ç–∞–ª—å–Ω–∞—è —Ç–∞–±–ª–∏—Ü–∞
            response += "| ID | –ù–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–ø–∏–∫–∞ | –°–æ–∑–¥–∞—Ç–µ–ª—å | –°–æ–æ–±—â–µ–Ω–∏–π | –°—Å—ã–ª–∫–∞ |\n"
            response += "|----|-----------------|-----------|-----------|--------|\n"
            
            for topic in topics_data:
                title = topic['title'][:15] + "..." if len(topic['title']) > 15 else topic['title']
                creator = topic['created_by'][:10] + "..." if len(topic['created_by']) > 10 else topic['created_by']
                messages = str(topic.get('messages', 0))[:8]
                link = topic['link'][:25] + "..." if len(topic['link']) > 25 else topic['link']
                
                response += f"| {topic['id']} | {title} | {creator} | {messages} | {link} |\n"
            
            response += "\nüîó **–î–ï–¢–ê–õ–¨–ù–ê–Ø –ò–ù–§–û–†–ú–ê–¶–ò–Ø:**\n"
            for topic in topics_data[:10]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–µ—Ç–∞–ª–∏ –ø–µ—Ä–≤—ã—Ö 10
                response += f"‚Ä¢ **{topic['title']}** (ID: {topic['id']})\n"
                response += f"  ‚îî –°–æ–∑–¥–∞—Ç–µ–ª—å: {topic['created_by']}\n"
                response += f"  ‚îî –°–æ–æ–±—â–µ–Ω–∏–π: {topic.get('messages', '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}\n"
                response += f"  ‚îî –°—Å—ã–ª–∫–∞: {topic['link']}\n"
            
            if len(topics_data) > 10:
                response += f"... –∏ –µ—â–µ {len(topics_data) - 10} —Ç–æ–ø–∏–∫–æ–≤\n"
        else:
            response += "‚ùå **–¢–æ–ø–∏–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã**\n"
            response += "–í–æ–∑–º–æ–∂–Ω–æ, –≥—Ä—É–ø–ø–∞ –Ω–µ —è–≤–ª—è–µ—Ç—Å—è —Ñ–æ—Ä—É–º–æ–º.\n\n"
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
        response += f"üë• **–ê–ö–¢–ò–í–ù–û–°–¢–¨ –ó–ê –°–ï–ì–û–î–ù–Ø ({activity_stats['date']}):**\n"
        response += f"‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {activity_stats['total_users']}\n"
        response += f"‚Ä¢ –í—Å–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–π: {activity_stats['total_messages']}\n"
        response += f"‚Ä¢ –°—Ä–µ–¥–Ω–µ–µ –Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {activity_stats['avg_messages']}\n\n"
        
        # –°–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥
        response += "üìã **–ö–û–ú–ê–ù–î–´ (–ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–¨–°–ö–ò–ô –†–ï–ñ–ò–ú):**\n"
        response += "‚Ä¢ `/scan` - –ø–æ–ª–Ω–æ–µ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–æ–ø–∏–∫–æ–≤\n"
        response += "‚Ä¢ `/get_all` - –≤—Å–µ –¥–∞–Ω–Ω—ã–µ —Å –ø–æ–ª–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π\n"
        response += "‚Ä¢ `/get_users` - –∞–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏\n"
        response += "‚Ä¢ `/my_status` - —Å—Ç–∞—Ç—É—Å –≤–∞—à–µ–π —Å–µ—Å—Å–∏–∏\n"
        response += "‚Ä¢ `/queue_status` - —Å—Ç–∞—Ç—É—Å –æ—á–µ—Ä–µ–¥–∏\n"
        response += "‚Ä¢ `/logout` - –≤—ã–π—Ç–∏ –∏–∑ user —Ä–µ–∂–∏–º–∞\n\n"
        
        response += "‚ú® **–ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ —Ä–µ–∂–∏–º–∞:**\n"
        response += "‚Ä¢ –ü–æ–ª–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤—Å–µ—Ö —Ç–æ–ø–∏–∫–∞—Ö\n"
        response += "‚Ä¢ –î–∞–Ω–Ω—ã–µ –æ —Å–æ–∑–¥–∞—Ç–µ–ª—è—Ö —Ç–æ–ø–∏–∫–æ–≤\n"
        response += "‚Ä¢ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ —Ç–æ–ø–∏–∫–∞—Ö\n"
        response += "‚Ä¢ –ù–µ—Ç –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π Bot API"
        
        return response
    
    def _build_scan_response(self, chat, participants_count, topics_data, about) -> str:
        """–ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞ –¥–ª—è /scan –≤ user —Ä–µ–∂–∏–º–µ"""
        response = f"üë§ **–ü–û–õ–ù–û–ï –°–ö–ê–ù–ò–†–û–í–ê–ù–ò–ï –¢–û–ü–ò–ö–û–í**\n\n"
        response += f"üè¢ **–ì—Ä—É–ø–ø–∞:** {chat.title}\n"
        response += f"üë• **–£—á–∞—Å—Ç–Ω–∏–∫–æ–≤:** {participants_count}\n"
        response += f"üïí **–í—Ä–µ–º—è:** {datetime.now().strftime('%H:%M:%S')}\n"
        
        if about:
            response += f"üìù **–û–ø–∏—Å–∞–Ω–∏–µ:** {about[:100]}{'...' if len(about) > 100 else ''}\n"
        
        response += "\n"
        
        if topics_data:
            response += f"üìä **–ù–ê–ô–î–ï–ù–û: {len(topics_data)} —Ç–æ–ø–∏–∫–æ–≤**\n"
            response += "‚ú® **–ü–æ–ª–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è (user —Ä–µ–∂–∏–º)**\n\n"
            
            # –î–µ—Ç–∞–ª—å–Ω–∞—è —Ç–∞–±–ª–∏—Ü–∞
            response += "| ID | –ù–∞–∑–≤–∞–Ω–∏–µ | –°–æ–∑–¥–∞—Ç–µ–ª—å | –°–æ–æ–±—â–µ–Ω–∏–π |\n"
            response += "|----|----------|-----------|----------|\n"
            
            for topic in sorted(topics_data, key=lambda x: x['id']):
                title = topic['title'][:20] + "..." if len(topic['title']) > 20 else topic['title']
                creator = topic['created_by'][:15] + "..." if len(topic['created_by']) > 15 else topic['created_by']
                messages = str(topic.get('messages', 0))
                
                response += f"| {topic['id']} | {title} | {creator} | {messages} |\n"
            
            response += "\nüîó **–ü–†–Ø–ú–´–ï –°–°–´–õ–ö–ò:**\n"
            for topic in topics_data:
                response += f"‚Ä¢ [{topic['title']}]({topic['link']})\n"
            
            response += "\n‚úÖ **–í—Å–µ —Ç–æ–ø–∏–∫–∏ –Ω–∞–π–¥–µ–Ω—ã —á–µ—Ä–µ–∑ MTProto API**"
        else:
            response += "‚ùå **–¢–æ–ø–∏–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã**\n"
            response += "–ì—Ä—É–ø–ø–∞ –Ω–µ —è–≤–ª—è–µ—Ç—Å—è —Ñ–æ—Ä—É–º–æ–º –∏–ª–∏ —Ç–æ–ø–∏–∫–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç."
        
        return response
    
    def _build_get_all_response(self, chat, participants_count, topics_data, active_users, activity_stats) -> str:
        """–ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞ –¥–ª—è /get_all –≤ user —Ä–µ–∂–∏–º–µ"""
        response = f"üë§ **–ü–û–õ–ù–´–ô –û–¢–ß–ï–¢ (–ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–¨–°–ö–ò–ô –†–ï–ñ–ò–ú)**\n\n"
        response += f"üè¢ **–ì—Ä—É–ø–ø–∞:** {chat.title}\n"
        response += f"üÜî **ID:** `{chat.id}`\n"
        response += f"üë• **–£—á–∞—Å—Ç–Ω–∏–∫–æ–≤:** {participants_count}\n"
        response += f"üïí **–í—Ä–µ–º—è:** {datetime.now().strftime('%d.%m.%Y %H:%M:%S')}\n\n"
        
        # –°–µ–∫—Ü–∏—è —Ç–æ–ø–∏–∫–æ–≤ —Å –ø–æ–ª–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
        if topics_data:
            response += f"üìã **–¢–û–ü–ò–ö–ò ({len(topics_data)}) - –ü–û–õ–ù–ê–Ø –ò–ù–§–û–†–ú–ê–¶–ò–Ø:**\n\n"
            
            for topic in sorted(topics_data, key=lambda x: x['id']):
                response += f"üîπ **{topic['title']}**\n"
                response += f"   ‚Ä¢ ID: {topic['id']}\n"
                response += f"   ‚Ä¢ –°–æ–∑–¥–∞—Ç–µ–ª—å: {topic['created_by']}\n"
                response += f"   ‚Ä¢ –°–æ–æ–±—â–µ–Ω–∏–π: {topic.get('messages', '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}\n"
                response += f"   ‚Ä¢ –°—Å—ã–ª–∫–∞: {topic['link']}\n"
                
                # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω–∞
                if topic.get('created_date'):
                    response += f"   ‚Ä¢ –°–æ–∑–¥–∞–Ω: {topic['created_date']}\n"
                if topic.get('last_message_date'):
                    response += f"   ‚Ä¢ –ü–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: {topic['last_message_date']}\n"
                
                response += "\n"
        
        # –°–µ–∫—Ü–∏—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
        response += f"üë• **–î–ï–¢–ê–õ–¨–ù–ê–Ø –ê–ö–¢–ò–í–ù–û–°–¢–¨ –ó–ê –°–ï–ì–û–î–ù–Ø ({activity_stats['date']}):**\n"
        response += f"üìä **–û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:**\n"
        response += f"‚Ä¢ –í—Å–µ–≥–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö: {activity_stats['total_users']}\n"
        response += f"‚Ä¢ –í—Å–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–π: {activity_stats['total_messages']}\n"
        response += f"‚Ä¢ –ú–∞–∫—Å–∏–º—É–º –æ—Ç –æ–¥–Ω–æ–≥–æ: {activity_stats['max_messages']}\n"
        response += f"‚Ä¢ –°—Ä–µ–¥–Ω–µ–µ –Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {activity_stats['avg_messages']}\n\n"
        
        if active_users:
            # –¢–æ–ø-10 —Å –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
            top_users = sorted(active_users, key=lambda x: x['message_count'], reverse=True)[:10]
            response += "üèÜ **–¢–û–ü-10 –°–ê–ú–´–• –ê–ö–¢–ò–í–ù–´–• (–î–ï–¢–ê–õ–¨–ù–û):**\n"
            
            for i, user in enumerate(top_users, 1):
                username = f"@{user['username']}" if user['username'] else (user['first_name'] or '–ë–µ–∑ –∏–º–µ–Ω–∏')
                response += f"{i}. **{username}**\n"
                response += f"   ‚Ä¢ User ID: `{user['user_id']}`\n"
                response += f"   ‚Ä¢ –°–æ–æ–±—â–µ–Ω–∏–π: {user['message_count']}\n"
                response += f"   ‚Ä¢ –ü–æ—Å–ª–µ–¥–Ω—è—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: {user['last_activity']}\n\n"
            
            # –ü–æ–ª–Ω—ã–π —Å–ø–∏—Å–æ–∫ –µ—Å–ª–∏ –Ω–µ –æ—á–µ–Ω—å –±–æ–ª—å—à–æ–π
            if len(active_users) <= 20:
                response += "üìã **–ü–û–õ–ù–´–ô –°–ü–ò–°–û–ö –ê–ö–¢–ò–í–ù–´–•:**\n"
                for user in active_users:
                    username = f"@{user['username']}" if user['username'] else (user['first_name'] or '–ë–µ–∑ –∏–º–µ–Ω–∏')
                    response += f"‚Ä¢ {username} (`{user['user_id']}`) - {user['message_count']} —Å–æ–æ–±—â–µ–Ω–∏–π\n"
            else:
                response += f"üìã **–í—Å–µ–≥–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {len(active_users)}** (–ø–æ–∫–∞–∑–∞–Ω—ã —Ç–æ–ø-10)\n"
        else:
            response += "üò¥ **–ü–æ–∫–∞ –Ω–∏–∫—Ç–æ –Ω–µ –ø—Ä–æ—è–≤–∏–ª –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å —Å–µ–≥–æ–¥–Ω—è**\n"
        
        response += f"\n‚ú® **–û—Ç—á–µ—Ç —Å–æ–∑–¥–∞–Ω –≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–º —Ä–µ–∂–∏–º–µ —Å –ø–æ–ª–Ω—ã–º –¥–æ—Å—Ç—É–ø–æ–º –∫ MTProto API**"
        
        return response
    
    def _build_users_response(self, active_users, activity_stats) -> str:
        """–ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞ –¥–ª—è /get_users –≤ user —Ä–µ–∂–∏–º–µ"""
        response = f"üë§ **–ê–ö–¢–ò–í–ù–´–ï –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ò (–ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–¨–°–ö–ò–ô –†–ï–ñ–ò–ú)**\n\n"
        response += f"üìÖ **–ó–∞ —Å–µ–≥–æ–¥–Ω—è ({activity_stats['date']}):**\n"
        response += f"üìä **–†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:**\n"
        response += f"‚Ä¢ –í—Å–µ–≥–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö: {activity_stats['total_users']}\n"
        response += f"‚Ä¢ –í—Å–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–π: {activity_stats['total_messages']}\n"
        response += f"‚Ä¢ –ú–∞–∫—Å–∏–º—É–º –æ—Ç –æ–¥–Ω–æ–≥–æ: {activity_stats['max_messages']}\n"
        response += f"‚Ä¢ –°—Ä–µ–¥–Ω–µ–µ –Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {activity_stats['avg_messages']}\n\n"
        
        if active_users:
            response += "üìã **–î–ï–¢–ê–õ–¨–ù–´–ô –°–ü–ò–°–û–ö:**\n"
            response += "| Username | User ID | –°–æ–æ–±—â–µ–Ω–∏–π | –ü–æ—Å–ª–µ–¥–Ω—è—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å |\n"
            response += "|----------|---------|-----------|---------------------|\n"
            
            for user in active_users:
                username = f"@{user['username']}" if user['username'] else (user['first_name'] or '–ë–µ–∑ –∏–º–µ–Ω–∏')
                username = username[:15] + "..." if len(username) > 15 else username
                last_activity = user['last_activity'][:16] if user['last_activity'] else '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'
                
                response += f"| {username} | `{user['user_id']}` | {user['message_count']} | {last_activity} |\n"
            
            # –ê–Ω–∞–ª–∏–∑ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –ø–æ –≤—Ä–µ–º–µ–Ω–∏
            response += "\nüìà **–ê–ù–ê–õ–ò–ó –ê–ö–¢–ò–í–ù–û–°–¢–ò:**\n"
            
            # –¢–æ–ø-5 –∞–∫—Ç–∏–≤–Ω—ã—Ö
            top_users = sorted(active_users, key=lambda x: x['message_count'], reverse=True)[:5]
            response += "ü•á **–°–∞–º—ã–µ –∞–∫—Ç–∏–≤–Ω—ã–µ:**\n"
            for i, user in enumerate(top_users, 1):
                username = f"@{user['username']}" if user['username'] else (user['first_name'] or '–ë–µ–∑ –∏–º–µ–Ω–∏')
                response += f"{i}. {username} - {user['message_count']} —Å–æ–æ–±—â–µ–Ω–∏–π\n"
            
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É —Å–æ–æ–±—â–µ–Ω–∏–π
            message_counts = [user['message_count'] for user in active_users]
            response += f"\nüìä **–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π:**\n"
            response += f"‚Ä¢ 1 —Å–æ–æ–±—â–µ–Ω–∏–µ: {len([c for c in message_counts if c == 1])} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π\n"
            response += f"‚Ä¢ 2-5 —Å–æ–æ–±—â–µ–Ω–∏–π: {len([c for c in message_counts if 2 <= c <= 5])} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π\n"
            response += f"‚Ä¢ 6-10 —Å–æ–æ–±—â–µ–Ω–∏–π: {len([c for c in message_counts if 6 <= c <= 10])} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π\n"
            response += f"‚Ä¢ –ë–æ–ª–µ–µ 10 —Å–æ–æ–±—â–µ–Ω–∏–π: {len([c for c in message_counts if c > 10])} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π\n"
            
        else:
            response += "üò¥ **–ü–æ–∫–∞ –Ω–∏–∫—Ç–æ –Ω–µ –ø—Ä–æ—è–≤–∏–ª –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å —Å–µ–≥–æ–¥–Ω—è**\n"
            response += "–ö–∞–∫ —Ç–æ–ª—å–∫–æ –∫—Ç–æ-—Ç–æ –Ω–∞–ø–∏—à–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ, —è —ç—Ç–æ –∑–∞—Ñ–∏–∫—Å–∏—Ä—É—é!\n"
        
        response += "\n‚ÑπÔ∏è **–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è (–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π —Ä–µ–∂–∏–º):**\n"
        response += "‚Ä¢ –î–∞–Ω–Ω—ã–µ –æ–±–Ω–æ–≤–ª—è—é—Ç—Å—è –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏\n"
        response += "‚Ä¢ –†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏ –∞–Ω–∞–ª–∏–∑\n"
        response += "‚Ä¢ –¢–æ—á–Ω–æ–µ –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏\n"
        response += "‚Ä¢ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π —Å–±—Ä–æ—Å –¥–∞–Ω–Ω—ã—Ö –≤ 00:00\n"
        response += "‚Ä¢ –ö–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞ –Ω–µ —Å—á–∏—Ç–∞—é—Ç—Å—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å—é"
        
        return response
    
    def _build_ids_response(self, chat, topics_data) -> str:
        """–ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞ –¥–ª—è /get_ids –≤ user —Ä–µ–∂–∏–º–µ"""
        response = f"üë§ **–ü–û–í–¢–û–†–ù–û–ï –°–ö–ê–ù–ò–†–û–í–ê–ù–ò–ï ID (–ü–û–õ–ù–ê–Ø –ò–ù–§–û–†–ú–ê–¶–ò–Ø)**\n\n"
        response += f"üè¢ **–ì—Ä—É–ø–ø–∞:** {chat.title}\n"
        response += f"üÜî **ID –≥—Ä—É–ø–ø—ã:** `{chat.id}`\n"
        response += f"üïí **–í—Ä–µ–º—è:** {datetime.now().strftime('%H:%M:%S')}\n"
        response += f"‚ú® **–†–µ–∂–∏–º:** –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π (MTProto API)\n\n"
        
        if topics_data:
            response += f"üìä **–ù–ê–ô–î–ï–ù–û: {len(topics_data)} —Ç–æ–ø–∏–∫–æ–≤**\n\n"
            
            # –î–µ—Ç–∞–ª—å–Ω–∞—è —Ç–∞–±–ª–∏—Ü–∞ —Å –ø–æ–ª–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
            response += "| ID | –ù–∞–∑–≤–∞–Ω–∏–µ | –°–æ–∑–¥–∞—Ç–µ–ª—å | –°–æ–æ–±—â–µ–Ω–∏–π | –°—Å—ã–ª–∫–∞ |\n"
            response += "|----|----------|-----------|-----------|--------|\n"
            
            for topic in sorted(topics_data, key=lambda x: x['id']):
                title = topic['title'][:15] + "..." if len(topic['title']) > 15 else topic['title']
                creator = topic['created_by'][:10] + "..." if len(topic['created_by']) > 10 else topic['created_by']
                messages = str(topic.get('messages', 0))
                link = topic['link'][:30] + "..." if len(topic['link']) > 30 else topic['link']
                
                response += f"| {topic['id']} | {title} | {creator} | {messages} | {link} |\n"
            
            response += "\nüîó **–ì–û–¢–û–í–´–ï –°–°–´–õ–ö–ò –î–õ–Ø –ö–û–ü–ò–†–û–í–ê–ù–ò–Ø:**\n"
            for topic in topics_data:
                response += f"‚Ä¢ **{topic['title']}**: {topic['link']}\n"
            
            response += "\n‚úÖ **–í—Å–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—É—á–µ–Ω—ã —á–µ—Ä–µ–∑ –ø–æ–ª–Ω—ã–π MTProto API –¥–æ—Å—Ç—É–ø**"
        else:
            response += "‚ùå **–¢–æ–ø–∏–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã**\n"
            response += "–ì—Ä—É–ø–ø–∞ –Ω–µ —è–≤–ª—è–µ—Ç—Å—è —Ñ–æ—Ä—É–º–æ–º –∏–ª–∏ —Ç–æ–ø–∏–∫–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç."
        
        return response